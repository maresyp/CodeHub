Table of 2.
 
table(X, A,B,C,D,E,F,G,H,I,J):-
    A is X*1,
    format('\n2 x 1 = ~w',[A]),
    B is X*2,
    format('\n2 x 2 = ~w',[B]),
    C is X*3,
    format('\n2 x 3 = ~w',[C]),
    D is X*4,
    format('\n2 x 4 = ~w',[D]),
    E is X*5,
    format('\n2 x 5 = ~w',[E]),
    F is X*6,
    format('\n2 x 6 = ~w',[F]),
    G is X*7,
    format('\n2 x 7 = ~w',[G]),
    H is X*8,
    format('\n2 x 8 = ~w',[H]),
    I is X*9,
    format('\n2 x 9 = ~w',[I]),
    J is X*10,
    format('\n2 x 10 = ~w',[J]).
 
 
Parent-Child Relation:
 
parent(bob, charlie).
parent(charlie, eric).
parent(eric, matthew).
 
son(matthew, eric):-
    parent(eric, matthew).
 
 
Factorial of a no:
 
factorial(0,1).
 
factorial(N,F) :-
   N>0,
   N1 is N-1,
   factorial(N1,F1),
   F is N * F1.
factorial(0,F,F).
 
% factorial(5,X).
 
 
EvenOdd:
 
evenodd(X):-
    0 is mod(X,2),
    write('Even Number').
 
evenodd(X):-
    1 is mod(X,2),
    write('Odd Number').
 
% In terminal:- evenodd(5).
 
 
Missionaries and Cannibals.
 
% Represent a state as [CL,ML,B,CR,MR]
start([3,3,left,0,0]).
goal([0,0,right,3,3]).
 
legal(CL,ML,CR,MR) :-
    % is this state a legal one?
    ML>=0, CL>=0, MR>=0, CR>=0,
    (ML>=CL ; ML=0),
    (MR>=CR ; MR=0).
 
% Possible moves:
move([CL,ML,left,CR,MR],[CL,ML2,right,CR,MR2]):-
    % Two missionaries cross left to right.
    MR2 is MR+2,
    ML2 is ML-2,
    legal(CL,ML2,CR,MR2).
 
move([CL,ML,left,CR,MR],[CL2,ML,right,CR2,MR]):-
    % Two cannibals cross left to right.
    CR2 is CR+2,
    CL2 is CL-2,
    legal(CL2,ML,CR2,MR).
 
move([CL,ML,left,CR,MR],[CL2,ML2,right,CR2,MR2]):-
    %  One missionary and one cannibal cross left to right.
    CR2 is CR+1,
    CL2 is CL-1,
    MR2 is MR+1,
    ML2 is ML-1,
    legal(CL2,ML2,CR2,MR2).
 
move([CL,ML,left,CR,MR],[CL,ML2,right,CR,MR2]):-
    % One missionary crosses left to right.
    MR2 is MR+1,
    ML2 is ML-1,
    legal(CL,ML2,CR,MR2).
 
move([CL,ML,left,CR,MR],[CL2,ML,right,CR2,MR]):-
    % One cannibal crosses left to right.
    CR2 is CR+1,
    CL2 is CL-1,
    legal(CL2,ML,CR2,MR).
 
move([CL,ML,right,CR,MR],[CL,ML2,left,CR,MR2]):-
    % Two missionaries cross right to left.
    MR2 is MR-2,
    ML2 is ML+2,
    legal(CL,ML2,CR,MR2).
 
move([CL,ML,right,CR,MR],[CL2,ML,left,CR2,MR]):-
    % Two cannibals cross right to left.
    CR2 is CR-2,
    CL2 is CL+2,
    legal(CL2,ML,CR2,MR).
 
move([CL,ML,right,CR,MR],[CL2,ML2,left,CR2,MR2]):-
    %  One missionary and one cannibal cross right to left.
    CR2 is CR-1,
    CL2 is CL+1,
    MR2 is MR-1,
    ML2 is ML+1,
    legal(CL2,ML2,CR2,MR2).
 
move([CL,ML,right,CR,MR],[CL,ML2,left,CR,MR2]):-
    % One missionary crosses right to left.
    MR2 is MR-1,
    ML2 is ML+1,
    legal(CL,ML2,CR,MR2).
 
move([CL,ML,right,CR,MR],[CL2,ML,left,CR2,MR]):-
    % One cannibal crosses right to left.
    CR2 is CR-1,
    CL2 is CL+1,
    legal(CL2,ML,CR2,MR).
 
 
% Recursive call to solve the problem
path([CL1,ML1,B1,CR1,MR1],[CL2,ML2,B2,CR2,MR2],Explored,MovesList) :- 
   move([CL1,ML1,B1,CR1,MR1],[CL3,ML3,B3,CR3,MR3]), 
   not(member([CL3,ML3,B3,CR3,MR3],Explored)),
   path([CL3,ML3,B3,CR3,MR3],[CL2,ML2,B2,CR2,MR2],[[CL3,ML3,B3,CR3,MR3]|Explored],[ [[CL3,ML3,B3,CR3,MR3],[CL1,ML1,B1,CR1,MR1]] | MovesList ]).
 
% Solution found
path([CL,ML,B,CR,MR],[CL,ML,B,CR,MR],_,MovesList):- 
    output(MovesList).
 
% Printing
output([]) :- nl. 
output([[A,B]|MovesList]) :- 
    output(MovesList), 
    write(B), write(' -> '), write(A), nl.
 
% Find the solution for the missionaries and cannibals problem
find :- 
   path([3,3,left,0,0],[0,0,right,3,3],[[3,3,left,0,0]],_).
 
% [filename]. then find. in terminal.
 
 
Waterjug
 
checkXY(F,S):- F>=0,F=<4,S>=0,S=<3.
 
%pour from 3L to 4L until 4L is full
move((X,Y), (4,NewY)) :-
                          NewY is X + Y - 4, X + Y > 4, checkXY(4,NewY).
 
%pour from 4L to 3L until 4L is empty
move((X,Y), (0,NewY)) :-
                          NewY is X + Y , X + Y =< 4, checkXY(0,NewY).
 
%pour from 4L to 3L until 3L is full
move((X,Y), (NewX,3)) :-
                          NewX is X + Y - 3, X + Y > 3, checkXY(NewX,3).
 
%pour from 3L to 4L until 3L is empty
move((X,Y), (NewX,0)) :-
                          NewX is X + Y , X + Y =<4, checkXY(NewX,0).
 
 
 
% Fill the 4L jug from tap
 
move((X,Y), (4,Y)):-
                          X=<4, X>=0.
 
% Fill the 3L jug from tap
 
move((X,Y), (X,3)):-
                       Y=<3, Y>=0.
 
% Empty the 3L jug down the sink
 
move((X,Y), (X,0)) :-
                Y >= 0.
 
% Empty the 4L jug down the sink
 
move((X,Y), (0,Y)) :-
                        X >= 0.
 
 
% R is a list of each state after pouring the water
% solve([Before], Fill, [After]).
 
solve([(X1,Y1)|R], [(2,Y2), (X1,Y1)|R]):-
                            move((X1,Y1), (2,Y2)), !.
 
% Recursion
% Starting at 4 different initial states
% Start pouring the jugs
% True if (X2,Y2) is not a member of [(X1,Y1)|R]
% Stop when found (2,Y)
 
solve([(X1,Y1)|R], Path) :-
                                move((X1,Y1), (X2,Y2)),
                    not(member((X2,Y2), [(X1,Y1)|R])),
                                solve([(X2,Y2), (X1,Y1)|R], Path).
 
 
% Start the search with (4,0).
 
solved40(PathList) :-
                 solve([(4,0)], PathList).
 
 
% Start the search with (0,0).
 
solved00(PathList) :-
                 solve([(0,0)], PathList).
 
% Start the search with (0,3).
 
solved03(PathList) :-
                 solve([(0,3)], PathList).
 
% Start the search with (4,3).
 
solved43(PathList) :-
                 solve([(4,3)], PathList).
 
% In terminal: solved43(Path).
 
 
8 queens problem
 
 
use_module(library(lists)).
/*
N-queens problem solved in Prolog (SWI-Prolog).
Usage es: n_queen(4,X).
*/
 
n_queen(N, Solution) :-
    %create a list of N dummy variabiles
    length(Solution, N),
    
    queen(Solution, N). %search for a configuration of N queens
 
 
%returns a list of integer from K to N included es up2N(1,3,X) X = [1,2,3]
up2N(N,N,[N]) :-!.
up2N(K,N,[K|Tail]) :- K < N, K1 is K+1, up2N(K1, N, Tail).
 
 
queen([],_). %No queens is a solution for any N queens problem. All queens are in a safe position.
 
queen([Q|Qlist],N) :-
    
    queen(Qlist, N), %first we solve the subproblem
 
    %we then generate all possible positions for queen Q
    up2N(1,N,Candidate_positions_for_queenQ),
 
    %we pick one of such position
    member(Q, Candidate_positions_for_queenQ),
 
    %we check whether the queen Q is safe
    check_solution(Q,Qlist, 1).
 
 
 
check_solution(_,[], _).
 
check_solution(Q,[Q1|Qlist],Xdist) :-
    Q =\= Q1, %not on the same row  
    Test is abs(Q1-Q),
    Test =\= Xdist, %diagonal distance
    Xdist1 is Xdist + 1,
    check_solution(Q,Qlist,Xdist1).
 
 
% In terminal:- n_queen(8,X).