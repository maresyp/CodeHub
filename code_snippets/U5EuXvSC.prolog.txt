%locatie(Nume,Localitate, Categorie)
locatie(n1,l1,hotel).
locatie(n2,l1,hotel).
locatie(n3,l1,pensiune).
locatie(n4,l2,apartament).
locatie(n5,l2,hotel).
locatie(n6,l2,casa_v).
locatie(n7,l3,hotel).
 
%pret_Locatie(NumeLocatie,Pret,LunaStart,LunaStop) 
pret_Locatie(n1,150,1,6).
pret_Locatie(n1,250,8,12).
pret_Locatie(n2,500,11,12).
pret_Locatie(n2,50,1,10).
pret_Locatie(n3,150,8,12).
pret_Locatie(n4,150,8,12).
pret_Locatie(n5,150,3,12).
pret_Locatie(n6,200,9,12).
pret_Locatie(n7,150,8,10).
 
%cerere(ID_cerere,NumeLocatie, NumeClient, ziCheckIn, lunaCheckIn,NrNopti) 
cerere(id1,n1,c1,10,12,3).
cerere(id2,n1,c2,10,11,4).
cerere(id3,n2,c2,9,1,2).
cerere(id4,n3,c4,22,11,10).
cerere(id5,n5,c2,5,4,31).
cerere(id6,n6,c5,25,12,3).
cerere(id7,n7,c4,10,10,7).
cerere(id8,n6,c6,10,12,3).
cerere(id9,n2,c7,20,10,25).
cerere(id10,n2,c8,30,10,4).
 
 
%calendar(Luna, NrZile)
calendar(1,31).
calendar(2,28).
calendar(3,31).
calendar(4,30).
calendar(5,31).
calendar(6,30).
calendar(7,31).
calendar(8,31).
calendar(9,30).
calendar(10,31).
calendar(11,30).
calendar(12,31).
 
loc_price(X,List):-
findall(Loc,(pret_Locatie(Loc,_,L1,L2),L1=<X,L2>=X),List).
 
loc_no_price(X,ListNP):- %localitatile fara pret
loc_price(X,List),
findall(Loc,(locatie(Loc,_,_),(\+member(Loc,List))),ListNP).
 
pret_luna(X,Y,P):-
locatie(X,_,_),
pret_Locatie(X,P,L1,L2),
L1=<Y,
L2>=Y,
loc_price(Y,List),
member(X,List).
 
pret_cerere(ID,P):-
cerere(ID,Loc,_,Z,L,NrP),
calendar(L,NrZ),
loc_price(L,List),
member(Loc,List),
(
(
Z+NrP=<NrZ+1,
pret_Locatie(Loc,PrL,L1,L2),L1=<L,L2>=L,
P is PrL*NrP
)
;
(
Z+NrP>NrZ+1,
La is (Z+NrP)-NrZ-1,
LU is NrP-La,
( 
(pret_Locatie(Loc,PrL,L1,L2),L1=<L,L2>=L+1,
P is PrL*NrP
)
;
(
pret_Locatie(Loc,PrL,_,L2),
L2=L,
L3 is L2+1,
pret_Locatie(Loc,PrL2,L3,_),
P is PrL*La+PrL2*LU
) 
)
)
).
 
pret_mediu(X,Y,PM):-
findall(Pret,(locatie(Loc,X,hotel),pret_Locatie(Loc,Pret,L1,L2),L1=<Y,L2>=Y),ListaP),
sum(ListaP,SLP),
length(ListaP,LLP),
PM is (SLP/LLP).
 
alfa_omega(ID,A,O,OVF):-
cerere(ID,Loc,_,Z,L,NrP),
calendar(L,NrZ),
loc_price(L,List),
member(Loc,List),
(
(
Z+NrP=<NrZ+1,
pret_Locatie(Loc,_,L1,L2),L1=<L,L2>=L,
A is Z,
O is Z+NrP+1,
OVF is 0
)
;
(
Z+NrP>NrZ+1,
La is (Z+NrP)-NrZ-1,
O is NrP-La+1,
A is Z,
OVF is 1
)
).
 
cereri(X,Y,List):-
Yp is Y-1,
findall(ID,(
(alfa_omega(ID,A,O,0),cerere(ID,_,_,_,Y,_),X>=A,X=<O);
(alfa_omega(ID,A,O,1),cerere(ID,_,_,_,Yp,_),X=<O);
(alfa_omega(ID,A,O,1),cerere(ID,_,_,_,Y,_),X>=A)
), List ).
 
cereriNume(X,Y,Nume,ListaS):-
Yp is Y-1,
findall([NrP,ID],(
(alfa_omega(ID,A,O,0),cerere(ID,Nume,_,_,Y,NrP),X>=A,X=<O);
(alfa_omega(ID,A,O,1),cerere(ID,Nume,_,_,Yp,NrP),X=<O);
(alfa_omega(ID,A,O,1),cerere(ID,Nume,_,_,Y,NrP),X>=A)
), List ),
sort(List, ListaS).