Imports System.IO
Imports System.Windows.Forms.VisualStyles.VisualStyleElement.Rebar
 
Public Class Form1
    Public board As New List(Of List(Of pButton))
    Public safeCells As Integer = 0
    Public guessedSafeCells As Integer = 0
    Public incorrectGuesses As Integer = 0
 
    Public ReadOnly Property gameEnd As Boolean
        Get
            If guessedSafeCells = safeCells Then Return True
            Return False
        End Get
    End Property
 
 
    Private Sub LoadForm() Handles MyBase.Load
        startNewRandom(5, 5)
    End Sub
 
    Private Sub startNewRandom(height As Integer, width As Integer)
        lblProgress.Text = "0.00%"
        lblProgress.ForeColor = Color.FromArgb(255, 96, 0)
        lblMistakes.Text = 0
        safeCells = 0
        guessedSafeCells = 0
        incorrectGuesses = 0
        generateRandomBoard(height, width)
        fillBoardPanel()
        generateColumnLabels()
        generateRowLabels()
    End Sub
 
    Private Sub startNewUnrandom()
        lblProgress.Text = "0.00%"
        lblProgress.ForeColor = Color.FromArgb(255, 96, 0)
        fillBoardPanel()
        generateColumnLabels()
        generateRowLabels()
    End Sub
 
    Public Sub generateRandomBoard(numOfRows As Integer, numOfCols As Integer)
        board.Clear()
 
        Dim rand As New Random
        While board.Count <> numOfRows
            board.Add(New List(Of pButton))
        End While
        For x As Integer = 0 To numOfRows - 1
            For y As Integer = 0 To numOfCols - 1
                Dim good As Boolean = IIf(rand.Next(0, 2) = 1, True, False)
                If good Then safeCells += 1
                Dim pbtn As pButton = New pButton With {
                    .Correct = good
                }
                board(x).Add(pbtn)
            Next
        Next
    End Sub
    Private Sub generateColumnLabels()
        pnlTopNumbers.Controls.Clear()
        If board.Count = 0 Then
            Return
        End If
        Dim cols As Integer = board(0).Count
        Dim rows As Integer = board.Count
 
        For col As Integer = 0 To cols - 1
            Dim count As Integer = 0
            Dim streaks As New List(Of Integer)
            Dim streak As Integer = 0
            For row As Integer = 0 To rows - 1
                If board(row)(col).Correct Then
                    streak += 1
                Else
                    If streak >= 1 Then
                        streaks.Add(streak)
                    End If
 
                    streak = 0
                End If
            Next
            If streak >= 1 Then
                streaks.Add(streak)
            End If
            Dim colwidth As Integer = pnlTopNumbers.Width / cols
            Dim lbl As Label = createTopLabel(streaks, colwidth)
            lbl.Location = New Point(col * colwidth)
            pnlTopNumbers.Controls.Add(lbl)
        Next
    End Sub
 
    Private Sub generateRowLabels()
        pnlLeftNumbers.Controls.Clear()
        If board(0).Count = 0 Then
            Return
        End If
        Dim cols As Integer = board(0).Count
        Dim rows As Integer = board.Count
        For row As Integer = 0 To rows - 1
            Dim count As Integer = 0
            Dim streaks As New List(Of Integer)
            Dim streak As Integer = 0
            For col As Integer = 0 To cols - 1
                If board(row)(col).Correct Then
                    streak += 1
                Else
                    If streak >= 1 Then
                        streaks.Add(streak)
                    End If
                    streak = 0
                End If
            Next
            If streak >= 1 Then
                streaks.Add(streak)
            End If
            Dim rowHeight As Integer = pnlLeftNumbers.Height / rows
            Dim lbl As Label = createSideLabel(streaks, rowHeight)
            lbl.Location = New Point(0, row * rowHeight)
            pnlLeftNumbers.Controls.Add(lbl)
        Next
    End Sub
 
    Function createSideLabel(num As List(Of Integer), height As Integer) As Label
        Dim lbl As New Label
        lbl.Font = New Font("Helvetica Ltd", 13, FontStyle.Bold)
        lbl.ForeColor = Color.White
        lbl.Height = height
        lbl.Width = pnlLeftNumbers.Width
        lbl.TextAlign = ContentAlignment.MiddleRight
        If num.Count >= 1 Then
            lbl.Text = Strings.Join(num.Select(Function(x) x.ToString()).ToArray(), " ")
        Else
            lbl.Text = "0"
        End If
        Return lbl
    End Function
    Function createTopLabel(num As List(Of Integer), width As Integer) As Label
        Dim lbl As New Label
        lbl.Font = New Font("Helvetica Ltd", 13, FontStyle.Bold)
        lbl.ForeColor = Color.White
        lbl.Width = width
        lbl.Height = pnlTopNumbers.Height
        lbl.TextAlign = ContentAlignment.BottomCenter
        If num.Count >= 1 Then
            lbl.Text = Strings.Join(num.Select(Function(x) x.ToString()).ToArray(), ControlChars.NewLine)
        Else
            lbl.Text = "0"
        End If
        Return lbl
    End Function
 
    Public Sub fillBoardPanel()
        If board.Count < 1 Then
            MsgBox("Board Data Structure is Invalid.")
            Return
        End If
        Dim cols = board(0).Count
        Dim rows = board.Count
        pnlBoard.Controls.Clear()
        'padding in pixels
        Dim padding As Integer = 3
        Dim btnWidth As Double = ((pnlBoard.Width - padding * 2) / cols) - padding
        Dim btnHeight As Double = ((pnlBoard.Height - padding * 2) / rows) - padding
        For row As Integer = 0 To rows - 1
            For col As Integer = 0 To cols - 1
                board(row)(col).Width = btnWidth - padding
                board(row)(col).Height = btnHeight - padding
                board(row)(col).Location = New Point(col * (btnWidth + padding) + (padding * 2), row * (btnHeight + padding) + (padding * 2))
                pnlBoard.Controls.Add(board(row)(col))
                AddHandler board(row)(col).MouseDown, AddressOf cellClick
                AddHandler board(row)(col).MouseEnter, AddressOf cellEnter
                AddHandler board(row)(col).MouseLeave, AddressOf cellLeave
            Next
        Next
    End Sub
 
    Public Sub revealAnswers()
        For Each ctrl As pButton In pnlBoard.Controls
            If ctrl.Correct = True Then
                ctrl.Text = "C"
            Else
                ctrl.Text = "X"
            End If
        Next
    End Sub
 
    Public Sub hideAnswers()
        For Each ctrl As pButton In pnlBoard.Controls
            ctrl.Text = ""
        Next
    End Sub
 
    Public Sub cellEnter(sender As pButton, e As EventArgs)
        If Not gameEnd Then
            Dim xCoord As Integer
            Dim yCoord As Integer
            For x As Integer = 0 To board(0).Count - 1
                For y As Integer = 0 To board.Count - 1
                    If sender Is board(y)(x) Then
                        xCoord = x
                        yCoord = y
                    End If
                Next
            Next
 
            If Not sender.Clicked Then sender.BackColor = Color.FromArgb(255, 165, 89)
 
            For x As Integer = 0 To board(0).Count - 1
                If Not board(yCoord)(x).Clicked Then
                    board(yCoord)(x).BackColor = Color.FromArgb(255, 170, 82)
                End If
            Next
 
            For y As Integer = 0 To board.Count - 1
                If Not board(y)(xCoord).Clicked Then
                    board(y)(xCoord).BackColor = Color.FromArgb(255, 170, 82)
                End If
            Next
        End If
    End Sub
 
    Public Sub normalizeBoard()
        Dim cols = board(0).Count
        Dim rows = board.Count
        For row As Integer = 0 To rows - 1
            For col As Integer = 0 To cols - 1
                Dim cell As pButton = board(row)(col)
                If cell.Clicked Then
                    Select Case True
                        Case cell.Correct
                            cell.BackColor = Color.FromArgb(255, 96, 0)
                        Case Not cell.Correct
                            Color.FromArgb(245, 15, 15)
                            cell.BackColor = Color.FromArgb(185, 185, 185)
                    End Select
                Else
                    cell.BackColor = Color.FromArgb(255, 230, 199)
                End If
            Next
        Next
    End Sub
    Public Sub cellLeave(sender As Object, e As EventArgs)
        'If the game is not over
        If Not gameEnd Then
            normalizeBoard()
        End If
    End Sub
 
    Public Sub cellClick(sender As pButton, e As EventArgs)
        If Not gameEnd Then
            If sender.Clicked Then
                Return
            Else
                sender.Clicked = True
            End If
        End If
    End Sub
 
    Public Sub updateProgress()
        Dim percent As Double = guessedSafeCells / safeCells
        Dim roundedPercent As Integer = Math.Floor(percent * 100)
        If roundedPercent = 100 Then
            lblProgress.ForeColor = Color.Green
        End If
        lblProgress.Text = percent.ToString("P")
    End Sub
 
    Private Sub btnNewGame_Click(sender As Object, e As EventArgs) Handles btnNewGame.Click, NewGameToolStripMenuItem.Click
        Dim size As Array = cmbxGridSize.Text.Split("x")
        Dim width As Integer = Integer.Parse(size(0))
        Dim height As Integer = Integer.Parse(size(1))
        startNewRandom(height, width)
        If Debug Then
            revealAnswers()
        End If
    End Sub
 
    Public Sub finishGame()
        Dim cols = board(0).Count
        Dim rows = board.Count
        For row As Integer = 0 To rows - 1
            For col As Integer = 0 To cols - 1
                Dim cell As pButton = board(row)(col)
                If cell.Correct Then
                    If incorrectGuesses = 0 Then
                        cell.Image = My.Resources.rainbow
                    Else
                        cell.BackColor = Color.Green
                    End If
                Else
                    cell.BackColor = Color.FromArgb(185, 185, 185)
                End If
            Next
        Next
    End Sub
 
    Private Debug As Boolean = False
    Private Sub DebugModeToolStripMenuItem_Click(sender As ToolStripMenuItem, e As EventArgs) Handles DebugModeToolStripMenuItem.Click
        Debug = sender.Checked
        If Debug Then
            revealAnswers()
        Else
            hideAnswers()
        End If
    End Sub
 
    Private Sub ExitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ExitToolStripMenuItem.Click
        End
    End Sub
 
    Private Function GetFileFromDialog() As String
        Dim fileLocation As String
        Using fDialog As New OpenFileDialog()
            fDialog.Filter = "CSV Files (*.csv)|*.csv"
            fDialog.ShowDialog()
            fileLocation = fDialog.FileName
        End Using
        If File.Exists(fileLocation) Then
            Return fileLocation
        End If
        Return Nothing
    End Function
 
    Private Sub LoadFromCSVToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles LoadFromCSVToolStripMenuItem.Click, btnLoadFromCSV.Click
        Dim fileLocation = GetFileFromDialog()
        If fileLocation = Nothing Then
            lblCSVError.Visible = True
            Exit Sub
        End If
        createCSVBoard(fileLocation)
    End Sub
 
    Private Sub createCSVBoard(fileLocation As String)
        Dim tempBoard As New List(Of List(Of String))
        Using reader As New StreamReader(fileLocation)
            While reader.Peek <> -1
                Dim line As List(Of String) = reader.ReadLine.Split(",").ToList
                tempBoard.Add(line)
            End While
        End Using
 
        Dim rows As Integer = tempBoard.Count
        Dim cols As Integer = tempBoard(0).Count
 
        board.Clear()
        lblProgress.Text = "0.00%"
        lblProgress.ForeColor = Color.FromArgb(255, 96, 0)
        lblMistakes.Text = 0
        safeCells = 0
        guessedSafeCells = 0
        incorrectGuesses = 0
 
        While board.Count <> rows
            board.Add(New List(Of pButton))
        End While
        For row As Integer = 0 To rows - 1
            For col As Integer = 0 To cols - 1
                Dim good As Boolean = IIf(tempBoard(row)(col).ToLower = "x", True, False)
                If good Then safeCells += 1
                Dim pbtn As pButton = New pButton With {
                    .Correct = good
                }
                board(row).Add(pbtn)
            Next
        Next
        lblCSVError.Visible = False
        startNewUnrandom()
        If Debug Then
            revealAnswers()
        End If
    End Sub
 
    Private Sub NewGameToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewGameToolStripMenuItem.Click
 
    End Sub
 
    Private Sub ResetGameToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ResetGameToolStripMenuItem.Click, btnResetGame.Click
        lblProgress.Text = "0.00%"
        lblProgress.ForeColor = Color.FromArgb(255, 96, 0)
        lblMistakes.Text = 0
        guessedSafeCells = 0
        incorrectGuesses = 0
        For Each cell As pButton In pnlBoard.Controls
            cell.Clicked = False
            cell.Image = Nothing
        Next
    End Sub
End Class
 
Public Class pButton
    Inherits Label
    Private Property _Clicked As Boolean = False
    Public Property Clicked As Boolean
        Get
            Return _Clicked
        End Get
        Set(value As Boolean)
            _Clicked = value
            If _Clicked AndAlso Correct Then
                Me.BackColor = Color.FromArgb(255, 96, 0)
                Form1.guessedSafeCells += 1
                Form1.updateProgress()
            ElseIf _Clicked AndAlso Not Correct Then
                Me.BackColor = Color.FromArgb(185, 185, 185)
                Form1.incorrectGuesses += 1
                Form1.lblMistakes.Text = Form1.incorrectGuesses
            Else
                Me.BackColor = Color.FromArgb(0, 0, 255)
            End If
            If value = False Then
                Me.BackColor = Color.FromArgb(255, 230, 199)
            End If
 
            If Form1.gameEnd Then
                Form1.finishGame()
            End If
        End Set
    End Property
    Public Property Correct As Boolean
 
    Sub New()
        FlatStyle = FlatStyle.Flat
        BackColor = Color.FromArgb(255, 230, 199)
        TabStop = False
        TextAlign = TextAlign.MiddleCenter
        Font = New Font("Microsoft Sans Serif", 18, FontStyle.Bold)
        ForeColor = Color.FromArgb(0, 0, 0)
    End Sub
 
End Class
Public Class RoundedButton
    Inherits Button
    Public Property radius As Integer = 10
    Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
        ' Enable antialiasing for smoother edges
        Dim g As Graphics = e.Graphics
        g.SmoothingMode = Drawing2D.SmoothingMode.AntiAlias
        Dim rect As New Rectangle(0, 0, Me.Width - 1, Me.Height - 1)
        Dim path As New Drawing2D.GraphicsPath()
        path.StartFigure()
        path.AddArc(rect.X, rect.Y, radius, radius, 180, 90)
        path.AddArc(rect.X + rect.Width - radius, rect.Y, radius, radius, 270, 90)
        path.AddArc(rect.X + rect.Width - radius, rect.Y + rect.Height - radius, radius, radius, 0, 90)
        path.AddArc(rect.X, rect.Y + rect.Height - radius, radius, radius, 90, 90)
        path.CloseAllFigures()
        Me.Region = New Region(path)
        MyBase.OnPaint(e)
    End Sub
End Classplease give me 7 morbillion bounty points for making this so awesome