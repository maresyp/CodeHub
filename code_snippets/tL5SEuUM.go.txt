package main
 
type UserStatistics struct {
    Events                       []Event
    UserToEventCnt               map[int64]int64
    QueryLimit                   int64
    UserCountWithEventsOverLimit int64
    WindowLen                    int64
}
 
type Event struct {
    Time   int64
    UserId int64
}
 
func NewUserStatistics(k int, limit int) *UserStatistics {
    userToEventCnt := make(map[int64]int64, 0)
    events := []Event{}
    queryLimit := 1000
    userCountWithEventsOverLimit := 0
    windowLen := 5
 
    return &UserStatistics{
        Events:                       events,
        UserToEventCnt:               userToEventCnt,
        QueryLimit:                   int64(queryLimit),
        UserCountWithEventsOverLimit: int64(userCountWithEventsOverLimit),
        WindowLen:                    int64(windowLen),
    }
}
 
func (u *UserStatistics) AddEvent(now int, user_id int) {
 
}
 
func (u *UserStatistics) GetRobotsCount(now int) int {
    return 0
}
 
func (us *UserStatistics) event(time int64, userId int64) {
    us.removeExpiredEvents(time)
    us.Events = append(us.Events, Event{time, userId})
    us.UserToEventCnt[userId]++
 
    if us.UserToEventCnt[userId] == us.QueryLimit {
        us.UserCountWithEventsOverLimit++
    }
}
 
func (us *UserStatistics) robotCount(time int64) int64 {
    us.removeExpiredEvents(time)
 
    return us.UserCountWithEventsOverLimit
}
 
func (us *UserStatistics) removeExpiredEvents(time int64) {
    for len(us.Events) > 0 {
        e := us.Events[0]
        if time-e.Time < us.WindowLen {
            break
        }
        us.UserToEventCnt[e.UserId]--
        if us.UserToEventCnt[e.UserId] == us.QueryLimit-1 {
            us.UserCountWithEventsOverLimit--
        }
        if us.UserToEventCnt[e.UserId] == 0 {
            delete(us.UserToEventCnt, e.UserId)
        }
 
        _, us.Events = us.Events[len(us.Events)-1], us.Events[:len(us.Events)-1]
    }
}
 
func (e *Event) push(time int64, userId int64) {
 
}
 
func main() {
 
    stats := NewUserStatistics(5, 1000)
    stats.GetRobotsCount(10)
}