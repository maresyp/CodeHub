package ru.overwrite.flightlimit;
 
import java.io.File;
import java.util.logging.Logger;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.plugin.java.JavaPlugin;
 
public class Main extends JavaPlugin implements Listener {
    
    private final Logger logger = getLogger();
    
    public void onEnable() {
          saveDefaultConfig();
          logger.info("§aВключен!");
          logger.info("§aEnabled!");
          logger.info("");
          logger.info("§6Спасибо за использование моего плагина!");
          logger.info("§6Этот плагин запрещает летать выше");
          logger.info("§6установленого значения в конфиге!");
          logger.info("");
          logger.info("§6Thanks for using my plugin!");
          logger.info("§6 plugin disables flying higher");
          logger.info("§6set value in the config!");
          logger.info("");
          logger.info("§aEnabled!");
          logger.info("§aВключен!");
          getServer().getPluginManager().registerEvents(this, this);
       }
 
       public void onDisable() {
          logger.info("§cВыключен!");
          logger.info("§cDisabled!");
          logger.info("");
          logger.info("§6Спасибо за использование моего плагина!");
          logger.info("§6Этот плагин запрещает летать выше");
          logger.info("§6установленого значение в конфиге еще увидимся!");
          logger.info("");
          logger.info("§6Thanks for using my plugin!");
          logger.info("§6 plugin disables flying higher");
          logger.info("§6set value in the config, see you later!");
          logger.info("");
          logger.info("§cDisabled!");
          logger.info("§cВыключен!");
       }
  
  public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
    if (cmd.getName().equalsIgnoreCase("sflightlimitreload")) {
    FileConfiguration config = getConfig();
      String reloadPermission = config.getString("reload-permission");
      if (reloadPermission == null || reloadPermission.isEmpty())
        reloadPermission = "sflightlimit.reload"; 
      if (sender.hasPermission(reloadPermission)) {
        if (!getDataFolder().exists())
          getDataFolder().mkdirs(); 
        File configFile = new File(getDataFolder(), "config.yml");
        if (!configFile.exists())
          saveDefaultConfig(); 
        reloadConfig();
        sender.sendMessage(ChatColor.GREEN + config.getString("config-message-reloaded"));
      } else {
        sender.sendMessage(ChatColor.RED + config.getString("no-permission-message"));
      } 
      return true;
    } 
    return false;
  }
  
  @EventHandler
  public void onPlayerMove(PlayerMoveEvent event) {
    Player player = event.getPlayer();
    Location location = player.getLocation();
    World world = location.getWorld();
    if (world == null)
      return; 
    FileConfiguration config = getConfig();
    String worldName = world.getName();
    if (!config.isConfigurationSection("worlds." + worldName))
      return; 
    boolean limitEnabled = config.getBoolean("worlds." + worldName + ".limit-enabled", true);
    if (!limitEnabled)
      return; 
    boolean allowElytra = config.getBoolean("worlds." + worldName + ".disabled-elytra", true);
    boolean elytraPermission = player.hasPermission(config.getString("worlds." + worldName + ".elytra-fly-permission"));
    if (!player.isFlying() && (!allowElytra || (elytraPermission && player.isGliding() && player.getInventory().getChestplate().getType() == Material.ELYTRA)))
      return; 
    int maxFlyHeight = config.getInt("worlds." + worldName + ".max-fly-height", config.getInt("max-fly-height"));
    int minFlyHeight = config.getInt("worlds." + worldName + ".min-fly-height", config.getInt("min-fly-height"));
    String maxHeightPermission = config.getString("worlds." + worldName + ".max-height-permission");
    String minHeightPermission = config.getString("worlds." + worldName + ".min-height-permission");
    String maxHeightMessage = config.getString("worlds." + worldName + ".max-height-message", config.getString("max-height-message"));
    String minHeightMessage = config.getString("worlds." + worldName + ".min-height-message", config.getString("min-height-message"));
    String maxHeightAdminMessage = config.getString("worlds." + worldName + ".max-height-admin-message");
    String minHeightAdminMessage = config.getString("worlds." + worldName + ".min-height-admin-message");
    boolean disableMaxHeightAdminMessages = config.getBoolean("worlds." + worldName + ".disable-max-height-admin-message");
    boolean disableMinHeightAdminMessages = config.getBoolean("worlds." + worldName + ".disable-min-height-admin-message");
    boolean disableMaxHeightMessage = config.getBoolean("worlds." + worldName + ".disable-max-height-message");
    boolean disableMinHeightMessage = config.getBoolean("worlds." + worldName + ".disable-min-height-message");
    boolean resetFlying = config.getBoolean("worlds." + worldName + ".reset-flying", true);
    boolean resetGliding = config.getBoolean("worlds." + worldName + ".reset-gliding", true);
    if (location.getY() > maxFlyHeight && !player.hasPermission(maxHeightPermission)) {
      if (maxHeightMessage != null) {
        if (!disableMaxHeightMessage)
          player.sendMessage(ChatColor.RED + maxHeightMessage.replace("{max-height}", String.valueOf(maxFlyHeight))); 
        Location teleportLoc = location.clone();
        teleportLoc.setY(maxFlyHeight);
        player.teleport(teleportLoc);
        if (resetFlying) {
          boolean resetFly = config.getBoolean("worlds." + worldName + ".max-height-no-reset-flying", false);
          player.setFlying(resetFly);
        } 
        if (resetGliding) {
          boolean resetGlide = config.getBoolean("worlds." + worldName + ".max-height-no-reset-gliding", false);
          player.setGliding(resetGlide);
          String maxHeightAdminPermission = config.getString("worlds." + worldName + ".max-height-admin-permission");
          if (!disableMaxHeightAdminMessages && maxHeightAdminPermission != null && !maxHeightAdminPermission.isEmpty() && player.hasPermission(maxHeightAdminPermission) && 
            maxHeightAdminMessage != null && !maxHeightAdminMessage.isEmpty()) {
            String message = maxHeightAdminMessage
              .replace("{max-admin-height}", String.valueOf(maxFlyHeight))
              .replace("{player}", player.getName());
            player.sendMessage(ChatColor.RED + message);
          } 
        } 
      } 
    } else if (location.getY() < minFlyHeight && player.isFlying() && !player.isGliding() && !player.hasPermission(minHeightPermission)) {
      if (minHeightMessage != null) {
        if (!disableMinHeightMessage)
          player.sendMessage(ChatColor.RED + minHeightMessage.replace("{min-height}", String.valueOf(minFlyHeight))); 
        Location teleportLoc = location.clone();
        teleportLoc.setY(minFlyHeight);
        player.teleport(teleportLoc);
        if (resetFlying) {
          boolean resetFly = config.getBoolean("worlds." + worldName + ".min-height-no-reset-flying", false);
          player.setFlying(resetFly);
        } 
        if (resetGliding) {
          boolean resetGlide = config.getBoolean("worlds." + worldName + ".min-height-no-reset-gliding", false);
          player.setGliding(resetGlide);
          String minHeightAdminPermission = config.getString("worlds." + worldName + ".min-height-admin-permission");
          if (!disableMinHeightAdminMessages && minHeightAdminPermission != null && !minHeightAdminPermission.isEmpty() && player.hasPermission(minHeightAdminPermission) && 
            minHeightAdminMessage != null && !minHeightAdminMessage.isEmpty()) {
            String message = minHeightAdminMessage
              .replace("{min-admin-height}", String.valueOf(minFlyHeight))
              .replace("{player}", player.getName());
            player.sendMessage(ChatColor.RED + message);
          } 
        } 
      } 
    } else if (location.getY() < minFlyHeight && !player.isFlying() && player.isGliding() && !player.hasPermission(minHeightPermission) && 
      minHeightMessage != null) {
      if (!disableMinHeightMessage)
        player.sendMessage(ChatColor.RED + minHeightMessage.replace("{min-height}", String.valueOf(minFlyHeight))); 
      Location teleportLoc = location.clone();
      teleportLoc.setY(minFlyHeight);
      player.teleport(teleportLoc);
      if (resetFlying) {
        boolean resetFly = config.getBoolean("worlds." + worldName + ".min-height-no-reset-flying", false);
        player.setFlying(resetFly);
      } 
      if (resetGliding) {
        boolean resetGlide = config.getBoolean("worlds." + worldName + ".min-height-no-reset-gliding", false);
        player.setGliding(resetGlide);
        String minHeightAdminPermission = config.getString("worlds." + worldName + ".min-height-admin-permission");
        if (!disableMinHeightAdminMessages && minHeightAdminPermission != null && !minHeightAdminPermission.isEmpty() && player.hasPermission(minHeightAdminPermission) && 
          minHeightAdminMessage != null && !minHeightAdminMessage.isEmpty()) {
          String message = minHeightAdminMessage
            .replace("{min-admin-height}", String.valueOf(minFlyHeight))
            .replace("{player}", player.getName());
          player.sendMessage(ChatColor.RED + message);
        } 
      } 
    } 
  }
}