package main
 
import (
    "fmt"
    "math"
    "math/rand"
 
    //"math/rand"
    "sync"
    "time"
)
 
func main() {
    c := &NetworkClient{
        Name: "MC Client",
        TPS:  20,
    }
    s := &NetworkClient{
        Name:   "MC Server",
        Server: true,
        TPS:    20,
    }
 
    c.Latency = time.Millisecond * 100
 
    c.Connected = append(c.Connected, s)
    go c.Start()
    go s.Start()
 
    /* go func(){
        for {
            time.Sleep(time.Second * 3)
            c.stopLagTime = time.Now().Add(time.Millisecond * 1500)
            ms := rand.Intn(150 - 0) + 0
            fmt.Println("lag", ms)
            time.Sleep(time.Millisecond * time.Duration(ms))
        }
    }() */
 
    for {
        time.Sleep(time.Second)
    }
}
 
type NetworkUser struct {
    RecvPackets []uint64
    SendPackets []uint64
    Latency     time.Duration
 
    stopLagTime  time.Time
    rpkMu, spkMu sync.Mutex
    c            chan struct{}
}
 
func (n *NetworkUser) RecvPacket(pk uint64) {
    n.rpkMu.Lock()
    defer n.rpkMu.Unlock()
 
    n.RecvPackets = append(n.RecvPackets, pk)
}
 
func (n *NetworkUser) SendPacket(pk uint64) {
    n.spkMu.Lock()
    defer n.spkMu.Unlock()
 
    n.SendPackets = append(n.SendPackets, pk)
}
 
type NetworkClient struct {
    NetworkUser
    Name                       string
    Server                     bool
    Tick, CTick, LastValidTick uint64
    TPS                        float64
 
    tMu               sync.Mutex
    ticker            *time.Ticker
    buffQ             []uint64
    init, startAdjust bool
    Connected         []*NetworkClient
}
 
func (c *NetworkClient) UpdateTps() {
    c.ticker.Stop()
    c.ticker = time.NewTicker(time.Microsecond * time.Duration((1/c.TPS)*1000000))
}
 
func (c *NetworkClient) SetLatency(l time.Duration) {
    c.Latency = l
}
 
func (c *NetworkClient) HandlePacket(pk uint64) {
    if !c.Server {
        return
    }
 
    c.buffPacket(pk)
}
 
func (c *NetworkClient) buffPacket(pk uint64) {
    c.buffQ = append(c.buffQ, pk)
    if !c.init && len(c.buffQ) > 1 {
        c.init = true
    }
}
 
func (c *NetworkClient) Start() {
    c.ticker = time.NewTicker(time.Second / time.Duration(c.TPS))
    defer c.ticker.Stop()
 
    c.Tick = uint64(0)
    c.stopLagTime = time.Now()
    c.init = false
 
    go func() {
        for {
            if time.Now().Before(c.stopLagTime) {
                continue
            }
 
            c.spkMu.Lock()
            for c.Latency > 0 && len(c.SendPackets) >= int(c.Latency.Milliseconds()/50) {
                pk := c.SendPackets[0]
                for _, oc := range c.Connected {
                    oc.RecvPacket(pk)
                }
 
                c.SendPackets = c.SendPackets[1:]
            }
            c.spkMu.Unlock()
            time.Sleep(time.Millisecond * 50)
        }
    }()
 
    for {
        select {
        case <-c.ticker.C:
            if !c.Server {
                c.tMu.Lock()
            }
 
            c.rpkMu.Lock()
            if c.Server && len(c.RecvPackets) == 0 {
                fmt.Println("no packets for", c.Name, "to handle on tick", c.Tick)
            }
 
            for len(c.RecvPackets) > 0 {
                c.HandlePacket(c.RecvPackets[0])
                c.RecvPackets = c.RecvPackets[1:]
            }
            c.rpkMu.Unlock()
 
            if !c.Server {
                c.Latency = time.Millisecond * time.Duration(rand.Intn(105-95)+95)
                c.SendPacket(c.Tick)
 
                if c.Tick == 100 {
                    c.TPS = 17
                    c.UpdateTps()
                }
 
                if c.Tick == 300 {
                    c.TPS = 20
                    c.UpdateTps()
                }
                c.tMu.Unlock()
            } else {
                c.handleTickedInput()
            }
 
            c.Tick++
        case <-c.c:
            return
        }
    }
}
 
func (c *NetworkClient) handleTickedInput() {
    tps := c.TPS
    fmt.Println("START HANDLE TICK", c.Tick)
    if !c.init {
        fmt.Println("buffer needs to be initalized before processing starts")
        return
    }
 
    var pk uint64
    ignored, maxI, handled := 0, uint64(0), false
 
    for len(c.buffQ) > 0 {
        i := c.buffQ[0]
        c.buffQ = c.buffQ[1:]
 
        if i <= c.CTick && c.CTick != 0 {
            ignored++
            if i > maxI {
                maxI = i
            }
            continue
        }
 
        if i > c.Tick {
            fmt.Println("INVALID TICK RECEIVED")
            i = c.Tick
        }
 
        pk = i
        handled = true
        break
    }
 
    if !handled {
        pk = c.CTick + 1
        fmt.Println("input for", pk, "filled")
    } else {
        c.startAdjust = false
        c.LastValidTick = pk
    }
 
    if len(c.buffQ) > 2 {
        c.TPS = math.Min(c.TPS+0.5, 20.5)
    }
 
    if ignored > 0 {
        fmt.Println("ignored", ignored, "inputs")
        if !handled {
            c.CTick = maxI
            pk = maxI
            c.startAdjust = true
        }
    }
 
    if c.startAdjust {
        c.TPS = math.Max(c.TPS-0.5, 0.99)
        if c.TPS < 1 {
            fmt.Println("KICK: Client simulating inputs too slow")
        }
    }
 
    fmt.Println("handled", pk)
    fmt.Println("buff length is", len(c.buffQ), c.buffQ)
    c.CTick = pk
 
    if c.TPS != tps {
        c.UpdateTps()
    }
 
    fmt.Println("TPS", c.TPS)
    fmt.Println("END HANDLE TICK", c.Tick)
    fmt.Println("")
}