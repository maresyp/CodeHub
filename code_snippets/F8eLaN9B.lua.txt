local EV
local TV
 
getgenv().Rebirth = false;
getgenv().Clicker = false;
getgenv().Hatch = false;
 
function BIRTH()
    spawn(function ()
while getgenv().Rebirth do
game:GetService("ReplicatedStorage").Remotes.Rebirth:FireServer() wait()
        end
    end)
end
function Floppy()
    spawn(function ()
        while getgenv().Clicker == true do
game:GetService("ReplicatedStorage").Remotes.Click:FireServer() wait()
        end
    end)
end
function Egg()
    spawn(function ()
        while getgenv().Hatch == true do
if EV == "Basic" then local args = {[1] = "BasicEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Sand" then local args = {[1] = "SandEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Diamond" then local args = {[1] = "DiamondEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Overgrown" then local args = {[1] = "OvergrownEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Magma" then local args = {[1] = "MagmaEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Frost" then local args = {[1] = "FrostEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
if EV == "Nuclear" then local args = {[1] = "NuclearEgg",[2] = 1,[3] = {}}game:GetService("ReplicatedStorage").Remotes.Hatcher.HatchPet:InvokeServer(unpack(args)) wait() end
        end
    end)
end
function Trail()
    spawn(function ()
        while getgenv().Hatch == true do
if TV == "Basic" then local args = {[1] = "BasicChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Sand" then local args = {[1] = "SandChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Diamond" then local args = {[1] = "DiamondChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Overgrown" then local args = {[1] = "OvergrownChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Magma" then local args = {[1] = "MagmaChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Frost" then local args = {[1] = "FrostChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
if TV == "Nuclear" then local args = {[1] = "NuclearChest",[2] = 1,[3] = {}} game:GetService("ReplicatedStorage").Remotes.Chest.OpenTrail:InvokeServer(unpack(args)) wait() end
        end
    end)
end
 
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
 
local w = library:CreateWindow("🏆 Flappy Clicker")
 
local b = w:CreateFolder("Main")
 
b:Toggle("Auto Click",function(val)
getgenv().Clicker = val
Floppy()
end)
 
b:Toggle("Auto Rebirth",function(val)
getgenv().Rebirth = val
BIRTH()
end)
 
b:Toggle("Auto Egg",function(val)
getgenv().Hatch = val
Egg()
end)
 
b:Toggle("Auto Trail",function(val)
getgenv().Hatch = val
Egg()
end)
 
b:Dropdown("Select Egg",{"Basic","Sand","Diamond","Overgrown","Magma","Frost","Nuclear"},true,function(val)
EV = val
end)
 
b:Dropdown("Select Chest",{"Basic","Sand","Diamond","Overgrown","Magma","Frost","Nuclear"},true,function(val)
TV = val
end)
 
local b = w:CreateFolder("Miscellaneous")
 
b:Button("Redeem Codes",function()
local args = {[1] = "Release"} game:GetService("ReplicatedStorage").Modules.Shared.TwitterCodeModule.EnterCode:InvokeServer(unpack(args)) wait()
local args = {[1] = "CREPTIEZ"} game:GetService("ReplicatedStorage").Modules.Shared.TwitterCodeModule.EnterCode:InvokeServer(unpack(args)) wait()
end)
b:Button("Get Invite Reward",function()
local args = {[1] = "I",[2] = 5} game:GetService("ReplicatedStorage").Remotes.Verify:FireServer(unpack(args))
end)
 
local b = w:CreateFolder("Credits")
 
b:Label("Made by X_LuaF#0705",{
    TextSize = 21;
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})
 
b:Button("Copy Discord Invite",function() setclipboard("discord.gg/8tRb8MQcW5") end)
 
b:DestroyGui()
 
local b = w:CreateFolder("LocalPlayer")
 
b:Button("Full Version",function() loadstring(game:HttpGet("https://pastebin.com/raw/GphZf9Xe", true))() end)
b:Button("Rejoin",function() loadstring(game:HttpGet("https://pastebin.com/raw/mM7JBG5h", true))() end)
b:Button("Reset",function() loadstring(game:HttpGet("https://pastebin.com/raw/EEY6SATj", true))() end)
 
local S
local J
local H
local G
 
b:Box("Speed","number",function(val)
S = val
end)
b:Box("Jump","number",function(val)
J = val
end)
b:Box("Hip Height","number",function(val)
H = val
end)
b:Box("Gravity","number",function(val)
G = val
end)
 
b:Toggle("Speed",function(bool)
getgenv().Speed = bool
Speed(S)
end)
b:Toggle("Jump",function(bool)
getgenv().Jump = bool
Jump(J)
end)
b:Toggle("Hip Height",function(bool)
getgenv().Hip = bool
Hip(H)
end)
b:Toggle("Gravity",function(bool)
getgenv().Grav = bool
Grav(G)
end)
 
b:Slider("FOV (Default is 70)",{min = 0;max = 120;precise = true;},function(val)
    game.workspace.CurrentCamera.FieldOfView = val
end)
 
function TPTo(PCFrame)
    local plr = game.Players.LocalPlayer;
           if plr.Character then
            plr.Character.HumanoidRootPart.CFrame = PCFrame
        end
    end
 
getgenv().Speed = false;
getgenv().Jump = false;
getgenv().Hip = false;
getgenv().Chat = false;
getgenv().Grav = false;
 
function Chat(Mes, Freq)
    spawn(function ()
        while getgenv().Chat == true do
local args = {[1] = Mes,[2] = "All"} game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(Freq)
        end
    end)
end
 
function Speed(Nume)
    spawn(function ()
        if getgenv().Speed == true then
            while getgenv().Speed == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Nume
                wait()
            end
        elseif getgenv().Speed == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
end
function Jump(Nume)
    spawn(function ()
        if getgenv().Jump == true then
            while getgenv().Jump == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Nume
                wait()
        end
    elseif getgenv().Jump == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end)
end
function Hip(Nume)
    spawn(function ()
        if getgenv().Hip == true then
            while getgenv().Hip == true do
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = Nume
            wait()
        end
    elseif getgenv().Hip == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = 0.1
        end
    end)
end
function Grav(Nume)
    spawn(function ()
        if getgenv().Grav == true then
            while getgenv().Grav == true do
                game:GetService("Workspace").Gravity = Nume
            wait()
        end
    elseif getgenv().Grav == false then
        game:GetService("Workspace").Gravity = 196.2
        end
    end)
end