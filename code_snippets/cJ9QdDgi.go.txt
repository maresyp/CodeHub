package main
 
import (
    "fmt"
    "math"
    "sort"
)
 
type Shape interface {
    Area() float64
}
 
func SummAreas(shapes ...Shape) float64 {
    res := 0.0
    for _, shape := range shapes {
        res += shape.Area()
    }
    return res
}
 
type Square struct {
    edge float64
}
 
func (s Square) Area() float64 {
    return s.edge * s.edge
}
 
type Circle struct {
    radius float64
}
 
func (c Circle) Area() float64 {
    return math.Pi * c.radius
}
 
type man struct {
    name  string
    phone int
}
 
type men []man
 
func main() {
    firstCircle := Circle{10}
    secondCircle := Circle{15}
    firstSquare := Square{10}
    total := SummAreas(firstCircle, firstSquare, secondCircle)
    fmt.Println(total)
 
    adressBook := make(men, 0)
    adressBook = append(adressBook, man{"Misha", 79112937617})
    adressBook = append(adressBook, man{"Yura", 89123123121})
    fmt.Println(adressBook)
 
    adressBook.sort()
    fmt.Println(adressBook)
}
 
type Sort interface {
    sort()
}
 
func (people men) sort() {
    sort.Slice(people, func(i, j int) bool {
        return people[i].name < people[j].name
    })
}