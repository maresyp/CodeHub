import { Application, Router } from "https://deno.land/x/oak/mod.ts";
import { existsSync, readJsonSync, writeJsonSync } from "https://deno.land/std/fs/mod.ts";
import { hashSync, compareSync } from "https://deno.land/x/bcrypt/mod.ts";
 
const router = new Router();
 
interface User {
  id: string;
  username: string;
  email: string;
  password: string;
}
 
let users: User[] = [];
 
const loadData = () => {
  if (existsSync("database.json")) {
    const data = readJsonSync("database.json");
    if (data.users) {
      users = data.users;
    }
  } else {
    writeJsonSync("database.json", { users: [] });
  }
}
 
const saveData = () => {
  writeJsonSync("database.json", { users });
}
 
router.get("/", (ctx) => {
  ctx.response.redirect("/login");
});
 
router.get("/login", (ctx) => {
  ctx.response.body = `
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login Page</title>
        <link rel="stylesheet" href="/style.css">
      </head>
      <body>
        <form action="/login" method="post">
          <h2>Login</h2>
          <div>
            <label for="username">Username</label>
            <input type="text" id="username" name="username" required>
          </div>
          <div>
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <button type="submit">Login</button>
          <p>Don't have an account? <a href="/register">Register here</a>.</p>
        </form>
      </body>
    </html>
  `;
});
 
router.post("/login", async (ctx) => {
  const body = await ctx.request.body();
  const { username, password } = body.value;
 
  const user = users.find((u) => u.username === username);
  if (!user) {
    ctx.response.body = "Invalid username or password.";
    return;
  }
 
  if (!compareSync(password, user.password)) {
    ctx.response.body = "Invalid username or password.";
    return;
  }
 
  ctx.response.redirect("/dashboard");
});
 
router.get("/register", (ctx) => {
  ctx.response.body = `
    <!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-md-6">
          <h1>Register</h1>
          <form method="POST" action="/register">
            <div class="mb-3">
              <label for="username" class="form-label">Username</label>
              <input type="text" class="form-control" id="username" name="username" required>
            </div>
            <div class="mb-3">
              <label for="password" class="form-label">Password</label>
              <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
          </form>
          <p>Already have an account? <a href="/login">Login here</a></p>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
  </body>
</html>
           
  `;
});
 
// Handle Register User
router.post("/register", async (ctx) => {
  const body = await ctx.request.body();
  const { username, email, password } = body.value;
 
  // Check if user already exists
  const userExists = users.find((user) => user.username === username);
  if (userExists) {
    ctx.response.status = 409;
    ctx.response.body = { message: "Username already taken" };
    return;
  }
 
  // Create user
  const newUser = { username, email, password };
  users.push(newUser);
  await writeUsersToFile(users);
 
  ctx.response.status = 201;
  ctx.response.body = { message: "User registered successfully" };
});