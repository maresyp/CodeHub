HelloWorld.java
 
 
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
 
 
Array.java: Demonstrating a one-dimensional array.
 
 
public class Array {
public static void main(String[] args) {
    int[] arr = {1, 2, 3, 4, 5};
    for (int i = 0; i < arr.length; i++) {
        System.out.println("Element at index " + i + ": " + arr[i]);
    }
    }
}
 
 
Average.java: Using a one-dimensional array to find the average of a set of numbers.
 
 
public class Average {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        double avg = sum / arr.length;
        System.out.println("Average: " + avg);
    }
}
 
 
TwoDArray.java numbers each element in the array from left to right, top to bottom, and then displays these values.
 
 
public class TwoDArray {
    public static void main(String[] args) {
        int[][] arr = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.println("Element at row " + i + ", column " + j + ": " + arr[i][j]);
            }
        }
    }
}
 
 
BoxDemo.java: Demonstrating use of the Box class.
 
 
class Box {
    double width;
    double height;
    double depth;
 
    Box(double w, double h, double d) {
        width = w;
        height = h;
        depth = d;
    }
 
    double getVolume() {
        return width * height * depth;
    }
}
 
public class BoxDemo {
    public static void main(String[] args) {
        Box myBox = new Box(10, 20, 30);
        double volume = myBox.getVolume();
        System.out.println("Volume of box: " + volume);
    }
}
 
 
Foreach.java: Demonstarting use of foreach loops.
 
 
public class Foreach {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        for (int num : arr) {
            System.out.println(num);
        }
    }
}
 
 
OverloadDemo.java Illustrate method overloading.
 
 
public class OverloadDemo {
    public static void main(String[] args) {
        System.out.println(add(1, 2));
        System.out.println(add(1.0, 2.0));
        System.out.println(add("Hello", "World"));
    }
 
    static int add(int a, int b) {
        return a + b;
    }
 
    static double add(double a, double b) {
        return a + b;
    }
 
    static String add(String a, String b) {
        return a + " " + b;
    }
}
 
 
OverloadCons.java that contains an improved version of Box that uses constructor overloading.
 
 
class Box {
    double width;
    double height;
    double depth;
 
    Box(double w, double h, double d) {
        width = w;
        height = h;
        depth = d;
    }
 
    Box() {
        width = 1;
        height = 1;
        depth = 1;
    }
 
    double getVolume() {
        return width * height * depth;
    }
}
 
public class OverloadCons {
    public static void main(String[] args) {
        Box myBox1 = new Box(10, 20, 30);
        Box myBox2 = new Box();
        double volume1 = myBox1.getVolume();
        double volume2 = myBox2.getVolume();
        System.out.println("Volume of box 1: " + volume1);
        System.out.println("Volume of box 2: " + volume2);
    }
}
 
 
AccessTest.java: Demonstrate the effects of public and private access.
 
 
public class AccessTest {
    public static void main(String[] args) {
        Box myBox = new Box();
        System.out.println(myBox.width);
        myBox.width = 10;
        System.out.println(myBox.width);
    }
}
 
 
UseStatic.java demonstrate use of static methods, variables and static block
 
 
public class UseStatic {
    static int x = 10;
 
    static {
        System.out.println("Static block executed.");
    }
 
    static void printX() {
        System.out.println("Value of x: " + x);
    }
 
    public static void main(String[] args) {
        printX();
    }
}
 
 
StaticDemo.java shows how static variables are accessed.
 
 
public class StaticDemo {
    static int numInstances = 0;
 
    StaticDemo() {
        numInstances++;
    }
 
    static int getNumInstances() {
        return numInstances;
    }
 
    public static void main(String[] args) {
        StaticDemo obj1 = new StaticDemo();
        StaticDemo obj2 = new StaticDemo();
        StaticDemo obj3 = new StaticDemo();
        System.out.println("Number of instances: " + StaticDemo.getNumInstances());
    }
}
 
 
IntStack.java demonstrate use of interfaces in java.
 
 
public class IntStack implements IntStackInterface {
    private int[] stack;
    private int top;
 
    IntStack(int size) {
        stack = new int[size];
        top = -1;
    }
 
    public void push(int item) {
        if (top == stack.length - 1) {
            System.out.println("Stack is full.");
        } else {
            stack[++top] = item;
        }
    }
 
    public int pop() {
        if (top < 0) {
            System.out.println("Stack is empty.");
            return 0;
        } else {
            return stack[top--];
        }
    }
}
 
interface IntStackInterface {
    void push(int item);
    int pop();
}
 
 
Access Modifier.java
 
 
 
 
 
CalculateAreas.java demonstrate method overloading
 
 
public class CalculateAreas {
    public static void main(String[] args) {
        System.out.println("Area of rectangle: " + calculateArea(10, 20));
        System.out.println("Area of circle: " + calculateArea(5));
    }
 
    static int calculateArea(int length, int width) {
        return length * width;
    }
 
    static double calculateArea(int radius) {
        return Math.PI * radius * radius;
    }
}
 
 
AbstractDemo.java A simple example of a class with an abstract method, followed by a class which implements that method
 
 
abstract class Shape {
    abstract void draw();
}
 
class Circle extends Shape {
    void draw() {
        System.out.println("Drawing circle.");
    }
}
 
public class AbstractDemo {
    public static void main(String[] args) {
        Circle c = new Circle();
        c.draw();
    }
}
 
 
AccountBalance.java defining a package
 
 
package mypack;
 
public class AccountBalance {
    public static void main(String[] args) {
        System.out.println("Account balance: $1000");
    }
}
 
 
HandleError.java, NestTry, MethNestTry.java
 
 
public class HandleError {
    public static void main(String[] args) {
        try {
            int[] arr = {1, 2, 3};
            System.out.println(arr[3]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Array index out of bounds.");
        }
    }
}
 
public class NestTry {
    public static void main(String[] args) {
        try {
            int a = args.length;
            int b = 42 / a;
            System.out.println("a = " + a);
            try {
                if (a == 1) a = a / (a - a);
                if (a == 2) {
                    int[] c = {1};
                    c[42] = 99;
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("Array index out of bounds.");
            }
        } catch (ArithmeticException e) {
            System.out.println("Division by zero.");
        }
    }
}
 
public class MethNestTry {
    static void nesttry(int a) {
        try {
            if (a == 1) a = a / (a - a);
            if (a == 2) {
                int[] c = {1};
                c[42] = 99;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Array index out of bounds.");
        }
    }
 
    public static void main(String[] args) {
        try {
            int a = args.length;
            int b = 42 / a;
            System.out.println("a = " + a);
            nesttry(a);
        } catch (ArithmeticException e) {
            System.out.println("Division by zero.");
        }
    }
}
 
 
ThrowDemo.java, FinallyDemo.java, CustomException.java
 
 
public class ThrowDemo {
    static void divide(int a, int b) {
        if (b == 0) {
            throw new ArithmeticException("Cannot divide by zero");
        }
        System.out.println("Result: " + (a / b));
    }
 
    public static void main(String[] args) {
        try {
            divide(10, 2);
            divide(10, 0);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
 
public class FinallyDemo {
    public static void main(String[] args) {
        try {
            int a = 10 / 0;
            System.out.println("Result: " + a);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            System.out.println("This will always execute.");
        }
    }
}
 
class MyException extends Exception {
    private int detail;
 
    MyException(int a) {
        detail = a;
    }
 
    public String toString() {
        return "MyException[" + detail + "]";
    }
}
 
public class CustomException {
    static void validate(int age) throws MyException {
        if (age < 18) {
            throw new MyException(age);
        } else {
            System.out.println("Welcome to vote.");
        }
    }
 
    public static void main(String[] args) {
        try {
            validate(14);
        } catch (MyException e) {
            System.out.println("Error: " + e);
        }
    }
}