#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
 
using namespace std;
 
//#define int int64_t
 
const int inf = 2e18;
//const int mod = 1e9 + 7;
const int mod = (1 << 30) + 1;
 
void ifmod(unsigned int& a) {
    if (a >= mod) {
        a -= mod;
    }
}
 
int32_t main() {
    freopen("m3.in", "r", stdin);
    freopen("m3.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int n, m;
    cin >> n >> m;
    if (n < m) {
        swap(n, m);
    }
    if (m == 1) {
        unsigned int ans = 1;
        for (int i = 0; i < n; i++) {
            ans *= 2;
            ans %= mod;
        }
        cout << ans;
        return 0;
    }
    vector<vector<unsigned int>> dp(m, vector<unsigned int>(1 << (m + 1)));
    dp[0][0] = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m - 1; j++) {
            int check_mask = 0;
            if (j > 0) {
                check_mask = (1 << (j - 1)) + (1 << j) + (1 << (j + 1));
            }
            for (int mask = 0; mask < (1 << (m + 1)); mask++) {
                for (int b = 0; b < 2; b++) {
                    if (i == 0 || j == 0 || (mask & check_mask) != check_mask * b) {
                        int new_mask = mask;
                        new_mask &= ~(1 << j);
                        new_mask += (1 << j) * b;
                        ifmod(dp[j + 1][new_mask] += dp[j][mask]);
                    }
                }
                dp[j][mask] = 0;
            }
        }
        int j = m - 1;
        int check_mask = 0;
        if (j > 0) {
            check_mask = (1 << (j - 1)) + (1 << j) + (1 << (j + 1));
        }
        for (int mask = 0; mask < (1 << (m + 1)); ++mask) {
            for (int b = 0; b < 2; b++) {
                if (i == 0 || j == 0 || (mask & check_mask) != check_mask * b) {
                    int new_mask = mask;
                    new_mask &= ~(1 << j);
                    new_mask += (1 << j) * b;
                    new_mask <<= 1;
                    new_mask &= (1 << (m + 1)) - 1;
                    ifmod(dp[0][new_mask] += dp[j][mask]);
                }
            }
            dp[j][mask] = 0;
        }
    }
    unsigned int ans = 0;
    for (int mask = 0; mask < (1 << (m + 1)); mask++) {
        ifmod(ans += dp[0][mask]);
    }
    cout << ans;
}