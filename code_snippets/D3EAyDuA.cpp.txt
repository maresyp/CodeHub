#include <algorithm> 
#include <cmath> 
#include <iostream> 
#include <map> 
#include <set> 
#include <string> 
#include <utility> 
#include <vector> 
 
using namespace std;
 
const int MAX_RESULT_DOCUMENT_COUNT = 5;
 
string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}
 
int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}
 
vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }
 
    return words;
}
 
 
 
class SearchServer {
public:
    struct Document {
        int id;
        double relevance;
    };
    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {
            stop_words_.insert(word);
        }
    }
 
    void AddDocument(int document_id, const string& document) {
        ++document_count_;
        const vector<string> words = SplitIntoWordsNoStop(document);
        const double tf_count = 1.0 / words.size();
        for (const string& word : words) {
            documents_[word][document_id] += tf_count;
        }
    }
 
    vector<Document> FindTopDocuments(const string& raw_query) const {
        const Query query = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query);
 
        sort(matched_documents.begin(), matched_documents.end(),
            [](const Document& lhs, const Document& rhs) {
                return lhs.relevance > rhs.relevance;
            });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }
 
private:
 
    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };
 
    set<string> stop_words_;
 
    map<string, map<int, double>> documents_;
 
    int document_count_ = 0;
 
    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }
 
    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word) || !IsStopWord(word.substr(1))) { // Теперь по идее слово с минусом должно проходить проверку на стоп слово //
                words.push_back(word);
            }
        }
        return words;
    }
 
    Query ParseQuery(const string& text) const {
        Query query_words;
        for (const string& word : SplitIntoWordsNoStop(text)) {
            if ((word[0] == '-') && (!IsStopWord(word.substr(1)))) { // Теперь по идее слово с минусом должно проходить проверку на стоп слово //
                query_words.minus_words.insert(word.substr(1));
            }
            else {
                query_words.plus_words.insert(word);
            }
        }
        return query_words;
    }
 
    double revelance_sum(const string& word) const {
        return log(document_count_ * 1.0 / documents_.at(word).size());
    }
 
    vector<Document> FindAllDocuments(const Query& query) const {
        map<int, double> document_to_relevance;
        vector<Document> answer_document;
        for (const string& word : query.plus_words) {
            if (documents_.count(word) == 0) {
                continue;
            }
            const double complete_count = revelance_sum(word);
            for (const auto [document_id, count_relevance] : documents_.at(word)) {
                document_to_relevance[document_id] += count_relevance * complete_count;
            }
        }
 
        for (const string& word : query.minus_words) {
            if (documents_.count(word) == 0) {
                continue;
            }
            for (const auto [document_id, _] : documents_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }
        for (const auto& [key, value] : document_to_relevance) {
            answer_document.push_back({ key, value });
        }
        return answer_document; // Когда пытался компилировать через VS, он выдал ошибку, что FindAllDocuments должно возвращать перменную //
    }
    };
 
    SearchServer CreateSearchServer() {
        SearchServer search_server;
        search_server.SetStopWords(ReadLine());
 
        const int document_count = ReadLineWithNumber();
        for (int document_id = 0; document_id < document_count; ++document_id) {
            search_server.AddDocument(document_id, ReadLine());
        }
 
        return search_server;
    }
 
    int main() {
        const SearchServer search_server = CreateSearchServer();
 
        const string query = ReadLine();
        for (const auto& [document_id, relevance] : search_server.FindTopDocuments(query)) {
            cout << "{ document_id = "s << document_id << ", "
                << "relevance = "s << relevance << " }"s << endl;
        }
    }