root /opt/logicmoo_workspace/bin/cls /dev/tty
% /opt/logicmoo_workspace/lib/swipl/library/prolog_xref loaded into prolog_xref 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/pldoc/doc_html loaded into pldoc_html 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_colour loaded into prolog_colour 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/packs_sys/logicmoo_agi/prolog/kaggle_arc/arc-dsl/dsl_solvers compiled 0.01 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_xref loaded into prolog_xref 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/pldoc/doc_html loaded into pldoc_html 0.00 sec, 0 clauses
% /opt/logicmoo_workspace/lib/swipl/library/prolog_colour loaded into prolog_colour 0.00 sec, 0 clauses
solve('67a3c6ac', IN, OUT) :-
    [f(vmirror, IN:'Piece', OUT:out('Piece'))].
solve('68b16354', IN, OUT) :-
    [f(hmirror, IN:'Piece', OUT:out('Piece'))].
solve('74dd1130', IN, OUT) :-
    [f(dmirror, IN:'Piece', OUT:out('Piece'))].
solve('3c9b0459', IN, OUT) :-
    [f(rot180, IN:'Grid', OUT:out('Grid'))].
solve('6150a2bd', IN, OUT) :-
    [f(rot180, IN:'Grid', OUT:out('Grid'))].
solve('9172f3a0', IN, OUT) :-
    [f(upscale, IN:'Element', 'THREE':factor:'Integer', OUT:out('Element'))].
solve('9dfd6313', IN, OUT) :-
    [f(dmirror, IN:'Piece', OUT:out('Piece'))].
solve(a416b8f3, IN, OUT) :-
    [f(hconcat, IN:a:'Grid', IN:b:'Grid', OUT:out('Grid'))].
solve(b1948b0a, IN, OUT) :-
    [ f(replace,
        IN:'Grid',
        'SIX':replacee:'Integer',
        'TWO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(c59eb873, IN, OUT) :-
    [f(upscale, IN:'Element', 'TWO':factor:'Integer', OUT:out('Element'))].
solve(c8f0f002, IN, OUT) :-
    [ f(replace,
        IN:'Grid',
        'SEVEN':replacee:'Integer',
        'FIVE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(d10ecb37, IN, OUT) :-
    [ f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (2, 2):dims:'Point',
        OUT:out('Grid'))
    ].
solve(d511f180, IN, OUT) :-
    [ f(switch,
        IN:'Grid',
        'FIVE':a:'Integer',
        'EIGHT':b:'Integer',
        OUT:out('Grid'))
    ].
solve(ed36ccf7, IN, OUT) :-
    [f(rot270, IN:'Grid', OUT:out('Grid'))].
solve('4c4377d9', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:out('Piece')),
      f(vconcat, X1:a:'Grid', IN:b:'Grid', OUT:out('Grid'))
    ].
solve('6d0aefbc', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', OUT:out('Grid'))
    ].
solve('6fa7a44f', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:out('Piece')),
      f(vconcat, IN:a:'Grid', X1:b:'Grid', OUT:out('Grid'))
    ].
solve('5614dbcf', IN, OUT) :-
    [ f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X1:out('Grid')),
      f(downscale, X1:'Grid', 'THREE':factor:'Integer', OUT:out('Grid'))
    ].
solve('5bd6f4ac', IN, OUT) :-
    [ f(tojvec, 'SIX':j:'Integer', X1:out('Point')),
      f(crop,
        IN:'Grid',
        X1:start:'Point',
        (3, 3):dims:'Point',
        OUT:out('Grid'))
    ].
solve('5582e5ca', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(canvas,
        X1:value:'Integer',
        (3, 3):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('8be77c9e', IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:out('Piece')),
      f(vconcat, IN:a:'Grid', X1:b:'Grid', OUT:out('Grid'))
    ].
solve(c9e6f938, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', OUT:out('Grid'))
    ].
solve('2dee498d', IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':n:'Integer', X1:out('Tuple')),
      f(first, X1:'Container', OUT:out('Any'))
    ].
solve('1cf80156', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve(32597951, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(delta, X1:'Patch', X2:out('Indices')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X2:'Patch',
        OUT:out('Grid'))
    ].
solve('25ff71a9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(move,
        IN:'Grid',
        X2:obj:'Object',
        (1, 0):offset:'Point',
        OUT:out('Grid'))
    ].
solve('0b148d64', IN, OUT) :-
    [ f(partition, IN:'Grid', X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('1f85a75f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('23b5c85d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('9ecd008a', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X2:out('Indices')),
      f(subgrid, X2:'Patch', X1:'Grid', OUT:out('Grid'))
    ].
solve(ac0a08a4, IN, OUT) :-
    [ f(colorcount, IN:'Element', 'ZERO':value:'Integer', X1:out('Integer')),
      f(subtract,
        'NINE':a:'Numerical',
        X1:b:'Numerical',
        X2:out('Numerical')),
      f(upscale,
        IN:'Element',
        X2:factor:'Integer',
        OUT:out('Element'))
    ].
solve(be94b721, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve(c909285e, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(subgrid, X2:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve(f25ffba3, IN, OUT) :-
    [ f(bottomhalf, IN:'Grid', X1:out('Grid')),
      f(hmirror, X1:'Piece', X2:out('Piece')),
      f(vconcat, X2:a:'Grid', X1:b:'Grid', OUT:out('Grid'))
    ].
solve(c1d99e64, IN, OUT) :-
    [ f(frontiers, IN:'Grid', X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X2:'Patch',
        OUT:out('Grid'))
    ].
solve(b91ae062, IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:out('IntegerSet')),
      f(decrement, X1:x:'Numerical', X2:out('Numerical')),
      f(upscale,
        IN:'Element',
        X2:factor:'Integer',
        OUT:out('Element'))
    ].
solve('3aa6fb7a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(mapply,
        corners,
        X1:container:'ContainerContainer',
        X2:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'ONE':value:'Integer',
        X2:'Patch',
        OUT:out('Grid'))
    ].
solve('7b7f7511', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch,
        condition=X1,
        tophalf:a:'Any',
        lefthalf:b:'Any',
        X2:out('Any')),
      f(X2, IN, OUT)
    ].
solve('4258a5f9', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(mapply,
        neighbors,
        X1:container:'ContainerContainer',
        X2:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X2:'Patch',
        OUT:out('Grid'))
    ].
solve('2dc579da', IN, OUT) :-
    [ f(vsplit, IN:'Grid', 'TWO':n:'Integer', X1:out('Tuple')),
      f(rbind, hsplit, 'TWO':fixed:'Any', X2:out('Callable')),
      f(mapply,
        X2,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(argmax,
        X3:'Container',
        numcolors:compfunc:'Callable',
        OUT:out('Any'))
    ].
solve('28bf18c6', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(hconcat, X3:a:'Grid', X3:b:'Grid', OUT:out('Grid'))
    ].
solve('3af2c5a8', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', X2:out('Grid')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(vconcat, X2:a:'Grid', X3:b:'Grid', OUT:out('Grid'))
    ].
solve('44f52bb0', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(equality, X1:a:'Any', IN:b:'Any', returns=X2),
      f(branch, condition=X2, 'ONE':a:'Any', 'SEVEN':b:'Any', X3:out('Any')),
      f(canvas,
        X3:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('62c24649', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', X2:out('Grid')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(vconcat, X2:a:'Grid', X3:b:'Grid', OUT:out('Grid'))
    ].
solve('67e8384a', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', X2:out('Grid')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(vconcat, X2:a:'Grid', X3:b:'Grid', OUT:out('Grid'))
    ].
solve('7468f01a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(vmirror, X3:'Piece', OUT:out('Piece'))
    ].
solve('662c240a', IN, OUT) :-
    [ f(vsplit, IN:'Grid', 'THREE':n:'Integer', X1:out('Tuple')),
      f(fork,
        equality:outer:'Callable',
        dmirror:a:'Callable',
        identity:b:'Callable',
        X2:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(extract,
        X1:'Container',
        X3:condition:'Callable',
        OUT:out('Any'))
    ].
solve('42a50994', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(merge, X2:containers:'ContainerContainer', X3:out('Container')),
      f(cover, IN:'Grid', X3:'Patch', OUT:out('Grid'))
    ].
solve('56ff96f3', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        backdrop:b:'Callable',
        X2:out('Callable')),
      f(mapply,
        X2,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(paint, IN:'Grid', X3:obj:'Object', OUT:out('Grid'))
    ].
solve('50cb2852', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(compose,
        backdrop:outer:'Callable',
        inbox:inner:'Callable',
        X2:out('Callable')),
      f(mapply,
        X2,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve('4347f46a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        difference:outer:'Callable',
        toindices:a:'Callable',
        box:b:'Callable',
        X2:out('Callable')),
      f(mapply,
        X2,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve('46f33fce', IN, OUT) :-
    [ f(rot180, IN:'Grid', X1:out('Grid')),
      f(downscale, X1:'Grid', 'TWO':factor:'Integer', X2:out('Grid')),
      f(rot180, X2:'Grid', X3:out('Grid')),
      f(upscale, X3:'Element', 'FOUR':factor:'Integer', OUT:out('Element'))
    ].
solve(a740d043, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(replace,
        X3:'Grid',
        'ONE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(a79310a0, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(move,
        IN:'Grid',
        X2:obj:'Object',
        (1, 0):offset:'Point',
        X3:out('Grid')),
      f(replace,
        X3:'Grid',
        'EIGHT':replacee:'Integer',
        'TWO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(aabf363d, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(replace,
        IN:'Grid',
        X1:replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(leastcolor, X2:'Element', X3:out('Integer')),
      f(replace,
        X2:'Grid',
        X3:replacee:'Integer',
        X1:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(ae4f1146, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, colorcount, 'ONE':fixed:'Any', X2:out('Callable')),
      f(argmax,
        X1:'Container',
        X2:compfunc:'Callable',
        X3:out('Any')),
      f(subgrid, X3:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve(b27ca6d3, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'TWO':n:'Integer', X2:out('FrozenSet')),
      f(mapply,
        outbox,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(ce22a75a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(apply, outbox, X1:'Container', X2:out('Container')),
      f(mapply,
        backdrop,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(dc1df850, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X2:out('Objects')),
      f(mapply,
        outbox,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(f25fbde4, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(upscale, X3:'Element', 'TWO':factor:'Integer', OUT:out('Element'))
    ].
solve('44d8ac46', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(apply, delta, X1:'Container', X2:out('Container')),
      f(mfilter, X2:'Container', square, X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve('1e0a9b12', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:out('Grid')),
      f(rbind, order, identity:fixed:'Any', X2:out('Callable')),
      f(apply, X2, X1:'Container', X3:out('Container')),
      f(rot90, X3:'Grid', OUT:out('Grid'))
    ].
solve('0d3d703e', IN, OUT) :-
    [ f(switch,
        IN:'Grid',
        'THREE':a:'Integer',
        'FOUR':b:'Integer',
        X1:out('Grid')),
      f(switch,
        X1:'Grid',
        'EIGHT':a:'Integer',
        'NINE':b:'Integer',
        X2:out('Grid')),
      f(switch, X2:'Grid', 'TWO':a:'Integer', 'SIX':b:'Integer', X3:out('Grid')),
      f(switch, X3:'Grid', 'ONE':a:'Integer', 'FIVE':b:'Integer', OUT:out('Grid'))
    ].
solve('3618c87e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(merge, X2:containers:'ContainerContainer', X3:out('Container')),
      f(move,
        IN:'Grid',
        X3:obj:'Object',
        (2, 0):offset:'Point',
        OUT:out('Grid'))
    ].
solve('1c786137', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(argmax, X1:'Container', height:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(trim, X3:'Grid', OUT:out('Grid'))
    ].
solve('8efcae92', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ONE':value:'Integer',
        X2:out('Objects')),
      f(compose,
        size:outer:'Callable',
        delta:inner:'Callable',
        X3:out('Callable')),
      f(argmax,
        X2:'Container',
        X3:compfunc:'Callable',
        X4:out('Any')),
      f(subgrid, X4:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('445eab21', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        multiply:outer:'Callable',
        height:a:'Callable',
        width:b:'Callable',
        X2:out('Callable')),
      f(argmax,
        X1:'Container',
        X2:compfunc:'Callable',
        X3:out('Any')),
      f(color, X3:obj:'Object', X4:out('Integer')),
      f(canvas,
        X4:value:'Integer',
        (2, 2):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('6f8cd79b', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(apply, initset, X1:'Container', X2:out('Container')),
      f(rbind, bordering, IN:fixed:'Any', X3:out('Callable')),
      f(mfilter, X2:'Container', X3, X4:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve('2013d3e2', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(lefthalf, X3:'Grid', X4:out('Grid')),
      f(tophalf, X4:'Grid', OUT:out('Grid'))
    ].
solve('41e4d17e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        combine:outer:'Callable',
        vfrontier:a:'Callable',
        hfrontier:b:'Callable',
        X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(mapply,
        X3,
        X1:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'SIX':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve('9565186b', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(canvas,
        'FIVE':value:'Integer',
        X1:dimensions:'Point',
        X4:out('Grid')),
      f(paint, X4:'Grid', X3:obj:'Object', OUT:out('Grid'))
    ].
solve(aedd82e4, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'ONE':n:'Integer', X3:out('FrozenSet')),
      f(merge, X3:containers:'ContainerContainer', X4:out('Container')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve(bb43febb, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X2:out('Objects')),
      f(compose,
        backdrop:outer:'Callable',
        inbox:inner:'Callable',
        X3:out('Callable')),
      f(mapply,
        X3,
        X2:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve(e98196ab, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:out('Objects')),
      f(merge, X3:containers:'ContainerContainer', X4:out('Container')),
      f(paint, X2:'Grid', X4:obj:'Object', OUT:out('Grid'))
    ].
solve(f76d97a5, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(first, X1:'Container', X2:out('Any')),
      f(last, X1:'Container', X3:out('Any')),
      f(switch,
        IN:'Grid',
        X2:a:'Integer',
        X3:b:'Integer',
        X4:out('Grid')),
      f(replace,
        X4:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(ce9e57f2, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        connect:outer:'Callable',
        ulcorner:a:'Callable',
        centerofmass:b:'Callable',
        X2:out('Callable')),
      f(mapply,
        X2,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X3:'Patch',
        X4:out('Grid')),
      f(switch,
        X4:'Grid',
        'EIGHT':a:'Integer',
        'TWO':b:'Integer',
        OUT:out('Grid'))
    ].
solve('22eb0ac0', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        backdrop:b:'Callable',
        X2:out('Callable')),
      f(apply, X2, X1:'Container', X3:out('Container')),
      f(mfilter, X3:'Container', hline, X4:out('FrozenSet')),
      f(paint, IN:'Grid', X4:obj:'Object', OUT:out('Grid'))
    ].
solve('9f236235', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:out('Grid')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(vmirror, X1:'Piece', X3:out('Piece')),
      f(valmin,
        X2:'Container',
        width:compfunc:'Callable',
        X4:out('Integer')),
      f(downscale, X3:'Grid', X4:factor:'Integer', OUT:out('Grid'))
    ].
solve(a699fb00, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(shift, X1:'Patch', (0, 1):directions:'Point', X2:out('Patch')),
      f(shift, X1:'Patch', (0, -1):directions:'Point', X3:out('Patch')),
      f(intersection,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve('46442a0e', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(rot180, IN:'Grid', X2:out('Grid')),
      f(rot270, IN:'Grid', X3:out('Grid')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', X4:out('Grid')),
      f(hconcat, X3:a:'Grid', X2:b:'Grid', X5:out('Grid')),
      f(vconcat, X4:a:'Grid', X5:b:'Grid', OUT:out('Grid'))
    ].
solve('7fe24cdd', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(rot180, IN:'Grid', X2:out('Grid')),
      f(rot270, IN:'Grid', X3:out('Grid')),
      f(hconcat, IN:a:'Grid', X1:b:'Grid', X4:out('Grid')),
      f(hconcat, X3:a:'Grid', X2:b:'Grid', X5:out('Grid')),
      f(vconcat, X4:a:'Grid', X5:b:'Grid', OUT:out('Grid'))
    ].
solve('0ca9ddb6', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(mapply,
        dneighbors,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(mapply,
        ineighbors,
        X2:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'SEVEN':value:'Integer',
        X3:'Patch',
        X5:out('Grid')),
      f(fill,
        X5:'Grid',
        'FOUR':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve('543a7ed5', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'SIX':value:'Integer',
        X2:out('Objects')),
      f(mapply,
        outbox,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X3:'Patch',
        X4:out('Grid')),
      f(mapply,
        delta,
        X2:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(fill,
        X4:'Grid',
        'FOUR':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('0520fde7', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(lefthalf, X1:'Grid', X2:out('Grid')),
      f(righthalf, X1:'Grid', X3:out('Grid')),
      f(vmirror, X3:'Piece', X4:out('Piece')),
      f(cellwise,
        X2:a:'Grid',
        X4:b:'Grid',
        'ZERO':fallback:'Integer',
        X5:out('Grid')),
      f(replace,
        X5:'Grid',
        'ONE':replacee:'Integer',
        'TWO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(dae9d2b5, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'FOUR':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'THREE':value:'Integer', X4:out('Indices')),
      f(combine,
        X3:a:'Container',
        X4:b:'Container',
        X5:out('Container')),
      f(fill,
        X1:'Grid',
        'SIX':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('8d5021e8', IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(hconcat, X1:a:'Grid', IN:b:'Grid', X2:out('Grid')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(vconcat, X2:a:'Grid', X3:b:'Grid', X4:out('Grid')),
      f(vconcat, X4:a:'Grid', X2:b:'Grid', X5:out('Grid')),
      f(hmirror, X5:'Piece', OUT:out('Piece'))
    ].
solve('928ad970', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(subgrid, X1:'Patch', IN:'Grid', X2:out('Grid')),
      f(trim, X2:'Grid', X3:out('Grid')),
      f(leastcolor, X3:'Element', X4:out('Integer')),
      f(inbox, X1:'Patch', X5:out('Indices')),
      f(fill,
        IN:'Grid',
        X4:value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(b60334d2, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(mapply,
        dneighbors,
        X1:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(mapply,
        ineighbors,
        X1:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(fill,
        X2:'Grid',
        'ONE':value:'Integer',
        X3:'Patch',
        X5:out('Grid')),
      f(fill,
        X5:'Grid',
        'FIVE':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve(b94a9452, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(leastcolor, X3:'Element', X4:out('Integer')),
      f(mostcolor, X3:'Element', X5:out('Integer')),
      f(switch,
        X3:'Grid',
        X4:a:'Integer',
        X5:b:'Integer',
        OUT:out('Grid'))
    ].
solve(d037b0a7, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, shoot, (1, 0):fixed:'Any', X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X1:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(paint, IN:'Grid', X5:obj:'Object', OUT:out('Grid'))
    ].
solve(d0f5fe59, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(size, X1:'Container', X2:out('Integer')),
      f(astuple, X2:a:'Integer', X2:b:'Integer', X3:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X3:dimensions:'Point',
        X4:out('Grid')),
      f(shoot, (0, 0):start:'Point', (1, 1):direction:'Point', X5:out('Indices')),
      f(fill,
        X4:'Grid',
        'EIGHT':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(e3497940, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(vmirror, X2:'Piece', X3:out('Piece')),
      f(objects,
        X3:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:out('Objects')),
      f(merge, X4:containers:'ContainerContainer', X5:out('Container')),
      f(paint, X1:'Grid', X5:obj:'Object', OUT:out('Grid'))
    ].
solve(e9afcf9a, IN, OUT) :-
    [ f(astuple, 'TWO':a:'Integer', 'ONE':b:'Integer', X1:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X1:dims:'Point',
        X2:out('Grid')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(hconcat, X2:a:'Grid', X3:b:'Grid', X4:out('Grid')),
      f(hconcat, X4:a:'Grid', X4:b:'Grid', X5:out('Grid')),
      f(hconcat, X5:a:'Grid', X4:b:'Grid', OUT:out('Grid'))
    ].
solve('48d8fb45', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, size, 'ONE':target:'Any', X2:out('Callable')),
      f(extract,
        X1:'Container',
        X2:condition:'Callable',
        X3:out('Any')),
      f(lbind, adjacent, X3:fixed:'Any', X4:out('Callable')),
      f(extract,
        X1:'Container',
        X4:condition:'Callable',
        X5:out('Any')),
      f(subgrid, X5:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve(d406998b, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(ofcolor, X1:'Grid', 'FIVE':value:'Integer', X2:out('Indices')),
      f(compose,
        even:outer:'Callable',
        last:inner:'Callable',
        X3:out('Callable')),
      f(sfilter,
        X2:'Container',
        X3:condition:'Callable',
        X4:out('Container')),
      f(fill,
        X1:'Grid',
        'THREE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(vmirror, X5:'Piece', OUT:out('Piece'))
    ].
solve(5.117e+65, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, numcolors, 'TWO':target:'Any', X2:out('Callable')),
      f(extract,
        X1:'Container',
        X2:condition:'Callable',
        X3:out('Any')),
      f(subgrid, X3:'Patch', IN:'Grid', X4:out('Grid')),
      f(mostcolor, X3:'Element', X5:out('Integer')),
      f(replace,
        X4:'Grid',
        'EIGHT':replacee:'Integer',
        X5:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('3906de3d', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:out('Grid')),
      f(rbind, order, identity:fixed:'Any', X2:out('Callable')),
      f(switch, X1:'Grid', 'ONE':a:'Integer', 'TWO':b:'Integer', X3:out('Grid')),
      f(apply, X2, X3:'Container', X4:out('Container')),
      f(switch, X4:'Grid', 'ONE':a:'Integer', 'TWO':b:'Integer', X5:out('Grid')),
      f(cmirror, X5:'Piece', OUT:out('Piece'))
    ].
solve('00d62c1b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X3:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(mfilter, X2:'Container', X4, X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('7b6016b9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X2:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(mfilter, X1:'Container', X3, X4:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(replace,
        X5:'Grid',
        'ZERO':replacee:'Integer',
        'THREE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('67385a82', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'THREE':value:'Integer',
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'ONE':n:'Integer', X3:out('FrozenSet')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(merge, X4:containers:'ContainerContainer', X5:out('Container')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(a5313dff, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X3:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(mfilter, X2:'Container', X4, X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(ea32f347, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'FOUR':replacer:'Integer',
        X2:out('Grid')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(fill,
        X2:'Grid',
        'ONE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(fill,
        X5:'Grid',
        'TWO':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(d631b094, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(other, X1:'Container', 'ZERO':value:'Any', X2:out('Any')),
      f(ofcolor, IN:'Grid', X2:value:'Integer', X3:out('Indices')),
      f(size, X3:'Container', X4:out('Integer')),
      f(astuple, 'ONE':a:'Integer', X4:b:'Integer', X5:out('Point')),
      f(canvas,
        X2:value:'Integer',
        X5:dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('10fcaaa3', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(hconcat, IN:a:'Grid', IN:b:'Grid', X2:out('Grid')),
      f(vconcat, X2:a:'Grid', X2:b:'Grid', X3:out('Grid')),
      f(ofcolor, X3:'Grid', X1:value:'Integer', X4:out('Indices')),
      f(mapply,
        ineighbors,
        X4:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(underfill,
        X3:'Grid',
        'EIGHT':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('007bbfb7', IN, OUT) :-
    [ f(hupscale, IN:'Grid', 'THREE':factor:'Integer', X1:out('Grid')),
      f(vupscale, X1:'Grid', 'THREE':factor:'Integer', X2:out('Grid')),
      f(hconcat, IN:a:'Grid', IN:b:'Grid', X3:out('Grid')),
      f(hconcat, X3:a:'Grid', IN:b:'Grid', X4:out('Grid')),
      f(vconcat, X4:a:'Grid', X4:b:'Grid', X5:out('Grid')),
      f(vconcat, X5:a:'Grid', X4:b:'Grid', X6:out('Grid')),
      f(cellwise,
        X2:a:'Grid',
        X6:b:'Grid',
        'ZERO':fallback:'Integer',
        OUT:out('Grid'))
    ].
solve('496994bd', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(height, IN:'Piece', X2:out('Integer')),
      f(halve, X2:n:'Numerical', X3:out('Numerical')),
      f(astuple, X3:a:'Integer', X1:b:'Integer', X4:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X4:dims:'Point',
        X5:out('Grid')),
      f(hmirror, X5:'Piece', X6:out('Piece')),
      f(vconcat, X5:a:'Grid', X6:b:'Grid', OUT:out('Grid'))
    ].
solve('1f876c06', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(compose,
        last:outer:'Callable',
        first:inner:'Callable',
        X2:out('Callable')),
      f(power, last, 'TWO':n:'Integer', X3:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X2:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X1:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve('05f2a901', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(colorfilter,
        X1:objs:'Objects',
        'EIGHT':value:'Integer',
        X4:out('Objects')),
      f(first, X4:'Container', X5:out('Any')),
      f(gravitate,
        X3:source:'Patch',
        X5:destination:'Patch',
        X6:out('Point')),
      f(move,
        IN:'Grid',
        X3:obj:'Object',
        X6:offset:'Point',
        OUT:out('Grid'))
    ].
solve('39a8645d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(apply, color, X2:'Container', X3:out('Container')),
      f(mostcommon, X3:'Container', X4:out('Any')),
      f(matcher, color, X4:target:'Any', X5:out('Callable')),
      f(extract,
        X1:'Container',
        X5:condition:'Callable',
        X6:out('Any')),
      f(subgrid, X6:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('1b2d62fb', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(intersection,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(replace,
        X1:'Grid',
        'NINE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X6:out('Grid')),
      f(fill,
        X6:'Grid',
        'EIGHT':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('90c28cc7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(dedupe, X3:tup:'Tuple', X4:out('Tuple')),
      f(rot90, X4:'Grid', X5:out('Grid')),
      f(dedupe, X5:tup:'Tuple', X6:out('Tuple')),
      f(rot270, X6:'Grid', OUT:out('Grid'))
    ].
solve(b6afb2da, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'TWO':replacer:'Integer',
        X2:out('Grid')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X3:out('Objects')),
      f(mapply,
        box,
        X3:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(fill,
        X2:'Grid',
        'FOUR':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(mapply,
        corners,
        X3:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(fill,
        X5:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(b9b7f026, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(rbind, adjacent, X2:fixed:'Any', X3:out('Callable')),
      f(remove, X2:value:'Any', X1:'Container', X4:out('Container')),
      f(extract,
        X4:'Container',
        X3:condition:'Callable',
        X5:out('Any')),
      f(color, X5:obj:'Object', X6:out('Integer')),
      f(canvas,
        X6:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve(ba97ae07, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(apply, color, X2:'Container', X3:out('Container')),
      f(mostcommon, X3:'Container', X4:out('Any')),
      f(ofcolor, IN:'Grid', X4:value:'Integer', X5:out('Indices')),
      f(backdrop, X5:'Patch', X6:out('Indices')),
      f(fill,
        IN:'Grid',
        X4:value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(c9f8e694, IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(astuple, X1:a:'Integer', 'ONE':b:'Integer', X4:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X4:dims:'Point',
        X5:out('Grid')),
      f(hupscale, X5:'Grid', X2:factor:'Integer', X6:out('Grid')),
      f(fill,
        X6:'Grid',
        'ZERO':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(d23f8c26, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(halve, X2:n:'Numerical', X3:out('Numerical')),
      f(matcher, last, X3:target:'Any', X4:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X4:inner:'Callable',
        X5:out('Callable')),
      f(sfilter,
        X1:'Container',
        X5:condition:'Callable',
        X6:out('Container')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(d5d6de2d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sfilter,
        X1:'Container',
        square:condition:'Callable',
        X2:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(compose,
        backdrop:outer:'Callable',
        inbox:inner:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X3:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(replace,
        IN:'Grid',
        'TWO':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X6:out('Grid')),
      f(fill,
        X6:'Grid',
        'THREE':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(dbc1a6ce, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(product,
        X1:a:'Container',
        X1:b:'Container',
        X2:out('FrozenSet')),
      f(fork,
        connect:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X3:out('Callable')),
      f(apply, X3, X2:'Container', X4:out('Container')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X5:out('Callable')),
      f(mfilter, X4:'Container', X5, X6:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(ded97339, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(product,
        X1:a:'Container',
        X1:b:'Container',
        X2:out('FrozenSet')),
      f(fork,
        connect:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X3:out('Callable')),
      f(apply, X3, X2:'Container', X4:out('Container')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X5:out('Callable')),
      f(mfilter, X4:'Container', X5, X6:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(ea786f4a, IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(shoot, (0, 0):start:'Point', (1, 1):direction:'Point', X2:out('Indices')),
      f(decrement, X1:x:'Numerical', X3:out('Numerical')),
      f(tojvec, X3:j:'Integer', X4:out('Point')),
      f(shoot,
        X4:start:'Point',
        (1, -1):direction:'Point',
        X5:out('Indices')),
      f(combine,
        X2:a:'Container',
        X5:b:'Container',
        X6:out('Container')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve('08ed6ac7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(order, X1:'Container', height:compfunc:'Callable', X3:out('Tuple')),
      f(size, X2:'Container', X4:out('Integer')),
      f(interval,
        X4:start:'Integer',
        'ZERO':stop:'Integer',
        'NEG_ONE':step:'Integer',
        X5:out('Tuple')),
      f(mpapply, recolor, X5:a:'Tuple', X3:b:'Tuple', X6:out('Tuple')),
      f(paint, IN:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve(40853293, IN, OUT) :-
    [ f(partition, IN:'Grid', X1:out('Objects')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        backdrop:b:'Callable',
        X2:out('Callable')),
      f(apply, X2, X1:'Container', X3:out('Container')),
      f(mfilter, X3:'Container', hline, X4:out('FrozenSet')),
      f(mfilter, X3:'Container', vline, X5:out('FrozenSet')),
      f(paint, IN:'Grid', X4:obj:'Object', X6:out('Grid')),
      f(paint, X6:'Grid', X5:obj:'Object', OUT:out('Grid'))
    ].
solve('5521c0d9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(cover, IN:'Grid', X2:'Patch', X3:out('Grid')),
      f(chain,
        toivec:h:'Callable',
        invert:g:'Callable',
        height:f:'Callable',
        X4:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X1:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, X3:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve(f8ff0b80, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(order, X1:'Container', size:compfunc:'Callable', X2:out('Tuple')),
      f(apply, color, X2:'Container', X3:out('Container')),
      f(rbind, canvas, (1, 1):fixed:'Any', X4:out('Callable')),
      f(apply, X4, X3:'Container', X5:out('Container')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(hmirror, X6:'Piece', OUT:out('Piece'))
    ].
solve('85c4e7cd', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(compose,
        invert:outer:'Callable',
        size:inner:'Callable',
        X2:out('Callable')),
      f(order, X1:'Container', size:compfunc:'Callable', X3:out('Tuple')),
      f(order,
        X1:'Container',
        X2:compfunc:'Callable',
        X4:out('Tuple')),
      f(apply, color, X4:'Container', X5:out('Container')),
      f(mpapply, recolor, X5:a:'Tuple', X3:b:'Tuple', X6:out('Tuple')),
      f(paint, IN:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve(d2abd087, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, size, 'SIX':target:'Any', X2:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(mfilter, X1:'Container', X2, X4:out('FrozenSet')),
      f(mfilter, X1:'Container', X3, X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        X6:out('Grid')),
      f(fill,
        X6:'Grid',
        'ONE':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('017c7c7b', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(equality, X1:a:'Any', X2:b:'Any', returns=X3),
      f(crop,
        IN:'Grid',
        (2, 0):start:'Point',
        (3, 3):dims:'Point',
        X4:out('Grid')),
      f(branch,
        condition=X3,
        X2:a:'Any',
        X4:b:'Any',
        X5:out('Any')),
      f(vconcat, IN:a:'Grid', X5:b:'Grid', X6:out('Grid')),
      f(replace,
        X6:'Grid',
        'ONE':replacee:'Integer',
        'TWO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('363442ee', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (3, 3):dims:'Point',
        X2:out('Grid')),
      f(asobject, X2:'Grid', X3:out('Object')),
      f(lbind, shift, X3:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        decrement:inner:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X1:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve('5168d44c', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X1:out('Indices')),
      f(height, X1:'Piece', X2:out('Integer')),
      f(equality, X2:a:'Any', 'ONE':b:'Any', returns=X3),
      f(branch, condition=X3, (0, 2):a:'Any', (2, 0):b:'Any', X4:out('Any')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X5:out('Indices')),
      f(recolor, 'TWO':value:'Integer', X5:'Patch', X6:out('Object')),
      f(move,
        IN:'Grid',
        X6:obj:'Object',
        X4:offset:'Point',
        OUT:out('Grid'))
    ].
solve(e9614598, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(fork,
        add:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X2:out('Callable')),
      f(X2, X1, X3),
      f(halve, X3:n:'Numerical', X4:out('Numerical')),
      f(dneighbors, X4:loc:'Point', X5:out('Indices')),
      f(insert,
        X4:value:'Any',
        X5:container:'FrozenSet',
        X6:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(d9fac9be, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(color, X3:obj:'Object', X4:out('Integer')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X5:out('Container')),
      f(other, X5:'Container', X4:value:'Any', X6:out('Any')),
      f(canvas,
        X6:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve(e50d258f, IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(astuple, 'NINE':a:'Integer', X1:b:'Integer', X2:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X2:dimensions:'Point',
        X3:out('Grid')),
      f(vconcat, IN:a:'Grid', X3:b:'Grid', X4:out('Grid')),
      f(objects,
        X4:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X5:out('Objects')),
      f(rbind, colorcount, 'TWO':fixed:'Any', X6:out('Callable')),
      f(argmax,
        X5:'Container',
        X6:compfunc:'Callable',
        X7:out('Any')),
      f(subgrid, X7:'Patch', IN:'Grid', OUT:out('Grid'))
    ].
solve('810b9b61', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(apply, toindices, X1:'Container', X2:out('Container')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X3:out('Callable')),
      f(sfilter,
        X2:'Container',
        X3:condition:'Callable',
        X4:out('Container')),
      f(difference,
        X2:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(fork,
        equality:outer:'Callable',
        identity:a:'Callable',
        box:b:'Callable',
        X6:out('Callable')),
      f(mfilter, X5:'Container', X6, X7:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('54d82841', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(compose,
        last:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(apply, X3, X2:'Container', X4:out('Container')),
      f(decrement, X1:x:'Numerical', X5:out('Numerical')),
      f(lbind, astuple, X5:fixed:'Any', X6:out('Callable')),
      f(apply, X6, X4:'Container', X7:out('Container')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('60b61512', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, subgrid, IN:fixed:'Any', X2:out('Callable')),
      f(compose,
        asindices:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X3:a:'Callable',
        ulcorner:b:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X1:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'SEVEN':value:'Integer',
        X5:'Patch',
        X6:out('Grid')),
      f(merge, X1:containers:'ContainerContainer', X7:out('Container')),
      f(paint, X6:'Grid', X7:obj:'Object', OUT:out('Grid'))
    ].
solve('25d8a9c8', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'THREE':n:'Integer', X3:out('FrozenSet')),
      f(mfilter, X3:'Container', hline, X4:out('FrozenSet')),
      f(toindices, X4:'Patch', X5:out('Indices')),
      f(difference,
        X1:a:'FrozenSet',
        X5:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FIVE':value:'Integer',
        X5:'Patch',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve('239be575', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, contained, 'TWO':fixed:'Any', X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        palette:inner:'Callable',
        X3:out('Callable')),
      f(sfilter,
        X1:'Container',
        X3:condition:'Callable',
        X4:out('Container')),
      f(size, X4:'Container', X5:out('Integer')),
      f(greater, X5:a:'Integer', 'ONE':b:'Integer', returns=X6),
      f(branch, condition=X6, 'ZERO':a:'Any', 'EIGHT':b:'Any', X7:out('Any')),
      f(canvas,
        X7:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('67a423a3', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(colorfilter,
        X2:objs:'Objects',
        X1:value:'Integer',
        X3:out('Objects')),
      f(merge, X3:containers:'ContainerContainer', X4:out('Container')),
      f(delta, X4:'Patch', X5:out('Indices')),
      f(first, X5:'Container', X6:out('Any')),
      f(neighbors, X6:loc:'Point', X7:out('Indices')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('5c0a986e', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X2:out('Indices')),
      f(lrcorner, X1:'Patch', X3:out('Point')),
      f(ulcorner, X2:'Patch', X4:out('Point')),
      f(shoot,
        X3:start:'Point',
        (1, 1):direction:'Point',
        X5:out('Indices')),
      f(shoot,
        X4:start:'Point',
        (-1, -1):direction:'Point',
        X6:out('Indices')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X5:'Patch',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve('6430c8c4', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(astuple, 'FOUR':a:'Integer', 'FOUR':b:'Integer', X3:out('Point')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X5:out('Indices')),
      f(intersection,
        X4:a:'FrozenSet',
        X5:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(canvas,
        'ZERO':value:'Integer',
        X3:dimensions:'Point',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'THREE':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve('94f9d214', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(astuple, 'FOUR':a:'Integer', 'FOUR':b:'Integer', X5:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X5:dimensions:'Point',
        X6:out('Grid')),
      f(intersection,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        'TWO':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(a1570a43, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X2:out('Indices')),
      f(recolor, 'TWO':value:'Integer', X1:'Patch', X3:out('Object')),
      f(ulcorner, X2:'Patch', X4:out('Point')),
      f(ulcorner, X1:'Patch', X5:out('Point')),
      f(subtract,
        X4:a:'Numerical',
        X5:b:'Numerical',
        X6:out('Numerical')),
      f(increment, X6:x:'Numerical', X7:out('Numerical')),
      f(move,
        IN:'Grid',
        X3:obj:'Object',
        X7:offset:'Point',
        OUT:out('Grid'))
    ].
solve(ce4f8723, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(intersection,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(astuple, 'FOUR':a:'Integer', 'FOUR':b:'Integer', X6:out('Point')),
      f(canvas,
        'THREE':value:'Integer',
        X6:dimensions:'Point',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(d13f3404, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, shoot, (1, 1):fixed:'Any', X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X1:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(astuple, 'SIX':a:'Integer', 'SIX':b:'Integer', X6:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X6:dimensions:'Point',
        X7:out('Grid')),
      f(paint, X7:'Grid', X5:obj:'Object', OUT:out('Grid'))
    ].
solve(dc433765, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X2:out('Indices')),
      f(first, X1:'Container', X3:out('Any')),
      f(first, X2:'Container', X4:out('Any')),
      f(subtract,
        X4:a:'Numerical',
        X3:b:'Numerical',
        X5:out('Numerical')),
      f(sign, X5:x:'Numerical', X6:out('Numerical')),
      f(recolor, 'THREE':value:'Integer', X1:'Patch', X7:out('Object')),
      f(move,
        IN:'Grid',
        X7:obj:'Object',
        X6:offset:'Point',
        OUT:out('Grid'))
    ].
solve(f2829549, IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(intersection,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(shape, X1:'Piece', X6:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X6:dimensions:'Point',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'THREE':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve(fafffa47, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(shape, X2:'Piece', X3:out('Point')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X5:out('Indices')),
      f(intersection,
        X4:a:'FrozenSet',
        X5:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(canvas,
        'ZERO':value:'Integer',
        X3:dimensions:'Point',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(fcb5c309, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(colorfilter,
        X2:objs:'Objects',
        X1:value:'Integer',
        X3:out('Objects')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(argmax, X4:'Container', size:compfunc:'Callable', X5:out('Any')),
      f(color, X5:obj:'Object', X6:out('Integer')),
      f(subgrid, X5:'Patch', IN:'Grid', X7:out('Grid')),
      f(replace,
        X7:'Grid',
        X6:replacee:'Integer',
        X1:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(ff805c23, IN, OUT) :-
    [ f(hmirror, IN:'Piece', X1:out('Piece')),
      f(vmirror, IN:'Piece', X2:out('Piece')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X3:out('Indices')),
      f(subgrid, X3:'Patch', X1:'Grid', X4:out('Grid')),
      f(subgrid, X3:'Patch', X2:'Grid', X5:out('Grid')),
      f(palette, X4:'Element', X6:out('IntegerSet')),
      f(contained, 'ONE':value:'Any', X6:'Container', returns=X7),
      f(branch,
        condition=X7,
        X5:a:'Any',
        X4:b:'Any',
        OUT:out('Any'))
    ].
solve(e76a88a6, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmax,
        X1:'Container',
        numcolors:compfunc:'Callable',
        X2:out('Any')),
      f(normalize, X2:'Patch', X3:out('Patch')),
      f(remove, X2:value:'Any', X1:'Container', X4:out('Container')),
      f(apply, ulcorner, X4:'Container', X5:out('Container')),
      f(lbind, shift, X3:fixed:'Any', X6:out('Callable')),
      f(mapply,
        X6,
        X5:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(paint, IN:'Grid', X7:obj:'Object', OUT:out('Grid'))
    ].
solve('7c008303', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X1:out('Indices')),
      f(subgrid, X1:'Patch', IN:'Grid', X2:out('Grid')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(replace,
        IN:'Grid',
        'THREE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X4:out('Grid')),
      f(replace,
        X4:'Grid',
        'EIGHT':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X5:out('Grid')),
      f(compress, X5:'Grid', X6:out('Grid')),
      f(upscale, X6:'Element', 'THREE':factor:'Integer', X7:out('Element')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve('7f4411dc', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(rbind, difference, X2:fixed:'Any', X3:out('Callable')),
      f(rbind, greater, 'TWO':fixed:'Any', X4:out('Callable')),
      f(chain,
        X4:h:'Callable',
        size:g:'Callable',
        X3:f:'Callable',
        X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        dneighbors:inner:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X2:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(b230c067, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(apply, normalize, X2:'Container', X3:out('Container')),
      f(leastcommon, X3:'Container', X4:out('Any')),
      f(matcher, normalize, X4:target:'Any', X5:out('Callable')),
      f(extract,
        X1:'Container',
        X5:condition:'Callable',
        X6:out('Any')),
      f(replace,
        IN:'Grid',
        'EIGHT':replacee:'Integer',
        'ONE':replacer:'Integer',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(e8593010, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(sizefilter, X1:'Container', 'TWO':n:'Integer', X3:out('FrozenSet')),
      f(merge, X2:containers:'ContainerContainer', X4:out('Container')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(merge, X3:containers:'ContainerContainer', X6:out('Container')),
      f(fill,
        X5:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        X7:out('Grid')),
      f(replace,
        X7:'Grid',
        'ZERO':replacee:'Integer',
        'ONE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('6d75e8bb', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(ulcorner, X2:'Patch', X3:out('Point')),
      f(subgrid, X2:'Patch', IN:'Grid', X4:out('Grid')),
      f(replace,
        X4:'Grid',
        'ZERO':replacee:'Integer',
        'TWO':replacer:'Integer',
        X5:out('Grid')),
      f(asobject, X5:'Grid', X6:out('Object')),
      f(shift, X6:'Patch', X3:directions:'Point', X7:out('Patch')),
      f(paint, IN:'Grid', X7:obj:'Object', OUT:out('Grid'))
    ].
solve('3f7978a0', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(matcher, color, 'FIVE':target:'Any', X2:out('Callable')),
      f(extract,
        X1:'Container',
        X2:condition:'Callable',
        X3:out('Any')),
      f(ulcorner, X3:'Patch', X4:out('Point')),
      f(subtract,
        X4:a:'Numerical',
        (1, 0):b:'Numerical',
        X5:out('Numerical')),
      f(shape, X3:'Piece', X6:out('Point')),
      f(add, X6:a:'Numerical', (2, 0):b:'Numerical', X7:out('Numerical')),
      f(crop,
        IN:'Grid',
        X5:start:'Point',
        X7:dims:'Point',
        OUT:out('Grid'))
    ].
solve('1190e5a7', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(frontiers, IN:'Grid', X2:out('Objects')),
      f(sfilter,
        X2:'Container',
        vline:condition:'Callable',
        X3:out('Container')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(astuple, X4:a:'Integer', X3:b:'Integer', X5:out('Point')),
      f(apply, size, X5:'Container', X6:out('Container')),
      f(increment, X6:x:'Numerical', X7:out('Numerical')),
      f(canvas,
        X1:value:'Integer',
        X7:dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('6e02f1e3', IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:out('IntegerSet')),
      f(canvas, 'ZERO':value:'Integer', (3, 3):dimensions:'Point', X2:out('Grid')),
      f(equality, X1:a:'Any', 'THREE':b:'Any', returns=X3),
      f(equality, X1:a:'Any', 'TWO':b:'Any', returns=X4),
      f(branch, condition=X3, (2, 0):a:'Any', (0, 0):b:'Any', X5:out('Any')),
      f(branch, condition=X4, (2, 2):a:'Any', (0, 2):b:'Any', X6:out('Any')),
      f(connect, X5:a:'Point', X6:b:'Point', X7:out('Indices')),
      f(fill,
        X2:'Grid',
        'FIVE':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(a61f2674, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X4:out('Grid')),
      f(recolor, 'ONE':value:'Integer', X2:'Patch', X5:out('Object')),
      f(recolor, 'TWO':value:'Integer', X3:'Patch', X6:out('Object')),
      f(combine,
        X5:a:'Container',
        X6:b:'Container',
        X7:out('Container')),
      f(paint, X4:'Grid', X7:obj:'Object', OUT:out('Grid'))
    ].
solve(fcc82909, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, add, (1, 0):fixed:'Any', X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        llcorner:inner:'Callable',
        X3:out('Callable')),
      f(compose,
        toivec:outer:'Callable',
        numcolors:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        add:outer:'Callable',
        lrcorner:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(fork,
        astuple:outer:'Callable',
        X3:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(compose,
        box:outer:'Callable',
        X6:inner:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X1:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('72ca375d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(rbind, subgrid, IN:fixed:'Any', X3:out('Callable')),
      f(apply, X3, X2:'Container', X4:out('Container')),
      f(apply, vmirror, X4:'Container', X5:out('Container')),
      f(papply, equality, X4:a:'Tuple', X5:b:'Tuple', X6:out('Tuple')),
      f(pair, X4:a:'Tuple', X6:b:'Tuple', X7:out('TupleTuple')),
      f(extract, X7:'Container', last:condition:'Callable', X8:out('Any')),
      f(first, X8:'Container', OUT:out('Any'))
    ].
solve('253bf280', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(prapply, connect, X1, X1, X2),
      f(rbind, greater, 'ONE':fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        size:inner:'Callable',
        X4:out('Callable')),
      f(sfilter,
        X2:'Container',
        X4:condition:'Callable',
        X5:out('Container')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X6:out('Callable')),
      f(mfilter, X5:'Container', X6, X7:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'EIGHT':value:'Integer',
        X1:'Patch',
        OUT:out('Grid'))
    ].
solve('694f12f3', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'FOUR':value:'Integer',
        X2:out('Objects')),
      f(compose,
        backdrop:outer:'Callable',
        inbox:inner:'Callable',
        X3:out('Callable')),
      f(argmin, X2:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X5:out('Any')),
      f(X3, X4, X6),
      f(X3, X5, X7),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'TWO':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('1f642eb9', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(first, X3:'Container', X4:out('Any')),
      f(rbind, gravitate, X4:fixed:'Any', X5:out('Callable')),
      f(compose,
        crement:outer:'Callable',
        X5:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X2:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(paint, IN:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('31aa019c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(first, X2:'Container', X3:out('Any')),
      f(neighbors, X3:loc:'Point', X4:out('Indices')),
      f(astuple, 'TEN':a:'Integer', 'TEN':b:'Integer', X5:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X5:dimensions:'Point',
        X6:out('Grid')),
      f(initset, X3:value:'Any', X7:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        X1:value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        OUT:out('Grid'))
    ].
solve('27a28665', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(valmax,
        X1:'Container',
        size:compfunc:'Callable',
        X2:out('Integer')),
      f(equality, X2:a:'Any', 'ONE':b:'Any', returns=X3),
      f(equality, X2:a:'Any', 'FOUR':b:'Any', returns=X4),
      f(equality, X2:a:'Any', 'FIVE':b:'Any', returns=X5),
      f(branch, condition=X3, 'TWO':a:'Any', 'ONE':b:'Any', X6:out('Any')),
      f(branch,
        condition=X4,
        'THREE':a:'Any',
        X6:b:'Any',
        X7:out('Any')),
      f(branch, condition=X5, 'SIX':a:'Any', X7:b:'Any', X8:out('Any')),
      f(canvas,
        X8:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve('7ddcd7ec', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(first, X3:'Container', X4:out('Any')),
      f(color, X4:obj:'Object', X5:out('Integer')),
      f(lbind, position, X4:fixed:'Any', X6:out('Callable')),
      f(fork,
        shoot:outer:'Callable',
        center:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X2:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X5:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('3bd67248', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(decrement, X1:x:'Numerical', X2:out('Numerical')),
      f(decrement, X2:x:'Numerical', X3:out('Numerical')),
      f(astuple, X3:a:'Integer', 'ONE':b:'Integer', X4:out('Point')),
      f(astuple, X2:a:'Integer', 'ONE':b:'Integer', X5:out('Point')),
      f(shoot,
        X4:start:'Point',
        (-1, 1):direction:'Point',
        X6:out('Indices')),
      f(shoot,
        X5:start:'Point',
        (0, 1):direction:'Point',
        X7:out('Indices')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('73251a56', IN, OUT) :-
    [ f(dmirror, IN:'Piece', X1:out('Piece')),
      f(papply, pair, IN:a:'Tuple', X1:b:'Tuple', X2:out('Tuple')),
      f(lbind, apply, maximum:fixed:'Any', X3:out('Callable')),
      f(apply, X3, X2:'Container', X4:out('Container')),
      f(mostcolor, X4:'Element', X5:out('Integer')),
      f(replace,
        X4:'Grid',
        'ZERO':replacee:'Integer',
        X5:replacer:'Integer',
        X6:out('Grid')),
      f(index, X6:'Grid', (0, 0):loc:'Point', X7:out('Integer')),
      f(shoot, (0, 0):start:'Point', (1, 1):direction:'Point', X8:out('Indices')),
      f(fill,
        X6:'Grid',
        X7:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('25d487eb', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X3:out('Indices')),
      f(center, X3:'Patch', X4:out('Point')),
      f(merge, X2:containers:'ContainerContainer', X5:out('Container')),
      f(center, X5:'Patch', X6:out('Point')),
      f(subtract,
        X6:a:'Numerical',
        X4:b:'Numerical',
        X7:out('Numerical')),
      f(shoot,
        X4:start:'Point',
        X7:direction:'Point',
        X8:out('Indices')),
      f(underfill,
        IN:'Grid',
        X1:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('8f2ea7aa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(upscale, X3:'Element', 'THREE':factor:'Integer', X4:out('Element')),
      f(hconcat, X3:a:'Grid', X3:b:'Grid', X5:out('Grid')),
      f(hconcat, X5:a:'Grid', X3:b:'Grid', X6:out('Grid')),
      f(vconcat, X6:a:'Grid', X6:b:'Grid', X7:out('Grid')),
      f(vconcat, X7:a:'Grid', X6:b:'Grid', X8:out('Grid')),
      f(cellwise,
        X4:a:'Grid',
        X8:b:'Grid',
        'ZERO':fallback:'Integer',
        OUT:out('Grid'))
    ].
solve(b8825c91, IN, OUT) :-
    [ f(replace,
        IN:'Grid',
        'FOUR':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X1:out('Grid')),
      f(dmirror, X1:'Piece', X2:out('Piece')),
      f(papply, pair, X1:a:'Tuple', X2:b:'Tuple', X3:out('Tuple')),
      f(lbind, apply, maximum:fixed:'Any', X4:out('Callable')),
      f(apply, X4, X3:'Container', X5:out('Container')),
      f(cmirror, X5:'Piece', X6:out('Piece')),
      f(papply, pair, X5:a:'Tuple', X6:b:'Tuple', X7:out('Tuple')),
      f(apply, X4, X7:'Container', X8:out('Container')),
      f(cmirror, X8:'Piece', OUT:out('Piece'))
    ].
solve(cce03e0d, IN, OUT) :-
    [ f(upscale, IN:'Element', 'THREE':factor:'Integer', X1:out('Element')),
      f(hconcat, IN:a:'Grid', IN:b:'Grid', X2:out('Grid')),
      f(hconcat, X2:a:'Grid', IN:b:'Grid', X3:out('Grid')),
      f(vconcat, X3:a:'Grid', X3:b:'Grid', X4:out('Grid')),
      f(vconcat, X4:a:'Grid', X3:b:'Grid', X5:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X6:out('Indices')),
      f(ofcolor, X1:'Grid', 'ONE':value:'Integer', X7:out('Indices')),
      f(combine,
        X6:a:'Container',
        X7:b:'Container',
        X8:out('Container')),
      f(fill,
        X5:'Grid',
        'ZERO':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(d364b489, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(shift, X1:'Patch', (1, 0):directions:'Point', X2:out('Patch')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X2:'Patch',
        X3:out('Grid')),
      f(shift, X1:'Patch', (-1, 0):directions:'Point', X4:out('Patch')),
      f(fill,
        X3:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(shift, X1:'Patch', (0, 1):directions:'Point', X6:out('Patch')),
      f(fill,
        X5:'Grid',
        'SIX':value:'Integer',
        X6:'Patch',
        X7:out('Grid')),
      f(shift, X1:'Patch', (0, -1):directions:'Point', X8:out('Patch')),
      f(fill,
        X7:'Grid',
        'SEVEN':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(a5f85a15, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(interval,
        'ONE':start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X2:out('Tuple')),
      f(apply, double, X2:'Container', X3:out('Container')),
      f(apply, decrement, X3:'Container', X4:out('Container')),
      f(papply, astuple, X4:a:'Tuple', X4:b:'Tuple', X5:out('Tuple')),
      f(apply, ulcorner, X1:'Container', X6:out('Container')),
      f(lbind, shift, X5:fixed:'Any', X7:out('Callable')),
      f(mapply,
        X7,
        X6:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('3ac3eb23', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(chain,
        ineighbors:h:'Callable',
        last:g:'Callable',
        first:f:'Callable',
        X2:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X2:b:'Callable',
        X3:out('Callable')),
      f(mapply,
        X3,
        X1:container:'ContainerContainer',
        X4:out('FrozenSet')),
      f(paint, IN:'Grid', X4:obj:'Object', X5:out('Grid')),
      f(vsplit, X5:'Grid', 'THREE':n:'Integer', X6:out('Tuple')),
      f(first, X6:'Container', X7:out('Any')),
      f(vconcat, X7:a:'Grid', X7:b:'Grid', X8:out('Grid')),
      f(vconcat, X7:a:'Grid', X8:b:'Grid', OUT:out('Grid'))
    ].
solve('444801d8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ONE':value:'Integer',
        X2:out('Objects')),
      f(rbind, toobject, IN:fixed:'Any', X3:out('Callable')),
      f(chain,
        leastcolor:h:'Callable',
        X3:g:'Callable',
        delta:f:'Callable',
        X4:out('Callable')),
      f(rbind, shift, (-1, 0):fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        backdrop:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X4:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X2:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(underpaint, IN:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve(22168020, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X2:out('Container')),
      f(lbind, ofcolor, IN:fixed:'Any', X3:out('Callable')),
      f(lbind, prapply, connect:fixed:'Any', X4:out('Callable')),
      f(fork,
        X4:outer:'Callable',
        X3:a:'Callable',
        X3:b:'Callable',
        X5:out('Callable')),
      f(compose,
        merge:outer:'Callable',
        X5:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X2:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(paint, IN:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('6e82a1ae', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, sizefilter, X1:fixed:'Any', X2:out('Callable')),
      f(compose,
        merge:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(X3, 'TWO', X4),
      f(X3, 'THREE', X5),
      f(X3, 'FOUR', X6),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X4:'Patch',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'TWO':value:'Integer',
        X5:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(b2862040, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'NINE':value:'Integer',
        X2:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ONE':value:'Integer',
        X3:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X4:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X4:inner:'Callable',
        X5:out('Callable')),
      f(mfilter, X2:'Container', X5, X6:out('FrozenSet')),
      f(rbind, adjacent, X6:fixed:'Any', X7:out('Callable')),
      f(mfilter, X3:'Container', X7, X8:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('868de0fa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(sfilter,
        X1:'Container',
        square:condition:'Callable',
        X2:out('Container')),
      f(compose,
        even:outer:'Callable',
        height:inner:'Callable',
        X3:out('Callable')),
      f(sfilter,
        X2:'Container',
        X3:condition:'Callable',
        X4:out('Container')),
      f(difference,
        X2:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(merge, X4:containers:'ContainerContainer', X6:out('Container')),
      f(merge, X5:containers:'ContainerContainer', X7:out('Container')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'SEVEN':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve('681b3aeb', IN, OUT) :-
    [ f(rot270, IN:'Grid', X1:out('Grid')),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(argmin, X2:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(color, X4:obj:'Object', X5:out('Integer')),
      f(canvas,
        X5:value:'Integer',
        (3, 3):dimensions:'Point',
        X6:out('Grid')),
      f(normalize, X3:'Patch', X7:out('Patch')),
      f(paint, X6:'Grid', X7:obj:'Object', X8:out('Grid')),
      f(rot90, X8:'Grid', OUT:out('Grid'))
    ].
solve('8e5a5113', IN, OUT) :-
    [ f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (3, 3):dims:'Point',
        X1:out('Grid')),
      f(rot90, X1:'Grid', X2:out('Grid')),
      f(rot180, X1:'Grid', X3:out('Grid')),
      f(astuple, X2:a:'Integer', X3:b:'Integer', X4:out('Point')),
      f(astuple, 'FOUR':a:'Integer', 'EIGHT':b:'Integer', X5:out('Point')),
      f(apply, tojvec, X5:'Container', X6:out('Container')),
      f(apply, asobject, X4:'Container', X7:out('Container')),
      f(mpapply, shift, X7:a:'Tuple', X6:b:'Tuple', X8:out('Tuple')),
      f(paint, IN:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('025d127b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(apply, color, X1:'Container', X2:out('Container')),
      f(merge, X1:containers:'ContainerContainer', X3:out('Container')),
      f(lbind, colorfilter, X1:fixed:'Any', X4:out('Callable')),
      f(rbind, argmax, rightmost:fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        X4:inner:'Callable',
        X6:out('Callable')),
      f(mapply,
        X6,
        X2:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(difference,
        X3:a:'FrozenSet',
        X7:b:'FrozenSet',
        X8:out('FrozenSet')),
      f(move,
        IN:'Grid',
        X8:obj:'Object',
        (0, 1):offset:'Point',
        OUT:out('Grid'))
    ].
solve('2281f1f4', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(product,
        X1:a:'Container',
        X1:b:'Container',
        X2:out('FrozenSet')),
      f(power, first, 'TWO':n:'Integer', X3:out('Callable')),
      f(power, last, 'TWO':n:'Integer', X4:out('Callable')),
      f(fork,
        astuple:outer:'Callable',
        X3:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(apply, X5, X2:'Container', X6:out('Container')),
      f(urcorner, X1:'Patch', X7:out('Point')),
      f(remove, X7:value:'Any', X6:'Container', X8:out('Container')),
      f(underfill,
        IN:'Grid',
        'TWO':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(cf98881b, IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':n:'Integer', X1:out('Tuple')),
      f(first, X1:'Container', X2:out('Any')),
      f(remove, X2:value:'Any', X1:'Container', X3:out('Container')),
      f(first, X3:'Container', X4:out('Any')),
      f(last, X3:'Container', X5:out('Any')),
      f(ofcolor, X4:'Grid', 'NINE':value:'Integer', X6:out('Indices')),
      f(ofcolor, X2:'Grid', 'FOUR':value:'Integer', X7:out('Indices')),
      f(fill,
        X5:'Grid',
        'NINE':value:'Integer',
        X6:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(d4f3cd78, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(delta, X1:'Patch', X2:out('Indices')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X2:'Patch',
        X3:out('Grid')),
      f(box, X1:'Patch', X4:out('Indices')),
      f(difference,
        X4:a:'FrozenSet',
        X1:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(position, X4:a:'Patch', X5:b:'Patch', X6:out('Point')),
      f(first, X5:'Container', X7:out('Any')),
      f(shoot,
        X7:start:'Point',
        X6:direction:'Point',
        X8:out('Indices')),
      f(fill,
        X3:'Grid',
        'EIGHT':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(bda2d7a6, IN, OUT) :-
    [ f(partition, IN:'Grid', X1:out('Objects')),
      f(order, X1:'Container', size:compfunc:'Callable', X2:out('Tuple')),
      f(apply, color, X2:'Container', X3:out('Container')),
      f(last, X2:'Container', X4:out('Any')),
      f(remove, X4:value:'Any', X2:'Container', X5:out('Container')),
      f(repeat, X4:item:'Any', 'ONE':num:'Integer', X6:out('Tuple')),
      f(combine,
        X6:a:'Container',
        X5:b:'Container',
        X7:out('Container')),
      f(mpapply, recolor, X3:a:'Tuple', X7:b:'Tuple', X8:out('Tuple')),
      f(paint, IN:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('137eaa0f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, first, 'FIVE':target:'Any', X2:out('Callable')),
      f(rbind, sfilter, X2:fixed:'Any', X3:out('Callable')),
      f(chain,
        invert:h:'Callable',
        center:g:'Callable',
        X3:f:'Callable',
        X4:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(canvas, 'ZERO':value:'Integer', (3, 3):dimensions:'Point', X6:out('Grid')),
      f(mapply,
        X5,
        X1:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(shift, X7:'Patch', (1, 1):directions:'Point', X8:out('Patch')),
      f(paint, X6:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('6455b5f5', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(valmin,
        X1:'Container',
        size:compfunc:'Callable',
        X4:out('Integer')),
      f(sizefilter,
        X2:'Container',
        X4:n:'Integer',
        X5:out('FrozenSet')),
      f(recolor, 'ONE':value:'Integer', X3:'Patch', X6:out('Object')),
      f(merge, X5:containers:'ContainerContainer', X7:out('Container')),
      f(paint, IN:'Grid', X6:obj:'Object', X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'EIGHT':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(b8cdaf2b, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(shift, X2:'Patch', (-1, 0):directions:'Point', X3:out('Patch')),
      f(ulcorner, X3:'Patch', X4:out('Point')),
      f(urcorner, X3:'Patch', X5:out('Point')),
      f(shoot,
        X4:start:'Point',
        (-1, -1):direction:'Point',
        X6:out('Indices')),
      f(shoot,
        X5:start:'Point',
        (-1, 1):direction:'Point',
        X7:out('Indices')),
      f(combine,
        X6:a:'Container',
        X7:b:'Container',
        X8:out('Container')),
      f(underfill,
        IN:'Grid',
        X1:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(bd4472b8, IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(astuple, 'TWO':a:'Integer', X1:b:'Integer', X2:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X2:dims:'Point',
        X3:out('Grid')),
      f(tophalf, X3:'Grid', X4:out('Grid')),
      f(dmirror, X4:'Piece', X5:out('Piece')),
      f(hupscale, X5:'Grid', X1:factor:'Integer', X6:out('Grid')),
      f(repeat, X6:item:'Any', 'TWO':num:'Integer', X7:out('Tuple')),
      f(merge, X7:containers:'ContainerContainer', X8:out('Container')),
      f(vconcat, X3:a:'Grid', X8:b:'Grid', OUT:out('Grid'))
    ].
solve('4be741c5', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch,
        condition=X1,
        dmirror:a:'Any',
        identity:b:'Any',
        X2:out('Any')),
      f(branch, condition=X1, height:a:'Any', width:b:'Any', X3:out('Any')),
      f(X3, IN, X4),
      f(astuple, 'ONE':a:'Integer', X4:b:'Integer', X5:out('Point')),
      f(X2, IN, X6),
      f(crop,
        X6:'Grid',
        (0, 0):start:'Point',
        X5:dims:'Point',
        X7:out('Grid')),
      f(apply, dedupe, X7:'Container', X8:out('Container')),
      f(X2, X8, OUT)
    ].
solve(bbc9ae5d, IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(palette, IN:'Element', X2:out('IntegerSet')),
      f(halve, X1:n:'Numerical', X3:out('Numerical')),
      f(vupscale, IN:'Grid', X3:factor:'Integer', X4:out('Grid')),
      f(rbind, shoot, (1, 1):fixed:'Any', X5:out('Callable')),
      f(other, X2:'Container', 'ZERO':value:'Any', X6:out('Any')),
      f(ofcolor, X4:'Grid', X6:value:'Integer', X7:out('Indices')),
      f(mapply,
        X5,
        X7:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(fill,
        X4:'Grid',
        X6:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(d90796e8, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'TWO':n:'Integer', X2:out('FrozenSet')),
      f(lbind, contained, 'TWO':fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        palette:inner:'Callable',
        X4:out('Callable')),
      f(mfilter, X2:'Container', X4, X5:out('FrozenSet')),
      f(cover, IN:'Grid', X5:'Patch', X6:out('Grid')),
      f(matcher, first, 'THREE':target:'Any', X7:out('Callable')),
      f(sfilter,
        X5:'Container',
        X7:condition:'Callable',
        X8:out('Container')),
      f(fill,
        X6:'Grid',
        'EIGHT':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('2c608aff', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(toindices, X3:'Patch', X4:out('Indices')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X5:out('Indices')),
      f(prapply, connect, X4, X5, X6),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X7:out('Callable')),
      f(mfilter, X6:'Container', X7, X8:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        X1:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(f8b3ba0a, IN, OUT) :-
    [ f(compress, IN:'Grid', X1:out('Grid')),
      f(astuple, 'THREE':a:'Integer', 'ONE':b:'Integer', X2:out('Point')),
      f(palette, X1:'Element', X3:out('IntegerSet')),
      f(lbind, colorcount, X1:fixed:'Any', X4:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X4:inner:'Callable',
        X5:out('Callable')),
      f(order,
        X3:'Container',
        X5:compfunc:'Callable',
        X6:out('Tuple')),
      f(rbind, canvas, (1, 1):fixed:'Any', X7:out('Callable')),
      f(apply, X7, X6:'Container', X8:out('Container')),
      f(merge, X8:containers:'ContainerContainer', X9:out('Container')),
      f(crop,
        X9:'Grid',
        (1, 0):start:'Point',
        X2:dims:'Point',
        OUT:out('Grid'))
    ].
solve('80af3007', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(upscale, X3:'Element', 'THREE':factor:'Integer', X4:out('Element')),
      f(hconcat, X3:a:'Grid', X3:b:'Grid', X5:out('Grid')),
      f(hconcat, X5:a:'Grid', X3:b:'Grid', X6:out('Grid')),
      f(vconcat, X6:a:'Grid', X6:b:'Grid', X7:out('Grid')),
      f(vconcat, X7:a:'Grid', X6:b:'Grid', X8:out('Grid')),
      f(cellwise,
        X4:a:'Grid',
        X8:b:'Grid',
        'ZERO':fallback:'Integer',
        X9:out('Grid')),
      f(downscale, X9:'Grid', 'THREE':factor:'Integer', OUT:out('Grid'))
    ].
solve('83302e8f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(sfilter,
        X2:'Container',
        square:condition:'Callable',
        X3:out('Container')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(merge, X3:containers:'ContainerContainer', X5:out('Container')),
      f(recolor, 'THREE':value:'Integer', X5:'Patch', X6:out('Object')),
      f(merge, X4:containers:'ContainerContainer', X7:out('Container')),
      f(recolor, 'FOUR':value:'Integer', X7:'Patch', X8:out('Object')),
      f(paint, IN:'Grid', X6:obj:'Object', X9:out('Grid')),
      f(paint, X9:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve('1fad071e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ONE':value:'Integer',
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'FOUR':n:'Integer', X3:out('FrozenSet')),
      f(size, X3:'Container', X4:out('Integer')),
      f(subtract,
        'FIVE':a:'Numerical',
        X4:b:'Numerical',
        X5:out('Numerical')),
      f(astuple, 'ONE':a:'Integer', X4:b:'Integer', X6:out('Point')),
      f(canvas, 'ONE':value:'Integer', X6:dimensions:'Point', X7:out('Grid')),
      f(astuple, 'ONE':a:'Integer', X5:b:'Integer', X8:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X8:dimensions:'Point',
        X9:out('Grid')),
      f(hconcat, X7:a:'Grid', X9:b:'Grid', OUT:out('Grid'))
    ].
solve('11852cab', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(vmirror, X2:'Piece', X4:out('Piece')),
      f(dmirror, X2:'Piece', X5:out('Piece')),
      f(cmirror, X2:'Piece', X6:out('Piece')),
      f(paint, IN:'Grid', X3:obj:'Object', X7:out('Grid')),
      f(paint, X7:'Grid', X4:obj:'Object', X8:out('Grid')),
      f(paint, X8:'Grid', X5:obj:'Object', X9:out('Grid')),
      f(paint, X9:'Grid', X6:obj:'Object', OUT:out('Grid'))
    ].
solve('3428a4f5', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(astuple, 'SIX':a:'Integer', 'FIVE':b:'Integer', X3:out('Point')),
      f(ofcolor, X1:'Grid', 'TWO':value:'Integer', X4:out('Indices')),
      f(ofcolor, X2:'Grid', 'TWO':value:'Integer', X5:out('Indices')),
      f(combine,
        X4:a:'Container',
        X5:b:'Container',
        X6:out('Container')),
      f(intersection,
        X4:a:'FrozenSet',
        X5:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(difference,
        X6:a:'FrozenSet',
        X7:b:'FrozenSet',
        X8:out('FrozenSet')),
      f(canvas,
        'ZERO':value:'Integer',
        X3:dimensions:'Point',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'THREE':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('178fcbfb', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(mapply,
        vfrontier,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X3:'Patch',
        X4:out('Grid')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X5:out('Objects')),
      f(difference,
        X1:a:'FrozenSet',
        X5:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(compose,
        hfrontier:outer:'Callable',
        center:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(mapply,
        X8,
        X6:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, X4:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('3de23699', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(sizefilter, X1:'Container', 'FOUR':n:'Integer', X2:out('FrozenSet')),
      f(first, X2:'Container', X3:out('Any')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(first, X4:'Container', X5:out('Any')),
      f(color, X3:obj:'Object', X6:out('Integer')),
      f(color, X5:obj:'Object', X7:out('Integer')),
      f(subgrid, X3:'Patch', IN:'Grid', X8:out('Grid')),
      f(trim, X8:'Grid', X9:out('Grid')),
      f(replace,
        X9:'Grid',
        X7:replacee:'Integer',
        X6:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('54d9e175', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(compose,
        neighbors:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X2:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(paint, IN:'Grid', X5:obj:'Object', X6:out('Grid')),
      f(replace,
        X6:'Grid',
        'ONE':replacee:'Integer',
        'SIX':replacer:'Integer',
        X7:out('Grid')),
      f(replace,
        X7:'Grid',
        'TWO':replacee:'Integer',
        'SEVEN':replacer:'Integer',
        X8:out('Grid')),
      f(replace,
        X8:'Grid',
        'THREE':replacee:'Integer',
        'EIGHT':replacer:'Integer',
        X9:out('Grid')),
      f(replace,
        X9:'Grid',
        'FOUR':replacee:'Integer',
        'NINE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('5ad4f10b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(color, X2:obj:'Object', X3:out('Integer')),
      f(subgrid, X2:'Patch', IN:'Grid', X4:out('Grid')),
      f(leastcolor, X4:'Element', X5:out('Integer')),
      f(replace,
        X4:'Grid',
        X5:replacee:'Integer',
        'ZERO':replacer:'Integer',
        X6:out('Grid')),
      f(replace,
        X6:'Grid',
        X3:replacee:'Integer',
        X5:replacer:'Integer',
        X7:out('Grid')),
      f(height, X7:'Piece', X8:out('Integer')),
      f(divide, X8:a:'Numerical', 'THREE':b:'Numerical', X9:out('Numerical')),
      f(downscale, X7:'Grid', X9:factor:'Integer', OUT:out('Grid'))
    ].
solve('623ea044', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(center, X2:'Patch', X3:out('Point')),
      f(color, X2:obj:'Object', X4:out('Integer')),
      f(astuple, (1, 1):a:'Integer', (-1, -1):b:'Integer', X5:out('Point')),
      f(astuple, (-1, 1):a:'Integer', (1, -1):b:'Integer', X6:out('Point')),
      f(combine,
        X5:a:'Container',
        X6:b:'Container',
        X7:out('Container')),
      f(lbind, shoot, X3:fixed:'Any', X8:out('Callable')),
      f(mapply,
        X8,
        X7:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X4:value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve('6b9890af', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X4:out('Grid')),
      f(width, X4:'Piece', X5:out('Integer')),
      f(divide, X5:a:'Numerical', 'THREE':b:'Numerical', X6:out('Numerical')),
      f(upscale,
        X3:'Element',
        X6:factor:'Integer',
        X7:out('Element')),
      f(normalize, X7:'Patch', X8:out('Patch')),
      f(shift, X8:'Patch', (1, 1):directions:'Point', X9:out('Patch')),
      f(paint, X4:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('794b24be', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(size, X1:'Container', X2:out('Integer')),
      f(decrement, X2:x:'Numerical', X3:out('Numerical')),
      f(canvas, 'ZERO':value:'Integer', (3, 3):dimensions:'Point', X4:out('Grid')),
      f(tojvec, X3:j:'Integer', X5:out('Point')),
      f(connect, (0, 0):a:'Point', X5:b:'Point', X6:out('Indices')),
      f(equality, X2:a:'Any', 'FOUR':b:'Any', returns=X7),
      f(insert,
        (1, 1):value:'Any',
        X6:container:'FrozenSet',
        X8:out('FrozenSet')),
      f(branch,
        condition=X7,
        X8:a:'Any',
        X6:b:'Any',
        X9:out('Any')),
      f(fill,
        X4:'Grid',
        'TWO':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve('88a10436', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(center, X3:'Patch', X4:out('Point')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(first, X5:'Container', X6:out('Any')),
      f(normalize, X6:'Patch', X7:out('Patch')),
      f(shift, X7:'Patch', X4:directions:'Point', X8:out('Patch')),
      f(shift, X8:'Patch', (-1, -1):directions:'Point', X9:out('Patch')),
      f(paint, IN:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('88a62173', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(tophalf, X1:'Grid', X3:out('Grid')),
      f(tophalf, X2:'Grid', X4:out('Grid')),
      f(bottomhalf, X1:'Grid', X5:out('Grid')),
      f(bottomhalf, X2:'Grid', X6:out('Grid')),
      f(astuple, X3:a:'Integer', X4:b:'Integer', X7:out('Point')),
      f(astuple, X5:a:'Integer', X6:b:'Integer', X8:out('Point')),
      f(combine,
        X7:a:'Container',
        X8:b:'Container',
        X9:out('Container')),
      f(leastcommon, X9:'Container', OUT:out('Any'))
    ].
solve(890034000000000.0, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(inbox, X2:'Patch', X3:out('Indices')),
      f(recolor, 'ZERO':value:'Integer', X3:'Patch', X4:out('Object')),
      f(occurrences, IN:'Grid', X4:obj:'Object', X5:out('Indices')),
      f(normalize, X2:'Patch', X6:out('Patch')),
      f(shift, X6:'Patch', (-1, -1):directions:'Point', X7:out('Patch')),
      f(lbind, shift, X7:fixed:'Any', X8:out('Callable')),
      f(mapply,
        X8,
        X5:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve('99b1bc43', IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(ofcolor, X1:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X4:out('Indices')),
      f(combine,
        X3:a:'Container',
        X4:b:'Container',
        X5:out('Container')),
      f(intersection,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(difference,
        X5:a:'FrozenSet',
        X6:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(shape, X1:'Piece', X8:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X8:dimensions:'Point',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'THREE':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(a9f96cdd, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(replace,
        IN:'Grid',
        'TWO':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(shift, X1:'Patch', (-1, -1):directions:'Point', X3:out('Patch')),
      f(fill,
        X2:'Grid',
        'THREE':value:'Integer',
        X3:'Patch',
        X4:out('Grid')),
      f(shift, X1:'Patch', (-1, 1):directions:'Point', X5:out('Patch')),
      f(fill,
        X4:'Grid',
        'SIX':value:'Integer',
        X5:'Patch',
        X6:out('Grid')),
      f(shift, X1:'Patch', (1, -1):directions:'Point', X7:out('Patch')),
      f(fill,
        X6:'Grid',
        'EIGHT':value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(shift, X1:'Patch', (1, 1):directions:'Point', X9:out('Patch')),
      f(fill,
        X8:'Grid',
        'SEVEN':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(af902bf9, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X1:out('Indices')),
      f(prapply, connect, X1, X1, X2),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X3:out('Callable')),
      f(mfilter, X2:'Container', X3, X4:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'NEG_ONE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(objects,
        X5:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X6:out('Objects')),
      f(compose,
        backdrop:outer:'Callable',
        inbox:inner:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X6:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(fill,
        X5:'Grid',
        'TWO':value:'Integer',
        X8:'Patch',
        X9:out('Grid')),
      f(replace,
        X9:'Grid',
        'NEG_ONE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(b548a754, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(replace,
        IN:'Grid',
        'EIGHT':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(leastcolor, X2:'Element', X3:out('Integer')),
      f(replace,
        X2:'Grid',
        X3:replacee:'Integer',
        'ZERO':replacer:'Integer',
        X4:out('Grid')),
      f(leastcolor, X4:'Element', X5:out('Integer')),
      f(merge, X1:containers:'ContainerContainer', X6:out('Container')),
      f(backdrop, X6:'Patch', X7:out('Indices')),
      f(box, X6:'Patch', X8:out('Indices')),
      f(fill,
        IN:'Grid',
        X3:value:'Integer',
        X7:'Patch',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        X5:value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(bdad9b1f, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X2:out('Indices')),
      f(center, X1:'Patch', X3:out('Point')),
      f(center, X2:'Patch', X4:out('Point')),
      f(hfrontier, X3:location:'Point', X5:out('Indices')),
      f(vfrontier, X4:location:'Point', X6:out('Indices')),
      f(intersection,
        X5:a:'FrozenSet',
        X6:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X5:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'EIGHT':value:'Integer',
        X6:'Patch',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(c3e719e8, IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(hconcat, IN:a:'Grid', IN:b:'Grid', X2:out('Grid')),
      f(upscale, IN:'Element', 'THREE':factor:'Integer', X3:out('Element')),
      f(ofcolor, X3:'Grid', X1:value:'Integer', X4:out('Indices')),
      f(asindices, X3:'Grid', X5:out('Indices')),
      f(difference,
        X5:a:'FrozenSet',
        X4:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(hconcat, X2:a:'Grid', IN:b:'Grid', X7:out('Grid')),
      f(vconcat, X7:a:'Grid', X7:b:'Grid', X8:out('Grid')),
      f(vconcat, X8:a:'Grid', X7:b:'Grid', X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'ZERO':value:'Integer',
        X6:'Patch',
        OUT:out('Grid'))
    ].
solve(de1cd16c, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'ONE':n:'Integer', X3:out('FrozenSet')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(rbind, subgrid, IN:fixed:'Any', X5:out('Callable')),
      f(apply, X5, X4:'Container', X6:out('Container')),
      f(rbind, colorcount, X1:fixed:'Any', X7:out('Callable')),
      f(argmax,
        X6:'Container',
        X7:compfunc:'Callable',
        X8:out('Any')),
      f(mostcolor, X8:'Element', X9:out('Integer')),
      f(canvas,
        X9:value:'Integer',
        (1, 1):dimensions:'Point',
        OUT:out('Grid'))
    ].
solve(d8c310e9, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(hperiod, X2:obj:'Object', X3:out('Integer')),
      f(multiply,
        X3:a:'Numerical',
        'THREE':b:'Numerical',
        X4:out('Numerical')),
      f(tojvec, X3:j:'Integer', X5:out('Point')),
      f(tojvec, X4:j:'Integer', X6:out('Point')),
      f(shift, X2:'Patch', X5:directions:'Point', X7:out('Patch')),
      f(shift, X2:'Patch', X6:directions:'Point', X8:out('Patch')),
      f(paint, IN:'Grid', X7:obj:'Object', X9:out('Grid')),
      f(paint, X9:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve(a3325580, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(valmax,
        X1:'Container',
        size:compfunc:'Callable',
        X2:out('Integer')),
      f(sizefilter,
        X1:'Container',
        X2:n:'Integer',
        X3:out('FrozenSet')),
      f(order,
        X3:'Container',
        leftmost:compfunc:'Callable',
        X4:out('Tuple')),
      f(apply, color, X4:'Container', X5:out('Container')),
      f(astuple, 'ONE':a:'Integer', X2:b:'Integer', X6:out('Point')),
      f(rbind, canvas, X6:fixed:'Any', X7:out('Callable')),
      f(apply, X7, X5:'Container', X8:out('Container')),
      f(merge, X8:containers:'ContainerContainer', X9:out('Container')),
      f(dmirror, X9:'Piece', OUT:out('Piece'))
    ].
solve('8eb1be9a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(interval,
        'NEG_TWO':start:'Integer',
        'FOUR':stop:'Integer',
        'ONE':step:'Integer',
        X3:out('Tuple')),
      f(lbind, shift, X2:fixed:'Any', X4:out('Callable')),
      f(height, X2:'Piece', X5:out('Integer')),
      f(rbind, multiply, X5:fixed:'Any', X6:out('Callable')),
      f(apply, X6, X3:'Container', X7:out('Container')),
      f(apply, toivec, X7:'Container', X8:out('Container')),
      f(mapply,
        X4,
        X8:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, IN:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('321b1fc6', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'EIGHT':value:'Integer',
        X2:out('Objects')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(first, X3:'Container', X4:out('Any')),
      f(cover, IN:'Grid', X4:'Patch', X5:out('Grid')),
      f(normalize, X4:'Patch', X6:out('Patch')),
      f(lbind, shift, X6:fixed:'Any', X7:out('Callable')),
      f(apply, ulcorner, X2:'Container', X8:out('Container')),
      f(mapply,
        X7,
        X8:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, X5:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('1caeab9d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X2:out('Indices')),
      f(lowermost, X2:'Patch', X3:out('Integer')),
      f(lbind, subtract, X3:fixed:'Any', X4:out('Callable')),
      f(chain,
        toivec:h:'Callable',
        X4:g:'Callable',
        lowermost:f:'Callable',
        X5:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(merge, X1:containers:'ContainerContainer', X7:out('Container')),
      f(cover, IN:'Grid', X7:'Patch', X8:out('Grid')),
      f(mapply,
        X6,
        X1:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, X8:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('77fdfe62', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(subgrid, X1:'Patch', IN:'Grid', X2:out('Grid')),
      f(replace,
        IN:'Grid',
        'EIGHT':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X3:out('Grid')),
      f(replace,
        X3:'Grid',
        'ONE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X4:out('Grid')),
      f(compress, X4:'Grid', X5:out('Grid')),
      f(width, X2:'Piece', X6:out('Integer')),
      f(halve, X6:n:'Numerical', X7:out('Numerical')),
      f(upscale,
        X5:'Element',
        X7:factor:'Integer',
        X8:out('Element')),
      f(ofcolor, X2:'Grid', 'ZERO':value:'Integer', X9:out('Indices')),
      f(fill,
        X8:'Grid',
        'ZERO':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(c0f76784, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(sfilter,
        X2:'Container',
        square:condition:'Callable',
        X3:out('Container')),
      f(sizefilter, X3:'Container', 'ONE':n:'Integer', X4:out('FrozenSet')),
      f(merge, X4:containers:'ContainerContainer', X5:out('Container')),
      f(argmax, X3:'Container', size:compfunc:'Callable', X6:out('Any')),
      f(merge, X3:containers:'ContainerContainer', X7:out('Container')),
      f(fill,
        IN:'Grid',
        'SEVEN':value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'EIGHT':value:'Integer',
        X6:'Patch',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'SIX':value:'Integer',
        X5:'Patch',
        OUT:out('Grid'))
    ].
solve('1b60fb0c', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X2:out('Indices')),
      f(ofcolor, X1:'Grid', 'ONE':value:'Integer', X3:out('Indices')),
      f(neighbors, (0, 0):loc:'Point', X4:out('Indices')),
      f(mapply,
        neighbors,
        X4:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(lbind, shift, X3:fixed:'Any', X6:out('Callable')),
      f(apply, X6, X5:'Container', X7:out('Container')),
      f(lbind, intersection, X2:fixed:'Any', X8:out('Callable')),
      f(argmax,
        X7:'Container',
        X8:compfunc:'Callable',
        X9:out('Any')),
      f(underfill,
        IN:'Grid',
        'TWO':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(ddf7fa4f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X3:out('Objects')),
      f(product,
        X2:a:'Container',
        X3:b:'Container',
        X4:out('FrozenSet')),
      f(fork,
        vmatching:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X5:out('Callable')),
      f(sfilter,
        X4:'Container',
        X5:condition:'Callable',
        X6:out('Container')),
      f(compose,
        color:outer:'Callable',
        first:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X7:a:'Callable',
        last:b:'Callable',
        X8:out('Callable')),
      f(mapply,
        X8,
        X6:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, IN:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('47c1f68c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(vmirror, IN:'Piece', X2:out('Piece')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X3:out('Objects')),
      f(merge, X3:containers:'ContainerContainer', X4:out('Container')),
      f(mostcolor, X4:'Element', X5:out('Integer')),
      f(cellwise,
        IN:a:'Grid',
        X2:b:'Grid',
        X1:fallback:'Integer',
        X6:out('Grid')),
      f(hmirror, X6:'Piece', X7:out('Piece')),
      f(cellwise,
        X6:a:'Grid',
        X7:b:'Grid',
        X1:fallback:'Integer',
        X8:out('Grid')),
      f(compress, X8:'Grid', X9:out('Grid')),
      f(replace,
        X9:'Grid',
        X1:replacee:'Integer',
        X5:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('6c434453', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'EIGHT':n:'Integer', X2:out('FrozenSet')),
      f(dneighbors, (1, 1):loc:'Point', X3:out('Indices')),
      f(insert,
        (1, 1):value:'Any',
        X3:container:'FrozenSet',
        X4:out('FrozenSet')),
      f(merge, X2:containers:'ContainerContainer', X5:out('Container')),
      f(cover, IN:'Grid', X5:'Patch', X6:out('Grid')),
      f(apply, ulcorner, X2:'Container', X7:out('Container')),
      f(lbind, shift, X4:fixed:'Any', X8:out('Callable')),
      f(mapply,
        X8,
        X7:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        'TWO':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(23581191, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        combine:outer:'Callable',
        vfrontier:a:'Callable',
        hfrontier:b:'Callable',
        X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(mapply,
        X4,
        X1:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(paint, IN:'Grid', X5:obj:'Object', X6:out('Grid')),
      f(fork,
        intersection:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X7:out('Callable')),
      f(apply, X3, X1:'Container', X8:out('Container')),
      f(X7, X8, X9),
      f(fill,
        X6:'Grid',
        'TWO':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(c8cbb738, IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(fgpartition, IN:'Grid', X2:out('Objects')),
      f(valmax,
        X2:'Container',
        shape:compfunc:'Callable',
        X3:out('Integer')),
      f(canvas,
        X1:value:'Integer',
        X3:dimensions:'Point',
        X4:out('Grid')),
      f(apply, normalize, X2:'Container', X5:out('Container')),
      f(lbind, subtract, X3:fixed:'Any', X6:out('Callable')),
      f(chain,
        halve:h:'Callable',
        X6:g:'Callable',
        shape:f:'Callable',
        X7:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(mapply,
        X8,
        X5:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, X4:'Grid', X9:obj:'Object', OUT:out('Grid'))
    ].
solve('3eda0437', IN, OUT) :-
    [ f(interval,
        'TWO':start:'Integer',
        'TEN':stop:'Integer',
        'ONE':step:'Integer',
        X1:out('Tuple')),
      f(prapply, astuple, X1, X1, X2),
      f(lbind, canvas, 'ZERO':fixed:'Any', X3:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X4:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X5:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X5:a:'Callable',
        X4:b:'Callable',
        X6:out('Callable')),
      f(chain,
        X6:h:'Callable',
        asobject:g:'Callable',
        X3:f:'Callable',
        X7:out('Callable')),
      f(mapply,
        X7,
        X2:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(argmax, X8:'Container', size:compfunc:'Callable', X9:out('Any')),
      f(fill,
        IN:'Grid',
        'SIX':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(dc0a314f, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X1:out('Indices')),
      f(replace,
        IN:'Grid',
        'THREE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(dmirror, X2:'Piece', X3:out('Piece')),
      f(papply, pair, X2:a:'Tuple', X3:b:'Tuple', X4:out('Tuple')),
      f(lbind, apply, maximum:fixed:'Any', X5:out('Callable')),
      f(apply, X5, X4:'Container', X6:out('Container')),
      f(cmirror, X6:'Piece', X7:out('Piece')),
      f(papply, pair, X6:a:'Tuple', X7:b:'Tuple', X8:out('Tuple')),
      f(apply, X5, X8:'Container', X9:out('Container')),
      f(subgrid, X1:'Patch', X9:'Grid', OUT:out('Grid'))
    ].
solve(d4469b4b, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(other, X1:'Container', 'ZERO':value:'Any', X2:out('Any')),
      f(equality, X2:a:'Any', 'ONE':b:'Any', returns=X3),
      f(equality, X2:a:'Any', 'TWO':b:'Any', returns=X4),
      f(branch, condition=X3, (1, 1):a:'Any', (2, 2):b:'Any', X5:out('Any')),
      f(branch,
        condition=X4,
        (0, 1):a:'Any',
        X5:b:'Any',
        X6:out('Any')),
      f(fork,
        combine:outer:'Callable',
        vfrontier:a:'Callable',
        hfrontier:b:'Callable',
        X7:out('Callable')),
      f(X7, X6, X8),
      f(canvas, 'ZERO':value:'Integer', (3, 3):dimensions:'Point', X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'FIVE':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve('6ecd11f4', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X4:out('Grid')),
      f(subgrid, X3:'Patch', IN:'Grid', X5:out('Grid')),
      f(width, X4:'Piece', X6:out('Integer')),
      f(width, X5:'Piece', X7:out('Integer')),
      f(divide,
        X6:a:'Numerical',
        X7:b:'Numerical',
        X8:out('Numerical')),
      f(downscale, X4:'Grid', X8:factor:'Integer', X9:out('Grid')),
      f(ofcolor, X9:'Grid', 'ZERO':value:'Integer', X10:out('Indices')),
      f(fill,
        X5:'Grid',
        'ZERO':value:'Integer',
        X10:'Patch',
        OUT:out('Grid'))
    ].
solve('760b3cac', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X2:out('Indices')),
      f(ulcorner, X1:'Patch', X3:out('Point')),
      f(index, IN:'Grid', X3:loc:'Point', X4:out('Integer')),
      f(equality, X4:a:'Any', 'FOUR':b:'Any', returns=X5),
      f(branch, condition=X5, 'NEG_ONE':a:'Any', 'ONE':b:'Any', X6:out('Any')),
      f(multiply,
        X6:a:'Numerical',
        'THREE':b:'Numerical',
        X7:out('Numerical')),
      f(tojvec, X7:j:'Integer', X8:out('Point')),
      f(vmirror, X2:'Piece', X9:out('Piece')),
      f(shift, X9:'Patch', X8:directions:'Point', X10:out('Patch')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X10:'Patch',
        OUT:out('Grid'))
    ].
solve(c444b776, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(argmin, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(backdrop, X3:'Patch', X4:out('Indices')),
      f(toobject, X4:'Patch', IN:'Grid', X5:out('Object')),
      f(normalize, X5:'Patch', X6:out('Patch')),
      f(lbind, shift, X6:fixed:'Any', X7:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        ulcorner:inner:'Callable',
        X8:out('Callable')),
      f(remove, X3:value:'Any', X2:'Container', X9:out('Container')),
      f(mapply,
        X8,
        X9:container:'ContainerContainer',
        X10:out('FrozenSet')),
      f(paint, IN:'Grid', X10:obj:'Object', OUT:out('Grid'))
    ].
solve(d4a91cb9, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(first, X1:'Container', X3:out('Any')),
      f(first, X2:'Container', X4:out('Any')),
      f(last, X3:'Container', X5:out('Any')),
      f(first, X4:'Container', X6:out('Any')),
      f(astuple, X6:a:'Integer', X5:b:'Integer', X7:out('Point')),
      f(connect, X7:a:'Point', X3:b:'Point', X8:out('Indices')),
      f(connect, X7:a:'Point', X4:b:'Point', X9:out('Indices')),
      f(combine,
        X8:a:'Container',
        X9:b:'Container',
        X10:out('Container')),
      f(underfill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X10:'Patch',
        OUT:out('Grid'))
    ].
solve(eb281b96, IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(decrement, X1:x:'Numerical', X3:out('Numerical')),
      f(astuple, X3:a:'Integer', X2:b:'Integer', X4:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X4:dims:'Point',
        X5:out('Grid')),
      f(hmirror, X5:'Piece', X6:out('Piece')),
      f(vconcat, IN:a:'Grid', X6:b:'Grid', X7:out('Grid')),
      f(double, X3:n:'Numerical', X8:out('Numerical')),
      f(astuple, X8:a:'Integer', X2:b:'Integer', X9:out('Point')),
      f(crop,
        X7:'Grid',
        (1, 0):start:'Point',
        X9:dims:'Point',
        X10:out('Grid')),
      f(vconcat, X7:a:'Grid', X10:b:'Grid', OUT:out('Grid'))
    ].
solve(ff28f65a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X2:out('Objects')),
      f(size, X2:'Container', X3:out('Integer')),
      f(double, X3:n:'Numerical', X4:out('Numerical')),
      f(interval,
        'ZERO':start:'Integer',
        X4:stop:'Integer',
        'TWO':step:'Integer',
        X5:out('Tuple')),
      f(apply, tojvec, X5:'Container', X6:out('Container')),
      f(astuple, 'ONE':a:'Integer', 'NINE':b:'Integer', X7:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X7:dimensions:'Point',
        X8:out('Grid')),
      f(fill,
        X8:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        X9:out('Grid')),
      f(hsplit, X9:'Grid', 'THREE':n:'Integer', X10:out('Tuple')),
      f(merge,
        X10:containers:'ContainerContainer',
        OUT:out('Container'))
    ].
solve('7e0986d6', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(replace,
        IN:'Grid',
        X1:replacee:'Integer',
        'ZERO':replacer:'Integer',
        X3:out('Grid')),
      f(leastcolor, X3:'Element', X4:out('Integer')),
      f(rbind, colorcount, X4:fixed:'Any', X5:out('Callable')),
      f(rbind, greater, 'ONE':fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        X5:inner:'Callable',
        X7:out('Callable')),
      f(rbind, toobject, X3:fixed:'Any', X8:out('Callable')),
      f(chain,
        X7:h:'Callable',
        X8:g:'Callable',
        dneighbors:f:'Callable',
        X9:out('Callable')),
      f(sfilter,
        X2:'Container',
        X9:condition:'Callable',
        X10:out('Container')),
      f(fill,
        X3:'Grid',
        X4:value:'Integer',
        X10:'Patch',
        OUT:out('Grid'))
    ].
solve('09629e4f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, subgrid, IN:fixed:'Any', X2:out('Callable')),
      f(apply, X2, X1:'Container', X3:out('Container')),
      f(argmin,
        X3:'Container',
        numcolors:compfunc:'Callable',
        X4:out('Any')),
      f(upscale, X4:'Element', 'FOUR':factor:'Integer', X5:out('Element')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X6:out('Indices')),
      f(shift, X6:'Patch', (1, 1):directions:'Point', X7:out('Patch')),
      f(fill,
        X5:'Grid',
        'FIVE':value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(shape, X8:'Piece', X9:out('Point')),
      f(decrement, X9:x:'Numerical', X10:out('Numerical')),
      f(crop,
        X8:'Grid',
        (1, 1):start:'Point',
        X10:dims:'Point',
        OUT:out('Grid'))
    ].
solve(a85d4709, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(lbind, matcher, last:fixed:'Any', X2:out('Callable')),
      f(lbind, sfilter, X1:fixed:'Any', X3:out('Callable')),
      f(lbind, mapply, hfrontier:fixed:'Any', X4:out('Callable')),
      f(chain,
        X4:h:'Callable',
        X3:g:'Callable',
        X2:f:'Callable',
        X5:out('Callable')),
      f(X5, 'ZERO', X6),
      f(X5, 'TWO', X7),
      f(X5, 'ONE', X8),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        X9:out('Grid')),
      f(fill,
        X9:'Grid',
        'THREE':value:'Integer',
        X7:'Patch',
        X10:out('Grid')),
      f(fill,
        X10:'Grid',
        'FOUR':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(feca6190, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(size, X1:'Container', X2:out('Integer')),
      f(multiply,
        X2:a:'Numerical',
        'FIVE':b:'Numerical',
        X3:out('Numerical')),
      f(astuple, X3:a:'Integer', X3:b:'Integer', X4:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X4:dimensions:'Point',
        X5:out('Grid')),
      f(rbind, shoot, (1, 1):fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        center:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(mapply,
        X8,
        X1:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, X5:'Grid', X9:obj:'Object', X10:out('Grid')),
      f(hmirror, X10:'Piece', OUT:out('Piece'))
    ].
solve(a68b268e, IN, OUT) :-
    [ f(tophalf, IN:'Grid', X1:out('Grid')),
      f(bottomhalf, IN:'Grid', X2:out('Grid')),
      f(lefthalf, X1:'Grid', X3:out('Grid')),
      f(righthalf, X1:'Grid', X4:out('Grid')),
      f(lefthalf, X2:'Grid', X5:out('Grid')),
      f(righthalf, X2:'Grid', X6:out('Grid')),
      f(ofcolor, X4:'Grid', 'FOUR':value:'Integer', X7:out('Indices')),
      f(ofcolor, X3:'Grid', 'SEVEN':value:'Integer', X8:out('Indices')),
      f(ofcolor, X5:'Grid', 'EIGHT':value:'Integer', X9:out('Indices')),
      f(fill,
        X6:'Grid',
        'EIGHT':value:'Integer',
        X9:'Patch',
        X10:out('Grid')),
      f(fill,
        X10:'Grid',
        'FOUR':value:'Integer',
        X7:'Patch',
        X11:out('Grid')),
      f(fill,
        X11:'Grid',
        'SEVEN':value:'Integer',
        X8:'Patch',
        OUT:out('Grid'))
    ].
solve(beb8660c, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(compose,
        invert:outer:'Callable',
        size:inner:'Callable',
        X3:out('Callable')),
      f(order,
        X2:'Container',
        X3:compfunc:'Callable',
        X4:out('Tuple')),
      f(apply, normalize, X4:'Container', X5:out('Container')),
      f(size, X5:'Container', X6:out('Integer')),
      f(interval,
        'ZERO':start:'Integer',
        X6:stop:'Integer',
        'ONE':step:'Integer',
        X7:out('Tuple')),
      f(apply, toivec, X7:'Container', X8:out('Container')),
      f(mpapply, shift, X5:a:'Tuple', X8:b:'Tuple', X9:out('Tuple')),
      f(canvas,
        'ZERO':value:'Integer',
        X1:dimensions:'Point',
        X10:out('Grid')),
      f(paint, X10:'Grid', X9:obj:'Object', X11:out('Grid')),
      f(rot180, X11:'Grid', OUT:out('Grid'))
    ].
solve('913fb3ed', IN, OUT) :-
    [ f(lbind, ofcolor, IN:fixed:'Any', X1:out('Callable')),
      f(lbind, mapply, neighbors:fixed:'Any', X2:out('Callable')),
      f(chain,
        X2:h:'Callable',
        X1:g:'Callable',
        last:f:'Callable',
        X3:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        first:a:'Callable',
        X3:b:'Callable',
        X4:out('Callable')),
      f(astuple, 'SIX':a:'Integer', 'THREE':b:'Integer', X5:out('Point')),
      f(astuple, 'FOUR':a:'Integer', 'EIGHT':b:'Integer', X6:out('Point')),
      f(astuple, 'ONE':a:'Integer', 'TWO':b:'Integer', X7:out('Point')),
      f(initset, X5:value:'Any', X8:out('FrozenSet')),
      f(insert,
        X6:value:'Any',
        X8:container:'FrozenSet',
        X9:out('FrozenSet')),
      f(insert,
        X7:value:'Any',
        X9:container:'FrozenSet',
        X10:out('FrozenSet')),
      f(mapply,
        X4,
        X10:container:'ContainerContainer',
        X11:out('FrozenSet')),
      f(paint, IN:'Grid', X11:obj:'Object', OUT:out('Grid'))
    ].
solve('0962bcdd', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(replace,
        IN:'Grid',
        'ZERO':replacee:'Integer',
        X1:replacer:'Integer',
        X2:out('Grid')),
      f(leastcolor, X2:'Element', X3:out('Integer')),
      f(ofcolor, IN:'Grid', X3:value:'Integer', X4:out('Indices')),
      f(mapply,
        dneighbors,
        X4:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X3:value:'Integer',
        X5:'Patch',
        X6:out('Grid')),
      f(objects,
        X6:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X7:out('Objects')),
      f(fork,
        connect:outer:'Callable',
        ulcorner:a:'Callable',
        lrcorner:b:'Callable',
        X8:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        llcorner:a:'Callable',
        urcorner:b:'Callable',
        X9:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X8:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(mapply,
        X10,
        X7:container:'ContainerContainer',
        X11:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        X1:value:'Integer',
        X11:'Patch',
        OUT:out('Grid'))
    ].
solve('3631a71a', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(replace,
        IN:'Grid',
        'NINE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(lbind, apply, maximum:fixed:'Any', X3:out('Callable')),
      f(dmirror, X2:'Piece', X4:out('Piece')),
      f(papply, pair, X2:a:'Tuple', X4:b:'Tuple', X5:out('Tuple')),
      f(apply, X3, X5:'Container', X6:out('Container')),
      f(subtract,
        X1:a:'Numerical',
        (2, 2):b:'Numerical',
        X7:out('Numerical')),
      f(crop,
        X6:'Grid',
        (2, 2):start:'Point',
        X7:dims:'Point',
        X8:out('Grid')),
      f(vmirror, X8:'Piece', X9:out('Piece')),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X10:out('Objects')),
      f(merge,
        X10:containers:'ContainerContainer',
        X11:out('Container')),
      f(shift, X11:'Patch', (2, 2):directions:'Point', X12:out('Patch')),
      f(paint, X6:'Grid', X12:obj:'Object', OUT:out('Grid'))
    ].
solve(5269061, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(neighbors, (0, 0):loc:'Point', X2:out('Indices')),
      f(mapply,
        neighbors,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(rbind, multiply, 'THREE':fixed:'Any', X4:out('Callable')),
      f(apply, X4, X3:'Container', X5:out('Container')),
      f(merge, X1:containers:'ContainerContainer', X6:out('Container')),
      f(lbind, shift, X6:fixed:'Any', X7:out('Callable')),
      f(mapply,
        X7,
        X5:container:'ContainerContainer',
        X8:out('FrozenSet')),
      f(shift, X8:'Patch', (-1, 1):directions:'Point', X9:out('Patch')),
      f(shift, X8:'Patch', (1, -1):directions:'Point', X10:out('Patch')),
      f(paint, IN:'Grid', X8:obj:'Object', X11:out('Grid')),
      f(paint, X11:'Grid', X9:obj:'Object', X12:out('Grid')),
      f(paint, X12:'Grid', X10:obj:'Object', OUT:out('Grid'))
    ].
solve(95990924, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(apply, ulcorner, X1:'Container', X2:out('Container')),
      f(apply, urcorner, X1:'Container', X3:out('Container')),
      f(apply, llcorner, X1:'Container', X4:out('Container')),
      f(apply, lrcorner, X1:'Container', X5:out('Container')),
      f(shift, X2:'Patch', (-1, -1):directions:'Point', X6:out('Patch')),
      f(shift, X3:'Patch', (-1, 1):directions:'Point', X7:out('Patch')),
      f(shift, X4:'Patch', (1, -1):directions:'Point', X8:out('Patch')),
      f(shift, X5:'Patch', (1, 1):directions:'Point', X9:out('Patch')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        X10:out('Grid')),
      f(fill,
        X10:'Grid',
        'TWO':value:'Integer',
        X7:'Patch',
        X11:out('Grid')),
      f(fill,
        X11:'Grid',
        'THREE':value:'Integer',
        X8:'Patch',
        X12:out('Grid')),
      f(fill,
        X12:'Grid',
        'FOUR':value:'Integer',
        X9:'Patch',
        OUT:out('Grid'))
    ].
solve(e509e548, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, subgrid, IN:fixed:'Any', X2:out('Callable')),
      f(chain,
        palette:h:'Callable',
        trim:g:'Callable',
        X2:f:'Callable',
        X3:out('Callable')),
      f(lbind, contained, 'THREE':fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        X3:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        add:outer:'Callable',
        height:a:'Callable',
        width:b:'Callable',
        X6:out('Callable')),
      f(compose,
        decrement:outer:'Callable',
        X6:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        size:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(mfilter, X1:'Container', X5, X9:out('FrozenSet')),
      f(mfilter, X1:'Container', X8, X10:out('FrozenSet')),
      f(replace,
        IN:'Grid',
        'THREE':replacee:'Integer',
        'SIX':replacer:'Integer',
        X11:out('Grid')),
      f(fill,
        X11:'Grid',
        'TWO':value:'Integer',
        X9:'Patch',
        X12:out('Grid')),
      f(fill,
        X12:'Grid',
        'ONE':value:'Integer',
        X10:'Patch',
        OUT:out('Grid'))
    ].
solve(d43fd935, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X2:out('Indices')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X3:out('FrozenSet')),
      f(rbind, vmatching, X2:fixed:'Any', X4:out('Callable')),
      f(rbind, hmatching, X2:fixed:'Any', X5:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X4:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X3:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(rbind, gravitate, X2:fixed:'Any', X8:out('Callable')),
      f(fork,
        add:outer:'Callable',
        center:a:'Callable',
        X8:b:'Callable',
        X9:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        center:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(mapply,
        X11,
        X7:container:'ContainerContainer',
        X12:out('FrozenSet')),
      f(paint, IN:'Grid', X12:obj:'Object', OUT:out('Grid'))
    ].
solve(db3e9e38, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'SEVEN':value:'Integer', X1:out('Indices')),
      f(lrcorner, X1:'Patch', X2:out('Point')),
      f(shoot,
        X2:start:'Point',
        (-1, 1):direction:'Point',
        X3:out('Indices')),
      f(shoot,
        X2:start:'Point',
        (-1, -1):direction:'Point',
        X4:out('Indices')),
      f(combine,
        X3:a:'Container',
        X4:b:'Container',
        X5:out('Container')),
      f(rbind, shoot, (-1, 0):fixed:'Any', X6:out('Callable')),
      f(mapply,
        X6,
        X5:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(last, X2:'Container', X8:out('Any')),
      f(rbind, subtract, X8:fixed:'Any', X9:out('Callable')),
      f(chain,
        even:h:'Callable',
        X9:g:'Callable',
        last:f:'Callable',
        X10:out('Callable')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X7:'Patch',
        X11:out('Grid')),
      f(sfilter,
        X7:'Container',
        X10:condition:'Callable',
        X12:out('Container')),
      f(fill,
        X11:'Grid',
        'SEVEN':value:'Integer',
        X12:'Patch',
        OUT:out('Grid'))
    ].
solve(e73095fd, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(fork,
        equality:outer:'Callable',
        toindices:a:'Callable',
        backdrop:b:'Callable',
        X3:out('Callable')),
      f(sfilter,
        X2:'Container',
        X3:condition:'Callable',
        X4:out('Container')),
      f(lbind, mapply, dneighbors:fixed:'Any', X5:out('Callable')),
      f(chain,
        X5:h:'Callable',
        corners:g:'Callable',
        outbox:f:'Callable',
        X6:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        X6:a:'Callable',
        outbox:b:'Callable',
        X7:out('Callable')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X8:out('Indices')),
      f(rbind, intersection, X8:fixed:'Any', X9:out('Callable')),
      f(matcher, size, 'ZERO':target:'Any', X10:out('Callable')),
      f(chain,
        X10:h:'Callable',
        X9:g:'Callable',
        X7:f:'Callable',
        X11:out('Callable')),
      f(mfilter, X4:'Container', X11, X12:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X12:'Patch',
        OUT:out('Grid'))
    ].
solve('1bfc4729', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(tophalf, IN:'Grid', X2:out('Grid')),
      f(bottomhalf, IN:'Grid', X3:out('Grid')),
      f(leastcolor, X2:'Element', X4:out('Integer')),
      f(leastcolor, X3:'Element', X5:out('Integer')),
      f(ofcolor, X2:'Grid', X4:value:'Integer', X6:out('Indices')),
      f(first, X6:'Container', X7:out('Any')),
      f(hfrontier, X7:location:'Point', X8:out('Indices')),
      f(box, X1:'Patch', X9:out('Indices')),
      f(combine,
        X8:a:'Container',
        X9:b:'Container',
        X10:out('Container')),
      f(fill,
        X2:'Grid',
        X4:value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(hmirror, X11:'Piece', X12:out('Piece')),
      f(replace,
        X12:'Grid',
        X4:replacee:'Integer',
        X5:replacer:'Integer',
        X13:out('Grid')),
      f(vconcat, X11:a:'Grid', X13:b:'Grid', OUT:out('Grid'))
    ].
solve('93b581b8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(dmirror, X2:'Piece', X3:out('Piece')),
      f(cmirror, X3:'Piece', X4:out('Piece')),
      f(upscale, X4:'Element', 'THREE':factor:'Integer', X5:out('Element')),
      f(astuple, 'NEG_TWO':a:'Integer', 'NEG_TWO':b:'Integer', X6:out('Point')),
      f(shift, X5:'Patch', X6:directions:'Point', X7:out('Patch')),
      f(underpaint, IN:'Grid', X7:obj:'Object', X8:out('Grid')),
      f(toindices, X2:'Patch', X9:out('Indices')),
      f(mapply,
        vfrontier,
        X9:container:'ContainerContainer',
        X10:out('FrozenSet')),
      f(mapply,
        hfrontier,
        X9:container:'ContainerContainer',
        X11:out('FrozenSet')),
      f(combine,
        X10:a:'Container',
        X11:b:'Container',
        X12:out('Container')),
      f(fill,
        X8:'Grid',
        'ZERO':value:'Integer',
        X12:'Patch',
        X13:out('Grid')),
      f(paint, X13:'Grid', X2:obj:'Object', OUT:out('Grid'))
    ].
solve('9edfc990', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X3:out('Indices')),
      f(rbind, adjacent, X3:fixed:'Any', X4:out('Callable')),
      f(mfilter, X2:'Container', X4, X5:out('FrozenSet')),
      f(recolor, 'ONE':value:'Integer', X5:'Patch', X6:out('Object')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(add, 'NINE':a:'Numerical', 'FOUR':b:'Numerical', X8:out('Numerical')),
      f(astuple, 'SIX':a:'Integer', X8:b:'Integer', X9:out('Point')),
      f(initset, X9:value:'Any', X10:out('FrozenSet')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(index, X7:'Grid', X9:loc:'Point', X12:out('Integer')),
      f(equality, X12:a:'Any', 'ONE':b:'Any', returns=X13),
      f(branch,
        condition=X13,
        X11:a:'Any',
        X7:b:'Any',
        OUT:out('Any'))
    ].
solve(a65b410d, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(urcorner, X1:'Patch', X2:out('Point')),
      f(add, X2:a:'Numerical', (-1, 1):b:'Numerical', X3:out('Numerical')),
      f(add, X2:a:'Numerical', (1, -1):b:'Numerical', X4:out('Numerical')),
      f(shoot,
        X3:start:'Point',
        (-1, 1):direction:'Point',
        X5:out('Indices')),
      f(shoot,
        X4:start:'Point',
        (1, -1):direction:'Point',
        X6:out('Indices')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X5:'Patch',
        X7:out('Grid')),
      f(fill,
        X7:'Grid',
        'ONE':value:'Integer',
        X6:'Patch',
        X8:out('Grid')),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X9:out('Objects')),
      f(rbind, shoot, (0, -1):fixed:'Any', X10:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        urcorner:inner:'Callable',
        X11:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X11:b:'Callable',
        X12:out('Callable')),
      f(mapply,
        X12,
        X9:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(paint, X8:'Grid', X13:obj:'Object', OUT:out('Grid'))
    ].
solve('7447852a', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(compose,
        last:outer:'Callable',
        center:inner:'Callable',
        X3:out('Callable')),
      f(order,
        X2:'Container',
        X3:compfunc:'Callable',
        X4:out('Tuple')),
      f(size, X4:'Container', X5:out('Integer')),
      f(interval,
        'ZERO':start:'Integer',
        X5:stop:'Integer',
        'THREE':step:'Integer',
        X6:out('Tuple')),
      f(rbind, contained, X6:fixed:'Any', X7:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        last:inner:'Callable',
        X8:out('Callable')),
      f(interval,
        'ZERO':start:'Integer',
        X5:stop:'Integer',
        'ONE':step:'Integer',
        X9:out('Tuple')),
      f(pair, X4:a:'Tuple', X9:b:'Tuple', X10:out('TupleTuple')),
      f(sfilter,
        X10:'Container',
        X8:condition:'Callable',
        X11:out('Container')),
      f(mapply,
        first,
        X11:container:'ContainerContainer',
        X12:out('FrozenSet')),
      f(recolor, 'FOUR':value:'Integer', X12:'Patch', X13:out('Object')),
      f(paint, IN:'Grid', X13:obj:'Object', OUT:out('Grid'))
    ].
solve(97999447, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(apply, toindices, X1:'Container', X2:out('Container')),
      f(rbind, shoot, (0, 1):fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        center:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X1:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(interval,
        'ZERO':start:'Integer',
        'FIVE':stop:'Integer',
        'ONE':step:'Integer',
        X8:out('Tuple')),
      f(apply, double, X8:'Container', X9:out('Container')),
      f(apply, increment, X9:'Container', X10:out('Container')),
      f(apply, tojvec, X10:'Container', X11:out('Container')),
      f(prapply, shift, X2, X11, X12),
      f(merge,
        X12:containers:'ContainerContainer',
        X13:out('Container')),
      f(fill,
        X7:'Grid',
        'FIVE':value:'Integer',
        X13:'Patch',
        OUT:out('Grid'))
    ].
solve('91714a58', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(asindices, IN:'Grid', X2:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:out('Objects')),
      f(argmax, X3:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(mostcolor, X4:'Element', X5:out('Integer')),
      f(canvas,
        'ZERO':value:'Integer',
        X1:dimensions:'Point',
        X6:out('Grid')),
      f(paint, X6:'Grid', X4:obj:'Object', X7:out('Grid')),
      f(rbind, toobject, X7:fixed:'Any', X8:out('Callable')),
      f(rbind, colorcount, X5:fixed:'Any', X9:out('Callable')),
      f(chain,
        X9:h:'Callable',
        X8:g:'Callable',
        neighbors:f:'Callable',
        X10:out('Callable')),
      f(lbind, greater, 'THREE':fixed:'Any', X11:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        X10:inner:'Callable',
        X12:out('Callable')),
      f(sfilter,
        X2:'Container',
        X12:condition:'Callable',
        X13:out('Container')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X13:'Patch',
        OUT:out('Grid'))
    ].
solve(a61ba2ce, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, index, IN:fixed:'Any', X2:out('Callable')),
      f(matcher, X2, 'ZERO':target:'Any', X3:out('Callable')),
      f(lbind, extract, X1:fixed:'Any', X4:out('Callable')),
      f(rbind, subgrid, IN:fixed:'Any', X5:out('Callable')),
      f(lbind, compose, X3:fixed:'Any', X6:out('Callable')),
      f(chain,
        X5:h:'Callable',
        X4:g:'Callable',
        X6:f:'Callable',
        X7:out('Callable')),
      f(X7, ulcorner, X8),
      f(X7, urcorner, X9),
      f(X7, llcorner, X10),
      f(X7, lrcorner, X11),
      f(hconcat, X11:a:'Grid', X10:b:'Grid', X12:out('Grid')),
      f(hconcat, X9:a:'Grid', X8:b:'Grid', X13:out('Grid')),
      f(vconcat, X12:a:'Grid', X13:b:'Grid', OUT:out('Grid'))
    ].
solve('8e1813be', IN, OUT) :-
    [ f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X1:out('Grid')),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(vline, X3:'Patch', returns=X4),
      f(branch,
        condition=X4,
        dmirror:a:'Any',
        identity:b:'Any',
        X5:out('Any')),
      f(X5, X1, X6),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X7:out('Objects')),
      f(order,
        X7:'Container',
        uppermost:compfunc:'Callable',
        X8:out('Tuple')),
      f(apply, color, X8:'Container', X9:out('Container')),
      f(dedupe, X9:tup:'Tuple', X10:out('Tuple')),
      f(size, X10:'Container', X11:out('Integer')),
      f(rbind, repeat, X11:fixed:'Any', X12:out('Callable')),
      f(apply, X12, X10:'Container', X13:out('Container')),
      f(X5, X13, OUT)
    ].
solve(bc1d5164, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (3, 3):dims:'Point',
        X2:out('Grid')),
      f(crop,
        IN:'Grid',
        (2, 0):start:'Point',
        (3, 3):dims:'Point',
        X3:out('Grid')),
      f(tojvec, 'FOUR':j:'Integer', X4:out('Point')),
      f(crop,
        IN:'Grid',
        X4:start:'Point',
        (3, 3):dims:'Point',
        X5:out('Grid')),
      f(astuple, 'TWO':a:'Integer', 'FOUR':b:'Integer', X6:out('Point')),
      f(crop,
        IN:'Grid',
        X6:start:'Point',
        (3, 3):dims:'Point',
        X7:out('Grid')),
      f(canvas, 'ZERO':value:'Integer', (3, 3):dimensions:'Point', X8:out('Grid')),
      f(rbind, ofcolor, X1:fixed:'Any', X9:out('Callable')),
      f(astuple, X2:a:'Integer', X3:b:'Integer', X10:out('Point')),
      f(astuple, X5:a:'Integer', X7:b:'Integer', X11:out('Point')),
      f(combine,
        X10:a:'Container',
        X11:b:'Container',
        X12:out('Container')),
      f(mapply,
        X9,
        X12:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(fill,
        X8:'Grid',
        X1:value:'Integer',
        X13:'Patch',
        OUT:out('Grid'))
    ].
solve(ce602527, IN, OUT) :-
    [ f(vmirror, IN:'Piece', X1:out('Piece')),
      f(fgpartition, X1:'Grid', X2:out('Objects')),
      f(order, X2:'Container', size:compfunc:'Callable', X3:out('Tuple')),
      f(last, X3:'Container', X4:out('Any')),
      f(remove, X4:value:'Any', X3:'Container', X5:out('Container')),
      f(compose,
        toindices:outer:'Callable',
        normalize:inner:'Callable',
        X6:out('Callable')),
      f(rbind, upscale, 'TWO':fixed:'Any', X7:out('Callable')),
      f(chain,
        toindices:h:'Callable',
        X7:g:'Callable',
        normalize:f:'Callable',
        X8:out('Callable')),
      f(X6, X4, X9),
      f(rbind, intersection, X9:fixed:'Any', X10:out('Callable')),
      f(chain,
        size:h:'Callable',
        X10:g:'Callable',
        X8:f:'Callable',
        X11:out('Callable')),
      f(argmax,
        X5:'Container',
        X11:compfunc:'Callable',
        X12:out('Any')),
      f(subgrid, X12:'Patch', X1:'Grid', X13:out('Grid')),
      f(vmirror, X13:'Piece', OUT:out('Piece'))
    ].
solve('5c2c9af4', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X2:out('Indices')),
      f(center, X2:'Patch', X3:out('Point')),
      f(ulcorner, X2:'Patch', X4:out('Point')),
      f(subtract,
        X3:a:'Numerical',
        X4:b:'Numerical',
        X5:out('Numerical')),
      f(multiply, 'NEG_ONE':a:'Numerical', 'NINE':b:'Numerical', X6:out('Numerical')),
      f(interval,
        'ZERO':start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X7:out('Tuple')),
      f(interval,
        'ZERO':start:'Integer',
        X6:stop:'Integer',
        'NEG_ONE':step:'Integer',
        X8:out('Tuple')),
      f(lbind, multiply, X5:fixed:'Any', X9:out('Callable')),
      f(apply, X9, X7:'Container', X10:out('Container')),
      f(apply, X9, X8:'Container', X11:out('Container')),
      f(pair, X10:a:'Tuple', X11:b:'Tuple', X12:out('TupleTuple')),
      f(mapply,
        box,
        X12:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(shift, X13:'Patch', X3:directions:'Point', X14:out('Patch')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X14:'Patch',
        OUT:out('Grid'))
    ].
solve('75b8110e', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(tophalf, X1:'Grid', X3:out('Grid')),
      f(bottomhalf, X1:'Grid', X4:out('Grid')),
      f(tophalf, X2:'Grid', X5:out('Grid')),
      f(bottomhalf, X2:'Grid', X6:out('Grid')),
      f(rbind, ofcolor, 'ZERO':fixed:'Any', X7:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        asindices:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(fork,
        toobject:outer:'Callable',
        X8:a:'Callable',
        identity:b:'Callable',
        X9:out('Callable')),
      f(X9, X5, X10),
      f(X9, X4, X11),
      f(X9, X6, X12),
      f(paint, X3:'Grid', X12:obj:'Object', X13:out('Grid')),
      f(paint, X13:'Grid', X11:obj:'Object', X14:out('Grid')),
      f(paint, X14:'Grid', X10:obj:'Object', OUT:out('Grid'))
    ].
solve('941d9a10', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(colorfilter,
        X2:objs:'Objects',
        'ZERO':value:'Integer',
        X3:out('Objects')),
      f(apply, toindices, X3:'Container', X4:out('Container')),
      f(lbind, lbind, contained:fixed:'Any', X5:out('Callable')),
      f(lbind, extract, X4:fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        X5:inner:'Callable',
        X7:out('Callable')),
      f(decrement, X1:x:'Numerical', X8:out('Numerical')),
      f(astuple, 'FIVE':a:'Integer', 'FIVE':b:'Integer', X9:out('Point')),
      f(X7, (0, 0), X10),
      f(X7, X8, X11),
      f(X7, X9, X12),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X10:'Patch',
        X13:out('Grid')),
      f(fill,
        X13:'Grid',
        'THREE':value:'Integer',
        X11:'Patch',
        X14:out('Grid')),
      f(fill,
        X14:'Grid',
        'TWO':value:'Integer',
        X12:'Patch',
        OUT:out('Grid'))
    ].
solve(c3f564a4, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(dmirror, IN:'Piece', X2:out('Piece')),
      f(invert, 'NINE':n:'Numerical', X3:out('Numerical')),
      f(papply, pair, IN:a:'Tuple', X2:b:'Tuple', X4:out('Tuple')),
      f(lbind, apply, maximum:fixed:'Any', X5:out('Callable')),
      f(apply, X5, X4:'Container', X6:out('Container')),
      f(ofcolor, X6:'Grid', 'ZERO':value:'Integer', X7:out('Indices')),
      f(difference,
        X1:a:'FrozenSet',
        X7:b:'FrozenSet',
        X8:out('FrozenSet')),
      f(toobject, X8:'Patch', X6:'Grid', X9:out('Object')),
      f(interval,
        X3:start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X10:out('Tuple')),
      f(interval,
        'NINE':start:'Integer',
        X3:stop:'Integer',
        'NEG_ONE':step:'Integer',
        X11:out('Tuple')),
      f(pair, X10:a:'Tuple', X11:b:'Tuple', X12:out('TupleTuple')),
      f(lbind, shift, X9:fixed:'Any', X13:out('Callable')),
      f(mapply,
        X13,
        X12:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(paint, X6:'Grid', X14:obj:'Object', OUT:out('Grid'))
    ].
solve('1a07d186', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(apply, color, X3:'Container', X4:out('Container')),
      f(rbind, contained, X4:fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        color:inner:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X2:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(lbind, colorfilter, X3:fixed:'Any', X8:out('Callable')),
      f(chain,
        first:h:'Callable',
        X8:g:'Callable',
        color:f:'Callable',
        X9:out('Callable')),
      f(fork,
        gravitate:outer:'Callable',
        identity:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(mapply,
        X11,
        X7:container:'ContainerContainer',
        X12:out('FrozenSet')),
      f(merge, X2:containers:'ContainerContainer', X13:out('Container')),
      f(cover, IN:'Grid', X13:'Patch', X14:out('Grid')),
      f(paint, X14:'Grid', X12:obj:'Object', OUT:out('Grid'))
    ].
solve(d687bc17, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X3:out('FrozenSet')),
      f(apply, color, X3:'Container', X4:out('Container')),
      f(rbind, contained, X4:fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        color:inner:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X2:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(lbind, colorfilter, X3:fixed:'Any', X8:out('Callable')),
      f(chain,
        first:h:'Callable',
        X8:g:'Callable',
        color:f:'Callable',
        X9:out('Callable')),
      f(fork,
        gravitate:outer:'Callable',
        identity:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(merge, X2:containers:'ContainerContainer', X12:out('Container')),
      f(mapply,
        X11,
        X7:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(cover, IN:'Grid', X12:'Patch', X14:out('Grid')),
      f(paint, X14:'Grid', X13:obj:'Object', OUT:out('Grid'))
    ].
solve('9af7a82c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(order, X1:'Container', size:compfunc:'Callable', X2:out('Tuple')),
      f(valmax,
        X1:'Container',
        size:compfunc:'Callable',
        X3:out('Integer')),
      f(rbind, astuple, 'ONE':fixed:'Any', X4:out('Callable')),
      f(lbind, subtract, X3:fixed:'Any', X5:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        size:inner:'Callable',
        X6:out('Callable')),
      f(chain,
        X4:h:'Callable',
        X5:g:'Callable',
        size:f:'Callable',
        X7:out('Callable')),
      f(fork,
        canvas:outer:'Callable',
        color:a:'Callable',
        X6:b:'Callable',
        X8:out('Callable')),
      f(lbind, canvas, 'ZERO':fixed:'Any', X9:out('Callable')),
      f(compose,
        X9:outer:'Callable',
        X7:inner:'Callable',
        X10:out('Callable')),
      f(fork,
        vconcat:outer:'Callable',
        X8:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(compose,
        cmirror:outer:'Callable',
        X11:inner:'Callable',
        X12:out('Callable')),
      f(apply, X12, X2:'Container', X13:out('Container')),
      f(merge,
        X13:containers:'ContainerContainer',
        X14:out('Container')),
      f(cmirror, X14:'Piece', OUT:out('Piece'))
    ].
solve('6e19193c', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(rbind, toobject, IN:fixed:'Any', X3:out('Callable')),
      f(compose,
        first:outer:'Callable',
        delta:inner:'Callable',
        X4:out('Callable')),
      f(rbind, colorcount, X1:fixed:'Any', X5:out('Callable')),
      f(matcher, X5, 'TWO':target:'Any', X6:out('Callable')),
      f(chain,
        X6:h:'Callable',
        X3:g:'Callable',
        dneighbors:f:'Callable',
        X7:out('Callable')),
      f(rbind, sfilter, X7:fixed:'Any', X8:out('Callable')),
      f(chain,
        first:h:'Callable',
        X8:g:'Callable',
        toindices:f:'Callable',
        X9:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X4:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(fork,
        shoot:outer:'Callable',
        X4:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(mapply,
        X11,
        X2:container:'ContainerContainer',
        X12:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X12:'Patch',
        X13:out('Grid')),
      f(mapply,
        delta,
        X2:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(fill,
        X13:'Grid',
        'ZERO':value:'Integer',
        X14:'Patch',
        OUT:out('Grid'))
    ].
solve(ef135b50, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X2:out('Indices')),
      f(product,
        X1:a:'Container',
        X1:b:'Container',
        X3:out('FrozenSet')),
      f(power, first, 'TWO':n:'Integer', X4:out('Callable')),
      f(compose,
        first:outer:'Callable',
        last:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X4:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X3:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(fork,
        connect:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X8:out('Callable')),
      f(mapply,
        X8,
        X7:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(intersection,
        X9:a:'FrozenSet',
        X2:b:'FrozenSet',
        X10:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'NINE':value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(trim, X11:'Grid', X12:out('Grid')),
      f(asobject, X12:'Grid', X13:out('Object')),
      f(shift, X13:'Patch', (1, 1):directions:'Point', X14:out('Patch')),
      f(paint, IN:'Grid', X14:obj:'Object', OUT:out('Grid'))
    ].
solve(cbded52d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(product,
        X2:a:'Container',
        X2:b:'Container',
        X3:out('FrozenSet')),
      f(fork,
        vmatching:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X4:out('Callable')),
      f(fork,
        hmatching:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X5:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X4:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(sfilter,
        X3:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(compose,
        center:outer:'Callable',
        first:inner:'Callable',
        X8:out('Callable')),
      f(compose,
        center:outer:'Callable',
        last:inner:'Callable',
        X9:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X8:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(chain,
        initset:h:'Callable',
        center:g:'Callable',
        X10:f:'Callable',
        X11:out('Callable')),
      f(compose,
        color:outer:'Callable',
        first:inner:'Callable',
        X12:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X12:a:'Callable',
        X11:b:'Callable',
        X13:out('Callable')),
      f(mapply,
        X13,
        X7:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(paint, IN:'Grid', X14:obj:'Object', OUT:out('Grid'))
    ].
solve('8a004b2b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X2:out('Indices')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(argmax,
        X1:'Container',
        lowermost:compfunc:'Callable',
        X4:out('Any')),
      f(normalize, X4:'Patch', X5:out('Patch')),
      f(replace,
        X3:'Grid',
        'FOUR':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X6:out('Grid')),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X7:out('Objects')),
      f(merge, X7:containers:'ContainerContainer', X8:out('Container')),
      f(width, X8:'Piece', X9:out('Integer')),
      f(ulcorner, X8:'Patch', X10:out('Point')),
      f(width, X4:'Piece', X11:out('Integer')),
      f(divide,
        X9:a:'Numerical',
        X11:b:'Numerical',
        X12:out('Numerical')),
      f(upscale,
        X5:'Element',
        X12:factor:'Integer',
        X13:out('Element')),
      f(shift, X13:'Patch', X10:directions:'Point', X14:out('Patch')),
      f(paint, X3:'Grid', X14:obj:'Object', OUT:out('Grid'))
    ].
solve(e26a3af2, IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(apply, mostcommon, IN:'Container', X2:out('Container')),
      f(apply, mostcommon, X1:'Container', X3:out('Container')),
      f(repeat, X2:item:'Any', 'ONE':num:'Integer', X4:out('Tuple')),
      f(repeat, X3:item:'Any', 'ONE':num:'Integer', X5:out('Tuple')),
      f(compose,
        size:outer:'Callable',
        dedupe:inner:'Callable',
        X6:out('Callable')),
      f(X6, X2, X7),
      f(X6, X3, X8),
      f(greater, X8:a:'Integer', X7:b:'Integer', returns=X9),
      f(branch,
        condition=X9,
        height:a:'Any',
        width:b:'Any',
        X10:out('Any')),
      f(X10, IN, X11),
      f(rot90, X4:'Grid', X12:out('Grid')),
      f(branch,
        condition=X9,
        X5:a:'Any',
        X12:b:'Any',
        X13:out('Any')),
      f(branch,
        condition=X9,
        vupscale:a:'Any',
        hupscale:b:'Any',
        X14:out('Any')),
      f(X14, X13, X11, OUT)
    ].
solve('6cf79266', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X1:out('Indices')),
      f(astuple, 'ZERO':a:'Integer', (0, 0):b:'Integer', X2:out('Point')),
      f(initset, X2:value:'Any', X3:out('FrozenSet')),
      f(upscale, X3:'Element', 'THREE':factor:'Integer', X4:out('Element')),
      f(toindices, X4:'Patch', X5:out('Indices')),
      f(lbind, shift, X5:fixed:'Any', X6:out('Callable')),
      f(rbind, difference, X1:fixed:'Any', X7:out('Callable')),
      f(chain,
        size:h:'Callable',
        X7:g:'Callable',
        X6:f:'Callable',
        X8:out('Callable')),
      f(matcher, X8, 'ZERO':target:'Any', X9:out('Callable')),
      f(lbind, add, (-1, -1):fixed:'Any', X10:out('Callable')),
      f(chain,
        flip:h:'Callable',
        X9:g:'Callable',
        X10:f:'Callable',
        X11:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X9:a:'Callable',
        X11:b:'Callable',
        X12:out('Callable')),
      f(sfilter,
        X1:'Container',
        X12:condition:'Callable',
        X13:out('Container')),
      f(mapply,
        X6,
        X13:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X14:'Patch',
        OUT:out('Grid'))
    ].
solve(a87f7484, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(dmirror, IN:'Piece', X2:out('Piece')),
      f(portrait, IN:'Piece', returns=X3),
      f(branch,
        condition=X3,
        X2:a:'Any',
        IN:b:'Any',
        X4:out('Any')),
      f(size, X1:'Container', X5:out('Integer')),
      f(decrement, X5:x:'Numerical', X6:out('Numerical')),
      f(hsplit, X4:'Grid', X6:n:'Integer', X7:out('Tuple')),
      f(rbind, ofcolor, 'ZERO':fixed:'Any', X8:out('Callable')),
      f(apply, X8, X7:'Container', X9:out('Container')),
      f(mostcommon, X9:'Container', X10:out('Any')),
      f(matcher, X8, X10:target:'Any', X11:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X11:inner:'Callable',
        X12:out('Callable')),
      f(extract,
        X7:'Container',
        X12:condition:'Callable',
        X13:out('Any')),
      f(dmirror, X13:'Piece', X14:out('Piece')),
      f(branch,
        condition=X3,
        X14:a:'Any',
        X13:b:'Any',
        OUT:out('Any'))
    ].
solve('4093f84a', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(replace,
        IN:'Grid',
        X1:replacee:'Integer',
        'FIVE':replacer:'Integer',
        X2:out('Grid')),
      f(rot270, X2:'Grid', X3:out('Grid')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X4:out('Indices')),
      f(portrait, X4:'Piece', returns=X5),
      f(branch,
        condition=X5,
        X2:a:'Any',
        X3:b:'Any',
        X6:out('Any')),
      f(lefthalf, X6:'Grid', X7:out('Grid')),
      f(righthalf, X6:'Grid', X8:out('Grid')),
      f(rbind, order, identity:fixed:'Any', X9:out('Callable')),
      f(rbind, order, invert:fixed:'Any', X10:out('Callable')),
      f(apply, X9, X7:'Container', X11:out('Container')),
      f(apply, X10, X8:'Container', X12:out('Container')),
      f(hconcat, X11:a:'Grid', X12:b:'Grid', X13:out('Grid')),
      f(rot90, X13:'Grid', X14:out('Grid')),
      f(branch,
        condition=X5,
        X13:a:'Any',
        X14:b:'Any',
        OUT:out('Any'))
    ].
solve(ba26e723, IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(hsplit, IN:'Grid', X1:n:'Integer', X2:out('Tuple')),
      f(interval,
        'ZERO':start:'Integer',
        X1:stop:'Integer',
        'ONE':step:'Integer',
        X3:out('Tuple')),
      f(rbind, divide, 'THREE':fixed:'Any', X4:out('Callable')),
      f(rbind, multiply, 'THREE':fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        X4:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(apply, X7, X3:'Container', X8:out('Container')),
      f(rbind, ofcolor, 'FOUR':fixed:'Any', X9:out('Callable')),
      f(apply, X9, X2:'Container', X10:out('Container')),
      f(apply, tojvec, X3:'Container', X11:out('Container')),
      f(papply, shift, X10:a:'Tuple', X11:b:'Tuple', X12:out('Tuple')),
      f(pair, X8:a:'Tuple', X12:b:'Tuple', X13:out('TupleTuple')),
      f(sfilter,
        X13:'Container',
        first:condition:'Callable',
        X14:out('Container')),
      f(mapply,
        last,
        X14:container:'ContainerContainer',
        X15:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'SIX':value:'Integer',
        X15:'Patch',
        OUT:out('Grid'))
    ].
solve('4612dd53', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X1:out('Indices')),
      f(box, X1:'Patch', X2:out('Indices')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X2:'Patch',
        X3:out('Grid')),
      f(subgrid, X1:'Patch', X3:'Grid', X4:out('Grid')),
      f(ofcolor, X4:'Grid', 'ONE':value:'Integer', X5:out('Indices')),
      f(mapply,
        vfrontier,
        X5:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(mapply,
        hfrontier,
        X5:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(size, X6:'Container', X8:out('Integer')),
      f(size, X7:'Container', X9:out('Integer')),
      f(greater, X8:a:'Integer', X9:b:'Integer', returns=X10),
      f(branch,
        condition=X10,
        X7:a:'Any',
        X6:b:'Any',
        X11:out('Any')),
      f(fill,
        X4:'Grid',
        'TWO':value:'Integer',
        X11:'Patch',
        X12:out('Grid')),
      f(ofcolor, X12:'Grid', 'TWO':value:'Integer', X13:out('Indices')),
      f(ulcorner, X1:'Patch', X14:out('Point')),
      f(shift, X13:'Patch', X14:directions:'Point', X15:out('Patch')),
      f(underfill,
        IN:'Grid',
        'TWO':value:'Integer',
        X15:'Patch',
        OUT:out('Grid'))
    ].
solve('29c11459', IN, OUT) :-
    [ f(lefthalf, IN:'Grid', X1:out('Grid')),
      f(righthalf, IN:'Grid', X2:out('Grid')),
      f(objects,
        X2:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:out('Objects')),
      f(objects,
        X1:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:out('Objects')),
      f(compose,
        hfrontier:outer:'Callable',
        center:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(mapply,
        X6,
        X4:container:'ContainerContainer',
        X7:out('FrozenSet')),
      f(paint, X1:'Grid', X7:obj:'Object', X8:out('Grid')),
      f(mapply,
        X6,
        X3:container:'ContainerContainer',
        X9:out('FrozenSet')),
      f(paint, IN:'Grid', X9:obj:'Object', X10:out('Grid')),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X11:out('Objects')),
      f(apply, urcorner, X11:'Container', X12:out('Container')),
      f(shift, X12:'Patch', (0, 1):directions:'Point', X13:out('Patch')),
      f(merge,
        X11:containers:'ContainerContainer',
        X14:out('Container')),
      f(paint, X10:'Grid', X14:obj:'Object', X15:out('Grid')),
      f(fill,
        X15:'Grid',
        'FIVE':value:'Integer',
        X13:'Patch',
        OUT:out('Grid'))
    ].
solve('963e52fc', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(asobject, IN:'Grid', X2:out('Object')),
      f(hperiod, X2:obj:'Object', X3:out('Integer')),
      f(height, X2:'Piece', X4:out('Integer')),
      f(astuple, X4:a:'Integer', X3:b:'Integer', X5:out('Point')),
      f(ulcorner, X2:'Patch', X6:out('Point')),
      f(crop,
        IN:'Grid',
        X6:start:'Point',
        X5:dims:'Point',
        X7:out('Grid')),
      f(rot90, X7:'Grid', X8:out('Grid')),
      f(double, X1:n:'Numerical', X9:out('Numerical')),
      f(divide,
        X9:a:'Numerical',
        X3:b:'Numerical',
        X10:out('Numerical')),
      f(increment, X10:x:'Numerical', X11:out('Numerical')),
      f(repeat, X8:item:'Any', X11:num:'Integer', X12:out('Tuple')),
      f(merge,
        X12:containers:'ContainerContainer',
        X13:out('Container')),
      f(rot270, X13:'Grid', X14:out('Grid')),
      f(astuple, X4:a:'Integer', X9:b:'Integer', X15:out('Point')),
      f(crop,
        X14:'Grid',
        (0, 0):start:'Point',
        X15:dims:'Point',
        OUT:out('Grid'))
    ].
solve(ae3edfdc, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(replace,
        IN:'Grid',
        'THREE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(replace,
        X2:'Grid',
        'SEVEN':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X3:out('Grid')),
      f(lbind, colorfilter, X1:fixed:'Any', X4:out('Callable')),
      f(lbind, rbind, gravitate:fixed:'Any', X5:out('Callable')),
      f(chain,
        X5:h:'Callable',
        first:g:'Callable',
        X4:f:'Callable',
        X6:out('Callable')),
      f(X6, 'TWO', X7),
      f(X6, 'ONE', X8),
      f(X4, 'THREE', X9),
      f(X4, 'SEVEN', X10),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X7:b:'Callable',
        X11:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X8:b:'Callable',
        X12:out('Callable')),
      f(mapply,
        X11,
        X9:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(mapply,
        X12,
        X10:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(paint, X3:'Grid', X13:obj:'Object', X15:out('Grid')),
      f(paint, X15:'Grid', X14:obj:'Object', OUT:out('Grid'))
    ].
solve('1f0c79e5', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(replace,
        IN:'Grid',
        'TWO':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(leastcolor, X2:'Element', X3:out('Integer')),
      f(ofcolor, X2:'Grid', X3:value:'Integer', X4:out('Indices')),
      f(combine,
        X1:a:'Container',
        X4:b:'Container',
        X5:out('Container')),
      f(recolor, X3:value:'Integer', X5:'Patch', X6:out('Object')),
      f(compose,
        decrement:outer:'Callable',
        double:inner:'Callable',
        X7:out('Callable')),
      f(ulcorner, X5:'Patch', X8:out('Point')),
      f(invert, X8:n:'Numerical', X9:out('Numerical')),
      f(shift, X1:'Patch', X9:directions:'Point', X10:out('Patch')),
      f(apply, X7, X10:'Container', X11:out('Container')),
      f(interval,
        'ZERO':start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X12:out('Tuple')),
      f(prapply, multiply, X11, X12, X13),
      f(lbind, shift, X6:fixed:'Any', X14:out('Callable')),
      f(mapply,
        X14,
        X13:container:'ContainerContainer',
        X15:out('FrozenSet')),
      f(paint, IN:'Grid', X15:obj:'Object', OUT:out('Grid'))
    ].
solve('56dc2b01', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'THREE':value:'Integer',
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X4:out('Indices')),
      f(gravitate,
        X3:source:'Patch',
        X4:destination:'Patch',
        X5:out('Point')),
      f(first, X5:'Container', X6:out('Any')),
      f(equality, X6:a:'Any', 'ZERO':b:'Any', returns=X7),
      f(branch, condition=X7, width:a:'Any', height:b:'Any', X8:out('Any')),
      f(X8, X3, X9),
      f(gravitate,
        X4:source:'Patch',
        X3:destination:'Patch',
        X10:out('Point')),
      f(sign, X10:x:'Numerical', X11:out('Numerical')),
      f(multiply,
        X11:a:'Numerical',
        X9:b:'Numerical',
        X12:out('Numerical')),
      f(crement, X12:x:'Numerical', X13:out('Numerical')),
      f(recolor, 'EIGHT':value:'Integer', X4:'Patch', X14:out('Object')),
      f(shift, X14:'Patch', X13:directions:'Point', X15:out('Patch')),
      f(paint, IN:'Grid', X15:obj:'Object', X16:out('Grid')),
      f(move,
        X16:'Grid',
        X3:obj:'Object',
        X5:offset:'Point',
        OUT:out('Grid'))
    ].
solve(e48d4e1a, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X2:out('Indices')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X2:'Patch',
        X3:out('Grid')),
      f(leastcolor, X3:'Element', X4:out('Integer')),
      f(size, X2:'Container', X5:out('Integer')),
      f(ofcolor, IN:'Grid', X4:value:'Integer', X6:out('Indices')),
      f(rbind, toobject, IN:fixed:'Any', X7:out('Callable')),
      f(rbind, colorcount, X4:fixed:'Any', X8:out('Callable')),
      f(chain,
        X8:h:'Callable',
        X7:g:'Callable',
        dneighbors:f:'Callable',
        X9:out('Callable')),
      f(matcher, X9, 'FOUR':target:'Any', X10:out('Callable')),
      f(extract,
        X6:'Container',
        X10:condition:'Callable',
        X11:out('Any')),
      f(multiply,
        (1, -1):a:'Numerical',
        X5:b:'Numerical',
        X12:out('Numerical')),
      f(add,
        X12:a:'Numerical',
        X11:b:'Numerical',
        X13:out('Numerical')),
      f(canvas,
        'ZERO':value:'Integer',
        X1:dimensions:'Point',
        X14:out('Grid')),
      f(fork,
        combine:outer:'Callable',
        vfrontier:a:'Callable',
        hfrontier:b:'Callable',
        X15:out('Callable')),
      f(X15, X13, X16),
      f(fill,
        X14:'Grid',
        X4:value:'Integer',
        X16:'Patch',
        OUT:out('Grid'))
    ].
solve('6773b310', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:out('Grid')),
      f(neighbors, (0, 0):loc:'Point', X2:out('Indices')),
      f(insert,
        (0, 0):value:'Any',
        X2:container:'FrozenSet',
        X3:out('FrozenSet')),
      f(rbind, multiply, 'THREE':fixed:'Any', X4:out('Callable')),
      f(apply, X4, X3:'Container', X5:out('Container')),
      f(astuple, 'FOUR':a:'Integer', 'FOUR':b:'Integer', X6:out('Point')),
      f(shift, X5:'Patch', X6:directions:'Point', X7:out('Patch')),
      f(fork,
        insert:outer:'Callable',
        identity:a:'Callable',
        neighbors:b:'Callable',
        X8:out('Callable')),
      f(apply, X8, X7:'Container', X9:out('Container')),
      f(rbind, toobject, X1:fixed:'Any', X10:out('Callable')),
      f(apply, X10, X9:'Container', X11:out('Container')),
      f(rbind, colorcount, 'SIX':fixed:'Any', X12:out('Callable')),
      f(matcher, X12, 'TWO':target:'Any', X13:out('Callable')),
      f(mfilter, X11:'Container', X13, X14:out('FrozenSet')),
      f(fill,
        X1:'Grid',
        'ONE':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(replace,
        X15:'Grid',
        'SIX':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X16:out('Grid')),
      f(downscale, X16:'Grid', 'THREE':factor:'Integer', OUT:out('Grid'))
    ].
solve('780d0b14', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(rbind, greater, 'TWO':fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        size:inner:'Callable',
        X4:out('Callable')),
      f(sfilter,
        X2:'Container',
        X4:condition:'Callable',
        X5:out('Container')),
      f(totuple, X5:container:'FrozenSet', X6:out('Tuple')),
      f(apply, color, X6:'Container', X7:out('Container')),
      f(apply, center, X6:'Container', X8:out('Container')),
      f(pair, X7:a:'Tuple', X8:b:'Tuple', X9:out('TupleTuple')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X1:'Patch',
        X10:out('Grid')),
      f(paint, X10:'Grid', X9:obj:'Object', X11:out('Grid')),
      f(rbind, greater, 'ONE':fixed:'Any', X12:out('Callable')),
      f(compose,
        dedupe:outer:'Callable',
        totuple:inner:'Callable',
        X13:out('Callable')),
      f(chain,
        X12:h:'Callable',
        size:g:'Callable',
        X13:f:'Callable',
        X14:out('Callable')),
      f(sfilter,
        X11:'Container',
        X14:condition:'Callable',
        X15:out('Container')),
      f(rot90, X15:'Grid', X16:out('Grid')),
      f(sfilter,
        X16:'Container',
        X14:condition:'Callable',
        X17:out('Container')),
      f(rot270, X17:'Grid', OUT:out('Grid'))
    ].
solve('2204b7a8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, sfilter, X1:fixed:'Any', X2:out('Callable')),
      f(compose,
        size:outer:'Callable',
        X2:inner:'Callable',
        X3:out('Callable')),
      f(X3, vline, X4),
      f(X3, hline, X5),
      f(greater, X4:a:'Integer', X5:b:'Integer', returns=X6),
      f(branch,
        condition=X6,
        lefthalf:a:'Any',
        tophalf:b:'Any',
        X7:out('Any')),
      f(branch,
        condition=X6,
        righthalf:a:'Any',
        bottomhalf:b:'Any',
        X8:out('Any')),
      f(branch,
        condition=X6,
        hconcat:a:'Any',
        vconcat:b:'Any',
        X9:out('Any')),
      f(X7, IN, X10),
      f(X8, IN, X11),
      f(index, X10:'Grid', (0, 0):loc:'Point', X12:out('Integer')),
      f(shape, X11:'Piece', X13:out('Point')),
      f(decrement, X13:x:'Numerical', X14:out('Numerical')),
      f(index, X11:'Grid', X14:loc:'Point', X15:out('Integer')),
      f(replace,
        X10:'Grid',
        'THREE':replacee:'Integer',
        X12:replacer:'Integer',
        X16:out('Grid')),
      f(replace,
        X11:'Grid',
        'THREE':replacee:'Integer',
        X15:replacer:'Integer',
        X17:out('Grid')),
      f(X9, X16, X17, OUT)
    ].
solve(d9f24cd1, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X2:out('Indices')),
      f(prapply, connect, X1, X2, X3),
      f(mfilter, X3:'Container', vline, X4:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'TWO':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(matcher, numcolors, 'TWO':target:'Any', X6:out('Callable')),
      f(objects,
        X5:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X7:out('Objects')),
      f(sfilter,
        X7:'Container',
        X6:condition:'Callable',
        X8:out('Container')),
      f(difference,
        X7:a:'FrozenSet',
        X8:b:'FrozenSet',
        X9:out('FrozenSet')),
      f(colorfilter,
        X9:objs:'Objects',
        'TWO':value:'Integer',
        X10:out('Objects')),
      f(mapply,
        toindices,
        X10:container:'ContainerContainer',
        X11:out('FrozenSet')),
      f(apply, urcorner, X8:'Container', X12:out('Container')),
      f(shift, X12:'Patch', (1, 1):directions:'Point', X13:out('Patch')),
      f(rbind, shoot, (-1, 0):fixed:'Any', X14:out('Callable')),
      f(mapply,
        X14,
        X13:container:'ContainerContainer',
        X15:out('FrozenSet')),
      f(fill,
        X5:'Grid',
        'TWO':value:'Integer',
        X15:'Patch',
        X16:out('Grid')),
      f(mapply,
        vfrontier,
        X11:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(fill,
        X16:'Grid',
        'TWO':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve(b782dc8a, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X3:out('Indices')),
      f(first, X3:'Container', X4:out('Any')),
      f(dneighbors, X4:loc:'Point', X5:out('Indices')),
      f(toobject, X5:'Patch', IN:'Grid', X6:out('Object')),
      f(mostcolor, X6:'Element', X7:out('Integer')),
      f(ofcolor, IN:'Grid', X7:value:'Integer', X8:out('Indices')),
      f(colorfilter,
        X2:objs:'Objects',
        'ZERO':value:'Integer',
        X9:out('Objects')),
      f(rbind, adjacent, X8:fixed:'Any', X10:out('Callable')),
      f(mfilter, X9:'Container', X10, X11:out('FrozenSet')),
      f(toindices, X11:'Patch', X12:out('Indices')),
      f(rbind, manhattan, X3:fixed:'Any', X13:out('Callable')),
      f(chain,
        even:h:'Callable',
        X13:g:'Callable',
        initset:f:'Callable',
        X14:out('Callable')),
      f(sfilter,
        X12:'Container',
        X14:condition:'Callable',
        X15:out('Container')),
      f(difference,
        X12:a:'FrozenSet',
        X15:b:'FrozenSet',
        X16:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X15:'Patch',
        X17:out('Grid')),
      f(fill,
        X17:'Grid',
        X7:value:'Integer',
        X16:'Patch',
        OUT:out('Grid'))
    ].
solve('673ef223', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X2:out('Indices')),
      f(replace,
        IN:'Grid',
        'EIGHT':replacee:'Integer',
        'FOUR':replacer:'Integer',
        X3:out('Grid')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X4:out('Objects')),
      f(argmin,
        X1:'Container',
        uppermost:compfunc:'Callable',
        X5:out('Any')),
      f(apply, uppermost, X4:'Container', X6:out('Container')),
      f(fork,
        subtract:outer:'Callable',
        maximum:a:'Callable',
        minimum:b:'Callable',
        X7:out('Callable')),
      f(X7, X6, X8),
      f(toivec, X8:i:'Integer', X9:out('Point')),
      f(leftmost, X5:'Patch', X10:out('Integer')),
      f(equality, X10:a:'Any', 'ZERO':b:'Any', returns=X11),
      f(branch,
        condition=X11,
        (0, -1):a:'Any',
        (0, 1):b:'Any',
        X12:out('Any')),
      f(rbind, shoot, X12:fixed:'Any', X13:out('Callable')),
      f(mapply,
        X13,
        X2:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(underfill,
        X3:'Grid',
        'EIGHT':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(shift, X2:'Patch', X9:directions:'Point', X16:out('Patch')),
      f(mapply,
        hfrontier,
        X16:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(underfill,
        X15:'Grid',
        'EIGHT':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve(f5b8619d, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(height, IN:'Piece', X3:out('Integer')),
      f(righthalf, IN:'Grid', X4:out('Grid')),
      f(halve, X2:n:'Numerical', X5:out('Numerical')),
      f(even, X2:n:'Integer', returns=X6),
      f(branch,
        condition=X6,
        identity:a:'Any',
        increment:b:'Any',
        X7:out('Any')),
      f(X7, X5, X8),
      f(astuple, X3:a:'Integer', X8:b:'Integer', X9:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X9:dims:'Point',
        X10:out('Grid')),
      f(vconcat, X10:a:'Grid', X10:b:'Grid', X11:out('Grid')),
      f(vconcat, X4:a:'Grid', X4:b:'Grid', X12:out('Grid')),
      f(hconcat, X12:a:'Grid', X11:b:'Grid', X13:out('Grid')),
      f(hconcat, X11:a:'Grid', X13:b:'Grid', X14:out('Grid')),
      f(hconcat, X14:a:'Grid', X12:b:'Grid', X15:out('Grid')),
      f(ofcolor, X15:'Grid', X1:value:'Integer', X16:out('Indices')),
      f(mapply,
        vfrontier,
        X16:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(underfill,
        X15:'Grid',
        'EIGHT':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve(f8c80d96, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(colorfilter,
        X2:objs:'Objects',
        X1:value:'Integer',
        X3:out('Objects')),
      f(argmax, X3:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(argmin, X2:'Container', width:compfunc:'Callable', X5:out('Any')),
      f(size, X5:'Container', X6:out('Integer')),
      f(equality, X6:a:'Any', 'ONE':b:'Any', returns=X7),
      f(branch,
        condition=X7,
        identity:a:'Any',
        outbox:b:'Any',
        X8:out('Any')),
      f(chain,
        outbox:h:'Callable',
        outbox:g:'Callable',
        X8:f:'Callable',
        X9:out('Callable')),
      f(power, X9, 'TWO':n:'Integer', X10:out('Callable')),
      f(power, X9, 'THREE':n:'Integer', X11:out('Callable')),
      f(X9, X4, X12),
      f(X10, X4, X13),
      f(X11, X4, X14),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X12:'Patch',
        X15:out('Grid')),
      f(fill,
        X15:'Grid',
        X1:value:'Integer',
        X13:'Patch',
        X16:out('Grid')),
      f(fill,
        X16:'Grid',
        X1:value:'Integer',
        X14:'Patch',
        X17:out('Grid')),
      f(replace,
        X17:'Grid',
        'ZERO':replacee:'Integer',
        'FIVE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(ecdecbb3, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X2:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'EIGHT':value:'Integer',
        X3:out('Objects')),
      f(product,
        X2:a:'Container',
        X3:b:'Container',
        X4:out('FrozenSet')),
      f(fork,
        gravitate:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X5:out('Callable')),
      f(compose,
        crement:outer:'Callable',
        X5:inner:'Callable',
        X6:out('Callable')),
      f(compose,
        center:outer:'Callable',
        first:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X7:a:'Callable',
        X6:b:'Callable',
        X8:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X7:a:'Callable',
        X8:b:'Callable',
        X9:out('Callable')),
      f(apply, X9, X4:'Container', X10:out('Container')),
      f(lbind, greater, 'EIGHT':fixed:'Any', X11:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        size:inner:'Callable',
        X12:out('Callable')),
      f(mfilter, X10:'Container', X12, X13:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X13:'Patch',
        X14:out('Grid')),
      f(apply, X8, X4:'Container', X15:out('Container')),
      f(intersection,
        X13:a:'FrozenSet',
        X15:b:'FrozenSet',
        X16:out('FrozenSet')),
      f(mapply,
        neighbors,
        X16:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(fill,
        X14:'Grid',
        'EIGHT':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve(e5062a87, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(recolor, 'ZERO':value:'Integer', X1:'Patch', X2:out('Object')),
      f(normalize, X2:'Patch', X3:out('Patch')),
      f(occurrences, IN:'Grid', X2:obj:'Object', X4:out('Indices')),
      f(lbind, shift, X3:fixed:'Any', X5:out('Callable')),
      f(apply, X5, X4:'Container', X6:out('Container')),
      f(astuple, 'ONE':a:'Integer', 'THREE':b:'Integer', X7:out('Point')),
      f(astuple, 'FIVE':a:'Integer', 'ONE':b:'Integer', X8:out('Point')),
      f(astuple, 'TWO':a:'Integer', 'SIX':b:'Integer', X9:out('Point')),
      f(initset, X7:value:'Any', X10:out('FrozenSet')),
      f(insert,
        X8:value:'Any',
        X10:container:'FrozenSet',
        X11:out('FrozenSet')),
      f(insert,
        X9:value:'Any',
        X11:container:'FrozenSet',
        X12:out('FrozenSet')),
      f(rbind, contained, X12:fixed:'Any', X13:out('Callable')),
      f(chain,
        flip:h:'Callable',
        X13:g:'Callable',
        ulcorner:f:'Callable',
        X14:out('Callable')),
      f(sfilter,
        X6:'Container',
        X14:condition:'Callable',
        X15:out('Container')),
      f(merge,
        X15:containers:'ContainerContainer',
        X16:out('Container')),
      f(recolor, 'TWO':value:'Integer', X16:'Patch', X17:out('Object')),
      f(paint, IN:'Grid', X17:obj:'Object', OUT:out('Grid'))
    ].
solve(a8d7556c, IN, OUT) :-
    [ f(initset, (0, 0):value:'Any', X1:out('FrozenSet')),
      f(recolor, 'ZERO':value:'Integer', X1:'Patch', X2:out('Object')),
      f(upscale, X2:'Element', 'TWO':factor:'Integer', X3:out('Element')),
      f(occurrences, IN:'Grid', X3:obj:'Object', X4:out('Indices')),
      f(lbind, shift, X3:fixed:'Any', X5:out('Callable')),
      f(mapply,
        X5,
        X4:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X6:'Patch',
        X7:out('Grid')),
      f(add, 'SIX':a:'Numerical', 'SIX':b:'Numerical', X8:out('Numerical')),
      f(astuple, 'EIGHT':a:'Integer', X8:b:'Integer', X9:out('Point')),
      f(index, X7:'Grid', X9:loc:'Point', X10:out('Integer')),
      f(equality, X10:a:'Any', 'TWO':b:'Any', returns=X11),
      f(initset, X9:value:'Any', X12:out('FrozenSet')),
      f(add, X9:a:'Numerical', (1, 0):b:'Numerical', X13:out('Numerical')),
      f(insert,
        X13:value:'Any',
        X12:container:'FrozenSet',
        X14:out('FrozenSet')),
      f(toobject, X14:'Patch', X7:'Grid', X15:out('Object')),
      f(toobject, X14:'Patch', IN:'Grid', X16:out('Object')),
      f(branch,
        condition=X11,
        X16:a:'Any',
        X15:b:'Any',
        X17:out('Any')),
      f(paint, X7:'Grid', X17:obj:'Object', OUT:out('Grid'))
    ].
solve('4938f0c2', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(vmirror, X2:'Piece', X3:out('Piece')),
      f(height, X2:'Piece', X4:out('Integer')),
      f(width, X2:'Piece', X5:out('Integer')),
      f(toivec, X4:i:'Integer', X6:out('Point')),
      f(tojvec, X5:j:'Integer', X7:out('Point')),
      f(add, X7:a:'Numerical', (0, 2):b:'Numerical', X8:out('Numerical')),
      f(add, X6:a:'Numerical', (2, 0):b:'Numerical', X9:out('Numerical')),
      f(shift, X3:'Patch', X8:directions:'Point', X10:out('Patch')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(ofcolor, X11:'Grid', 'TWO':value:'Integer', X12:out('Indices')),
      f(hmirror, X12:'Piece', X13:out('Piece')),
      f(shift, X13:'Patch', X9:directions:'Point', X14:out('Patch')),
      f(fill,
        X11:'Grid',
        'TWO':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(size, X1:'Container', X16:out('Integer')),
      f(greater, X16:a:'Integer', 'FOUR':b:'Integer', returns=X17),
      f(branch,
        condition=X17,
        IN:a:'Any',
        X15:b:'Any',
        OUT:out('Any'))
    ].
solve('834ec97d', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(shift, X3:'Patch', (1, 0):directions:'Point', X4:out('Patch')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X3:'Patch',
        X5:out('Grid')),
      f(paint, X5:'Grid', X4:obj:'Object', X6:out('Grid')),
      f(uppermost, X4:'Patch', X7:out('Integer')),
      f(leftmost, X4:'Patch', X8:out('Integer')),
      f(subtract, X8:a:'Numerical', 'TEN':b:'Numerical', X9:out('Numerical')),
      f(add, X8:a:'Numerical', 'TEN':b:'Numerical', X10:out('Numerical')),
      f(interval,
        X9:start:'Integer',
        X10:stop:'Integer',
        'TWO':step:'Integer',
        X11:out('Tuple')),
      f(lbind, greater, X7:fixed:'Any', X12:out('Callable')),
      f(compose,
        X12:outer:'Callable',
        first:inner:'Callable',
        X13:out('Callable')),
      f(rbind, contained, X11:fixed:'Any', X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        last:inner:'Callable',
        X15:out('Callable')),
      f(sfilter,
        X1:'Container',
        X13:condition:'Callable',
        X16:out('Container')),
      f(sfilter,
        X16:'Container',
        X15:condition:'Callable',
        X17:out('Container')),
      f(fill,
        X6:'Grid',
        'FOUR':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve('846bdb03', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(rbind, colorcount, 'FOUR':fixed:'Any', X2:out('Callable')),
      f(matcher, X2, 'ZERO':target:'Any', X3:out('Callable')),
      f(extract,
        X1:'Container',
        X3:condition:'Callable',
        X4:out('Any')),
      f(remove, X4:value:'Any', X1:'Container', X5:out('Container')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(subgrid, X6:'Patch', IN:'Grid', X7:out('Grid')),
      f(index, X7:'Grid', (1, 0):loc:'Point', X8:out('Integer')),
      f(subgrid, X4:'Patch', IN:'Grid', X9:out('Grid')),
      f(lefthalf, X9:'Grid', X10:out('Grid')),
      f(palette, X10:'Element', X11:out('IntegerSet')),
      f(other, X11:'Container', 'ZERO':value:'Any', X12:out('Any')),
      f(equality, X8:a:'Any', X12:b:'Any', returns=X13),
      f(branch,
        condition=X13,
        identity:a:'Any',
        vmirror:b:'Any',
        X14:out('Any')),
      f(X14, X4, X15),
      f(normalize, X15:'Patch', X16:out('Patch')),
      f(shift, X16:'Patch', (1, 1):directions:'Point', X17:out('Patch')),
      f(paint, X7:'Grid', X17:obj:'Object', OUT:out('Grid'))
    ].
solve('90f3ed37', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(order,
        X1:'Container',
        uppermost:compfunc:'Callable',
        X2:out('Tuple')),
      f(first, X2:'Container', X3:out('Any')),
      f(remove, X3:value:'Any', X2:'Container', X4:out('Container')),
      f(normalize, X3:'Patch', X5:out('Patch')),
      f(lbind, shift, X5:fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        ulcorner:inner:'Callable',
        X7:out('Callable')),
      f(interval,
        'TWO':start:'Integer',
        'NEG_ONE':stop:'Integer',
        'NEG_ONE':step:'Integer',
        X8:out('Tuple')),
      f(apply, tojvec, X8:'Container', X9:out('Container')),
      f(rbind, apply, X9:fixed:'Any', X10:out('Callable')),
      f(lbind, compose, size:fixed:'Any', X11:out('Callable')),
      f(lbind, lbind, intersection:fixed:'Any', X12:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        X12:inner:'Callable',
        X13:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X14:out('Callable')),
      f(chain,
        X10:h:'Callable',
        X14:g:'Callable',
        X7:f:'Callable',
        X15:out('Callable')),
      f(fork,
        argmax:outer:'Callable',
        X15:a:'Callable',
        X13:b:'Callable',
        X16:out('Callable')),
      f(mapply,
        X16,
        X4:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'ONE':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve('8403a5d5', IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(color, X3:obj:'Object', X4:out('Integer')),
      f(leftmost, X3:'Patch', X5:out('Integer')),
      f(interval,
        X5:start:'Integer',
        'TEN':stop:'Integer',
        'TWO':step:'Integer',
        X6:out('Tuple')),
      f(rbind, contained, X6:fixed:'Any', X7:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        last:inner:'Callable',
        X8:out('Callable')),
      f(sfilter,
        X1:'Container',
        X8:condition:'Callable',
        X9:out('Container')),
      f(increment, X5:x:'Numerical', X10:out('Numerical')),
      f(add, X5:a:'Numerical', 'THREE':b:'Numerical', X11:out('Numerical')),
      f(interval,
        X10:start:'Integer',
        'TEN':stop:'Integer',
        'FOUR':step:'Integer',
        X12:out('Tuple')),
      f(interval,
        X11:start:'Integer',
        'TEN':stop:'Integer',
        'FOUR':step:'Integer',
        X13:out('Tuple')),
      f(lbind, astuple, 'NINE':fixed:'Any', X14:out('Callable')),
      f(apply, tojvec, X12:'Container', X15:out('Container')),
      f(apply, X14, X13:'Container', X16:out('Container')),
      f(fill,
        IN:'Grid',
        X4:value:'Integer',
        X9:'Patch',
        X17:out('Grid')),
      f(fill,
        X17:'Grid',
        'FIVE':value:'Integer',
        X15:'Patch',
        X18:out('Grid')),
      f(fill,
        X18:'Grid',
        'FIVE':value:'Integer',
        X16:'Patch',
        OUT:out('Grid'))
    ].
solve(91413438, IN, OUT) :-
    [ f(colorcount, IN:'Element', 'ZERO':value:'Integer', X1:out('Integer')),
      f(subtract,
        'NINE':a:'Numerical',
        X1:b:'Numerical',
        X2:out('Numerical')),
      f(multiply,
        X1:a:'Numerical',
        'THREE':b:'Numerical',
        X3:out('Numerical')),
      f(multiply,
        X3:a:'Numerical',
        X1:b:'Numerical',
        X4:out('Numerical')),
      f(subtract,
        X4:a:'Numerical',
        'THREE':b:'Numerical',
        X5:out('Numerical')),
      f(astuple, 'THREE':a:'Integer', X5:b:'Integer', X6:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X6:dimensions:'Point',
        X7:out('Grid')),
      f(hconcat, IN:a:'Grid', X7:b:'Grid', X8:out('Grid')),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X9:out('Objects')),
      f(first, X9:'Container', X10:out('Any')),
      f(lbind, shift, X10:fixed:'Any', X11:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        tojvec:inner:'Callable',
        X12:out('Callable')),
      f(interval,
        'ZERO':start:'Integer',
        X2:stop:'Integer',
        'ONE':step:'Integer',
        X13:out('Tuple')),
      f(rbind, multiply, 'THREE':fixed:'Any', X14:out('Callable')),
      f(apply, X14, X13:'Container', X15:out('Container')),
      f(mapply,
        X12,
        X15:container:'ContainerContainer',
        X16:out('FrozenSet')),
      f(paint, X8:'Grid', X16:obj:'Object', X17:out('Grid')),
      f(hsplit, X17:'Grid', X1:n:'Integer', X18:out('Tuple')),
      f(merge,
        X18:containers:'ContainerContainer',
        OUT:out('Container'))
    ].
solve('539a4f51', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(index, IN:'Grid', (0, 0):loc:'Point', X2:out('Integer')),
      f(colorcount, IN:'Element', 'ZERO':value:'Integer', X3:out('Integer')),
      f(decrement, X1:x:'Numerical', X4:out('Numerical')),
      f(positive, X3:x:'Integer', returns=X5),
      f(branch,
        condition=X5,
        X4:a:'Any',
        X1:b:'Any',
        X6:out('Any')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X6:dims:'Point',
        X7:out('Grid')),
      f(width, X7:'Piece', X8:out('Integer')),
      f(astuple, 'ONE':a:'Integer', X8:b:'Integer', X9:out('Point')),
      f(crop,
        X7:'Grid',
        (0, 0):start:'Point',
        X9:dims:'Point',
        X10:out('Grid')),
      f(vupscale, X10:'Grid', X8:factor:'Integer', X11:out('Grid')),
      f(dmirror, X11:'Piece', X12:out('Piece')),
      f(hconcat, X7:a:'Grid', X11:b:'Grid', X13:out('Grid')),
      f(hconcat, X12:a:'Grid', X7:b:'Grid', X14:out('Grid')),
      f(vconcat, X13:a:'Grid', X14:b:'Grid', X15:out('Grid')),
      f(asobject, X15:'Grid', X16:out('Object')),
      f(multiply, (1, 1):a:'Numerical', 'TEN':b:'Numerical', X17:out('Numerical')),
      f(canvas,
        X2:value:'Integer',
        X17:dimensions:'Point',
        X18:out('Grid')),
      f(paint, X18:'Grid', X16:obj:'Object', OUT:out('Grid'))
    ].
solve('5daaa586', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X3:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(extract,
        X2:'Container',
        X4:condition:'Callable',
        X5:out('Any')),
      f(outbox, X5:'Patch', X6:out('Indices')),
      f(subgrid, X6:'Patch', IN:'Grid', X7:out('Grid')),
      f(fgpartition, X7:'Grid', X8:out('Objects')),
      f(argmax, X8:'Container', size:compfunc:'Callable', X9:out('Any')),
      f(color, X9:obj:'Object', X10:out('Integer')),
      f(toindices, X9:'Patch', X11:out('Indices')),
      f(prapply, connect, X11, X11, X12),
      f(mfilter, X12:'Container', vline, X13:out('FrozenSet')),
      f(mfilter, X12:'Container', hline, X14:out('FrozenSet')),
      f(size, X13:'Container', X15:out('Integer')),
      f(size, X14:'Container', X16:out('Integer')),
      f(greater, X15:a:'Integer', X16:b:'Integer', returns=X17),
      f(branch,
        condition=X17,
        X13:a:'Any',
        X14:b:'Any',
        X18:out('Any')),
      f(fill,
        X7:'Grid',
        X10:value:'Integer',
        X18:'Patch',
        OUT:out('Grid'))
    ].
solve('3bdb4ada', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(compose,
        increment:outer:'Callable',
        ulcorner:inner:'Callable',
        X3:out('Callable')),
      f(compose,
        decrement:outer:'Callable',
        lrcorner:inner:'Callable',
        X4:out('Callable')),
      f(apply, X3, X2:'Container', X5:out('Container')),
      f(apply, X4, X2:'Container', X6:out('Container')),
      f(papply, connect, X5:a:'Tuple', X6:b:'Tuple', X7:out('Tuple')),
      f(apply, last, X5:'Container', X8:out('Container')),
      f(compose,
        last:outer:'Callable',
        first:inner:'Callable',
        X9:out('Callable')),
      f(power, last, 'TWO':n:'Integer', X10:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X9:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(compose,
        even:outer:'Callable',
        X11:inner:'Callable',
        X12:out('Callable')),
      f(lbind, rbind, astuple:fixed:'Any', X13:out('Callable')),
      f(lbind, compose, X12:fixed:'Any', X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        X13:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        first:a:'Callable',
        X15:b:'Callable',
        X16:out('Callable')),
      f(pair, X7:a:'Tuple', X8:b:'Tuple', X17:out('TupleTuple')),
      f(mapply,
        X16,
        X17:container:'ContainerContainer',
        X18:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'ZERO':value:'Integer',
        X18:'Patch',
        OUT:out('Grid'))
    ].
solve(ec883f72, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(fork,
        multiply:outer:'Callable',
        height:a:'Callable',
        width:b:'Callable',
        X3:out('Callable')),
      f(argmax,
        X2:'Container',
        X3:compfunc:'Callable',
        X4:out('Any')),
      f(color, X4:obj:'Object', X5:out('Integer')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X6:out('Container')),
      f(other, X6:'Container', X5:value:'Any', X7:out('Any')),
      f(lrcorner, X4:'Patch', X8:out('Point')),
      f(llcorner, X4:'Patch', X9:out('Point')),
      f(urcorner, X4:'Patch', X10:out('Point')),
      f(ulcorner, X4:'Patch', X11:out('Point')),
      f(shoot,
        X8:start:'Point',
        (1, 1):direction:'Point',
        X12:out('Indices')),
      f(shoot,
        X9:start:'Point',
        (1, -1):direction:'Point',
        X13:out('Indices')),
      f(shoot,
        X10:start:'Point',
        (-1, 1):direction:'Point',
        X14:out('Indices')),
      f(shoot,
        X11:start:'Point',
        (-1, -1):direction:'Point',
        X15:out('Indices')),
      f(combine,
        X12:a:'Container',
        X13:b:'Container',
        X16:out('Container')),
      f(combine,
        X14:a:'Container',
        X15:b:'Container',
        X17:out('Container')),
      f(combine,
        X16:a:'Container',
        X17:b:'Container',
        X18:out('Container')),
      f(underfill,
        IN:'Grid',
        X7:value:'Integer',
        X18:'Patch',
        OUT:out('Grid'))
    ].
solve('2bee17df', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(rot90, IN:'Grid', X2:out('Grid')),
      f(subtract, X1:a:'Numerical', 'TWO':b:'Numerical', X3:out('Numerical')),
      f(interval,
        'ZERO':start:'Integer',
        X1:stop:'Integer',
        'ONE':step:'Integer',
        X4:out('Tuple')),
      f(rbind, colorcount, 'ZERO':fixed:'Any', X5:out('Callable')),
      f(matcher, X5, X3:target:'Any', X6:out('Callable')),
      f(rbind, vsplit, X1:fixed:'Any', X7:out('Callable')),
      f(lbind, apply, X6:fixed:'Any', X8:out('Callable')),
      f(compose,
        X8:outer:'Callable',
        X7:inner:'Callable',
        X9:out('Callable')),
      f(X9, IN, X10),
      f(pair, X4:a:'Tuple', X10:b:'Tuple', X11:out('TupleTuple')),
      f(sfilter,
        X11:'Container',
        last:condition:'Callable',
        X12:out('Container')),
      f(mapply,
        hfrontier,
        X12:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(X9, X2, X14),
      f(pair, X14:a:'Tuple', X4:b:'Tuple', X15:out('TupleTuple')),
      f(sfilter,
        X15:'Container',
        first:condition:'Callable',
        X16:out('Container')),
      f(mapply,
        vfrontier,
        X16:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(astuple, X13:a:'Integer', X17:b:'Integer', X18:out('Point')),
      f(merge,
        X18:containers:'ContainerContainer',
        X19:out('Container')),
      f(underfill,
        IN:'Grid',
        'THREE':value:'Integer',
        X19:'Patch',
        OUT:out('Grid'))
    ].
solve(e8dc4411, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X2:out('Indices')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X3:out('Indices')),
      f(position, X2:a:'Patch', X3:b:'Patch', X4:out('Point')),
      f(fork,
        connect:outer:'Callable',
        ulcorner:a:'Callable',
        lrcorner:b:'Callable',
        X5:out('Callable')),
      f(X5, X2, X6),
      f(intersection,
        X2:a:'FrozenSet',
        X6:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(equality, X6:a:'Any', X7:b:'Any', returns=X8),
      f(fork,
        subtract:outer:'Callable',
        identity:a:'Callable',
        crement:b:'Callable',
        X9:out('Callable')),
      f(fork,
        add:outer:'Callable',
        identity:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(branch,
        condition=X8,
        identity:a:'Any',
        X10:b:'Any',
        X11:out('Any')),
      f(shape, X2:'Piece', X12:out('Point')),
      f(multiply,
        X12:a:'Numerical',
        X4:b:'Numerical',
        X13:out('Numerical')),
      f(apply, X11, X13:'Container', X14:out('Container')),
      f(interval,
        'ONE':start:'Integer',
        'FIVE':stop:'Integer',
        'ONE':step:'Integer',
        X15:out('Tuple')),
      f(lbind, multiply, X14:fixed:'Any', X16:out('Callable')),
      f(apply, X16, X15:'Container', X17:out('Container')),
      f(lbind, shift, X2:fixed:'Any', X18:out('Callable')),
      f(mapply,
        X18,
        X17:container:'ContainerContainer',
        X19:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X19:'Patch',
        OUT:out('Grid'))
    ].
solve(e40b9e2f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(neighbors, (0, 0):loc:'Point', X2:out('Indices')),
      f(mapply,
        neighbors,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(first, X1:'Container', X4:out('Any')),
      f(lbind, intersection, X4:fixed:'Any', X5:out('Callable')),
      f(compose,
        hmirror:outer:'Callable',
        vmirror:inner:'Callable',
        X6:out('Callable')),
      f(X6, X4, X7),
      f(lbind, shift, X7:fixed:'Any', X8:out('Callable')),
      f(apply, X8, X3:'Container', X9:out('Container')),
      f(argmax,
        X9:'Container',
        X5:compfunc:'Callable',
        X10:out('Any')),
      f(paint, IN:'Grid', X10:obj:'Object', X11:out('Grid')),
      f(objects,
        X11:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X12:out('Objects')),
      f(first, X12:'Container', X13:out('Any')),
      f(compose,
        size:outer:'Callable',
        X5:inner:'Callable',
        X14:out('Callable')),
      f(compose,
        vmirror:outer:'Callable',
        dmirror:inner:'Callable',
        X15:out('Callable')),
      f(X15, X13, X16),
      f(lbind, shift, X16:fixed:'Any', X17:out('Callable')),
      f(apply, X17, X3:'Container', X18:out('Container')),
      f(argmax,
        X18:'Container',
        X14:compfunc:'Callable',
        X19:out('Any')),
      f(paint, X11:'Grid', X19:obj:'Object', OUT:out('Grid'))
    ].
solve(29623171, IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(interval,
        'ZERO':start:'Integer',
        'NINE':stop:'Integer',
        'FOUR':step:'Integer',
        X2:out('Tuple')),
      f(product,
        X2:a:'Container',
        X2:b:'Container',
        X3:out('FrozenSet')),
      f(rbind, add, 'THREE':fixed:'Any', X4:out('Callable')),
      f(rbind, interval, 'ONE':fixed:'Any', X5:out('Callable')),
      f(fork,
        X5:outer:'Callable',
        identity:a:'Callable',
        X4:b:'Callable',
        X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        first:inner:'Callable',
        X7:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        last:inner:'Callable',
        X8:out('Callable')),
      f(fork,
        product:outer:'Callable',
        X7:a:'Callable',
        X8:b:'Callable',
        X9:out('Callable')),
      f(rbind, colorcount, X1:fixed:'Any', X10:out('Callable')),
      f(rbind, toobject, IN:fixed:'Any', X11:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        X11:inner:'Callable',
        X12:out('Callable')),
      f(apply, X9, X3:'Container', X13:out('Container')),
      f(valmax,
        X13:'Container',
        X12:compfunc:'Callable',
        X14:out('Integer')),
      f(matcher, X12, X14:target:'Any', X15:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X15:inner:'Callable',
        X16:out('Callable')),
      f(mfilter, X13:'Container', X15, X17:out('FrozenSet')),
      f(mfilter, X13:'Container', X16, X18:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X17:'Patch',
        X19:out('Grid')),
      f(fill,
        X19:'Grid',
        'ZERO':value:'Integer',
        X18:'Patch',
        OUT:out('Grid'))
    ].
solve(a2fd1cf0, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X2:out('Indices')),
      f(uppermost, X1:'Patch', X3:out('Integer')),
      f(leftmost, X1:'Patch', X4:out('Integer')),
      f(uppermost, X2:'Patch', X5:out('Integer')),
      f(leftmost, X2:'Patch', X6:out('Integer')),
      f(astuple, X3:a:'Integer', X5:b:'Integer', X7:out('Point')),
      f(minimum, X7:container:'IntegerSet', X8:out('Integer')),
      f(maximum, X7:container:'IntegerSet', X9:out('Integer')),
      f(astuple, X8:a:'Integer', X6:b:'Integer', X10:out('Point')),
      f(astuple, X9:a:'Integer', X6:b:'Integer', X11:out('Point')),
      f(connect, X10:a:'Point', X11:b:'Point', X12:out('Indices')),
      f(astuple, X4:a:'Integer', X6:b:'Integer', X13:out('Point')),
      f(minimum, X13:container:'IntegerSet', X14:out('Integer')),
      f(maximum, X13:container:'IntegerSet', X15:out('Integer')),
      f(astuple, X3:a:'Integer', X14:b:'Integer', X16:out('Point')),
      f(astuple, X3:a:'Integer', X15:b:'Integer', X17:out('Point')),
      f(connect, X16:a:'Point', X17:b:'Point', X18:out('Indices')),
      f(combine,
        X12:a:'Container',
        X18:b:'Container',
        X19:out('Container')),
      f(underfill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X19:'Patch',
        OUT:out('Grid'))
    ].
solve(b0c4d837, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X2:out('Indices')),
      f(height, X1:'Piece', X3:out('Integer')),
      f(decrement, X3:x:'Numerical', X4:out('Numerical')),
      f(height, X2:'Piece', X5:out('Integer')),
      f(subtract,
        X4:a:'Numerical',
        X5:b:'Numerical',
        X6:out('Numerical')),
      f(astuple, 'ONE':a:'Integer', X6:b:'Integer', X7:out('Point')),
      f(canvas,
        'EIGHT':value:'Integer',
        X7:dimensions:'Point',
        X8:out('Grid')),
      f(subtract, 'SIX':a:'Numerical', X6:b:'Numerical', X9:out('Numerical')),
      f(astuple, 'ONE':a:'Integer', X9:b:'Integer', X10:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X10:dimensions:'Point',
        X11:out('Grid')),
      f(hconcat, X8:a:'Grid', X11:b:'Grid', X12:out('Grid')),
      f(hsplit, X12:'Grid', 'TWO':n:'Integer', X13:out('Tuple')),
      f(first, X13:'Container', X14:out('Any')),
      f(last, X13:'Container', X15:out('Any')),
      f(vmirror, X15:'Piece', X16:out('Piece')),
      f(vconcat, X14:a:'Grid', X16:b:'Grid', X17:out('Grid')),
      f(astuple, 'ONE':a:'Integer', 'THREE':b:'Integer', X18:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X18:dimensions:'Point',
        X19:out('Grid')),
      f(vconcat, X17:a:'Grid', X19:b:'Grid', OUT:out('Grid'))
    ].
solve('8731374e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(height, X3:'Piece', X4:out('Integer')),
      f(width, X3:'Piece', X5:out('Integer')),
      f(vsplit, X3:'Grid', X4:n:'Integer', X6:out('Tuple')),
      f(lbind, greater, 'FOUR':fixed:'Any', X7:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        numcolors:inner:'Callable',
        X8:out('Callable')),
      f(sfilter,
        X6:'Container',
        X8:condition:'Callable',
        X9:out('Container')),
      f(merge, X9:containers:'ContainerContainer', X10:out('Container')),
      f(rot90, X10:'Grid', X11:out('Grid')),
      f(vsplit, X11:'Grid', X5:n:'Integer', X12:out('Tuple')),
      f(sfilter,
        X12:'Container',
        X8:condition:'Callable',
        X13:out('Container')),
      f(merge,
        X13:containers:'ContainerContainer',
        X14:out('Container')),
      f(rot270, X14:'Grid', X15:out('Grid')),
      f(leastcolor, X15:'Element', X16:out('Integer')),
      f(ofcolor, X15:'Grid', X16:value:'Integer', X17:out('Indices')),
      f(fork,
        combine:outer:'Callable',
        vfrontier:a:'Callable',
        hfrontier:b:'Callable',
        X18:out('Callable')),
      f(mapply,
        X18,
        X17:container:'ContainerContainer',
        X19:out('FrozenSet')),
      f(fill,
        X15:'Grid',
        X16:value:'Integer',
        X19:'Patch',
        OUT:out('Grid'))
    ].
solve('272f95fa', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(apply, toindices, X2:'Container', X3:out('Container')),
      f(rbind, bordering, IN:fixed:'Any', X4:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X4:inner:'Callable',
        X5:out('Callable')),
      f(extract,
        X3:'Container',
        X5:condition:'Callable',
        X6:out('Any')),
      f(remove, X6:value:'Any', X3:'Container', X7:out('Container')),
      f(lbind, vmatching, X6:fixed:'Any', X8:out('Callable')),
      f(lbind, hmatching, X6:fixed:'Any', X9:out('Callable')),
      f(sfilter,
        X7:'Container',
        X8:condition:'Callable',
        X10:out('Container')),
      f(sfilter,
        X7:'Container',
        X9:condition:'Callable',
        X11:out('Container')),
      f(argmin,
        X10:'Container',
        uppermost:compfunc:'Callable',
        X12:out('Any')),
      f(argmax,
        X10:'Container',
        uppermost:compfunc:'Callable',
        X13:out('Any')),
      f(argmin,
        X11:'Container',
        leftmost:compfunc:'Callable',
        X14:out('Any')),
      f(argmax,
        X11:'Container',
        leftmost:compfunc:'Callable',
        X15:out('Any')),
      f(fill,
        IN:'Grid',
        'SIX':value:'Integer',
        X6:'Patch',
        X16:out('Grid')),
      f(fill,
        X16:'Grid',
        'TWO':value:'Integer',
        X12:'Patch',
        X17:out('Grid')),
      f(fill,
        X17:'Grid',
        'ONE':value:'Integer',
        X13:'Patch',
        X18:out('Grid')),
      f(fill,
        X18:'Grid',
        'FOUR':value:'Integer',
        X14:'Patch',
        X19:out('Grid')),
      f(fill,
        X19:'Grid',
        'THREE':value:'Integer',
        X15:'Patch',
        OUT:out('Grid'))
    ].
solve(db93a21d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'NINE':value:'Integer', X2:out('Indices')),
      f(colorfilter,
        X1:objs:'Objects',
        'NINE':value:'Integer',
        X3:out('Objects')),
      f(rbind, shoot, (1, 0):fixed:'Any', X4:out('Callable')),
      f(mapply,
        X4,
        X2:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'ONE':value:'Integer',
        X5:'Patch',
        X6:out('Grid')),
      f(compose,
        halve:outer:'Callable',
        width:inner:'Callable',
        X7:out('Callable')),
      f(rbind, greater, 'ONE':fixed:'Any', X8:out('Callable')),
      f(compose,
        X8:outer:'Callable',
        X7:inner:'Callable',
        X9:out('Callable')),
      f(matcher, X7, 'THREE':target:'Any', X10:out('Callable')),
      f(power, outbox, 'TWO':n:'Integer', X11:out('Callable')),
      f(power, outbox, 'THREE':n:'Integer', X12:out('Callable')),
      f(mapply,
        outbox,
        X3:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(sfilter,
        X3:'Container',
        X9:condition:'Callable',
        X14:out('Container')),
      f(sfilter,
        X3:'Container',
        X10:condition:'Callable',
        X15:out('Container')),
      f(mapply,
        X11,
        X14:container:'ContainerContainer',
        X16:out('FrozenSet')),
      f(mapply,
        X12,
        X15:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        'THREE':value:'Integer',
        X13:'Patch',
        X18:out('Grid')),
      f(fill,
        X18:'Grid',
        'THREE':value:'Integer',
        X16:'Patch',
        X19:out('Grid')),
      f(fill,
        X19:'Grid',
        'THREE':value:'Integer',
        X17:'Patch',
        OUT:out('Grid'))
    ].
solve('53b68214', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(vperiod, X3:obj:'Object', X4:out('Integer')),
      f(toivec, X4:i:'Integer', X5:out('Point')),
      f(interval,
        'ZERO':start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X6:out('Tuple')),
      f(lbind, multiply, X5:fixed:'Any', X7:out('Callable')),
      f(apply, X7, X6:'Container', X8:out('Container')),
      f(lbind, shift, X3:fixed:'Any', X9:out('Callable')),
      f(mapply,
        X9,
        X8:container:'ContainerContainer',
        X10:out('FrozenSet')),
      f(astuple, X1:a:'Integer', X1:b:'Integer', X11:out('Point')),
      f(portrait, X3:'Piece', returns=X12),
      f(shape, X3:'Piece', X13:out('Point')),
      f(add, (1, 0):a:'Numerical', X13:b:'Numerical', X14:out('Numerical')),
      f(decrement, X14:x:'Numerical', X15:out('Numerical')),
      f(shift, X3:'Patch', X15:directions:'Point', X16:out('Patch')),
      f(branch,
        condition=X12,
        X10:a:'Any',
        X16:b:'Any',
        X17:out('Any')),
      f(canvas,
        'ZERO':value:'Integer',
        X11:dimensions:'Point',
        X18:out('Grid')),
      f(paint, X18:'Grid', X3:obj:'Object', X19:out('Grid')),
      f(paint, X19:'Grid', X17:obj:'Object', OUT:out('Grid'))
    ].
solve(d6ad076f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(vmatching, X2:a:'Patch', X3:b:'Patch', returns=X4),
      f(branch, condition=X4, (1, 0):a:'Any', (0, 1):b:'Any', X5:out('Any')),
      f(branch,
        condition=X4,
        uppermost:a:'Any',
        leftmost:b:'Any',
        X6:out('Any')),
      f(valmax,
        X1:'Container',
        X6:compfunc:'Callable',
        X7:out('Integer')),
      f(X6, X2, X8),
      f(equality, X7:a:'Any', X8:b:'Any', returns=X9),
      f(branch, condition=X9, 'NEG_ONE':a:'Any', 'ONE':b:'Any', X10:out('Any')),
      f(multiply,
        X5:a:'Numerical',
        X10:b:'Numerical',
        X11:out('Numerical')),
      f(inbox, X2:'Patch', X12:out('Indices')),
      f(rbind, shoot, X11:fixed:'Any', X13:out('Callable')),
      f(mapply,
        X13,
        X12:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(objects,
        X15:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X16:out('Objects')),
      f(colorfilter,
        X16:objs:'Objects',
        'EIGHT':value:'Integer',
        X17:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X18:out('Callable')),
      f(mfilter, X17:'Container', X18, X19:out('FrozenSet')),
      f(cover, X15:'Grid', X19:'Patch', OUT:out('Grid'))
    ].
solve('6cdd2623', IN, OUT) :-
    [ f(leastcolor, IN:'Element', X1:out('Integer')),
      f(height, IN:'Piece', X2:out('Integer')),
      f(width, IN:'Piece', X3:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:out('Objects')),
      f(merge, X4:containers:'ContainerContainer', X5:out('Container')),
      f(cover, IN:'Grid', X5:'Patch', X6:out('Grid')),
      f(ofcolor, IN:'Grid', X1:value:'Integer', X7:out('Indices')),
      f(prapply, connect, X7, X7, X8),
      f(merge, X8:containers:'ContainerContainer', X9:out('Container')),
      f(decrement, X2:x:'Numerical', X10:out('Numerical')),
      f(decrement, X3:x:'Numerical', X11:out('Numerical')),
      f(lbind, greater, X10:fixed:'Any', X12:out('Callable')),
      f(lbind, greater, X11:fixed:'Any', X13:out('Callable')),
      f(fork,
        both:outer:'Callable',
        positive:a:'Callable',
        X12:b:'Callable',
        X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        first:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        both:outer:'Callable',
        positive:a:'Callable',
        X13:b:'Callable',
        X16:out('Callable')),
      f(compose,
        X16:outer:'Callable',
        last:inner:'Callable',
        X17:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X15:a:'Callable',
        X17:b:'Callable',
        X18:out('Callable')),
      f(sfilter,
        X9:'Container',
        X18:condition:'Callable',
        X19:out('Container')),
      f(fill,
        X6:'Grid',
        X1:value:'Integer',
        X19:'Patch',
        X20:out('Grid')),
      f(fill,
        X20:'Grid',
        X1:value:'Integer',
        X7:'Patch',
        OUT:out('Grid'))
    ].
solve(a3df8b1e, IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X2:out('Indices')),
      f(first, X2:'Container', X3:out('Any')),
      f(shoot,
        X3:start:'Point',
        (-1, 1):direction:'Point',
        X4:out('Indices')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(ofcolor, X5:'Grid', 'ONE':value:'Integer', X6:out('Indices')),
      f(urcorner, X6:'Patch', X7:out('Point')),
      f(shoot,
        X7:start:'Point',
        (-1, -1):direction:'Point',
        X8:out('Indices')),
      f(fill,
        X5:'Grid',
        'ONE':value:'Integer',
        X8:'Patch',
        X9:out('Grid')),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X10:out('Objects')),
      f(first, X10:'Container', X11:out('Any')),
      f(subgrid, X11:'Patch', X9:'Grid', X12:out('Grid')),
      f(shape, X12:'Piece', X13:out('Point')),
      f(subtract,
        X13:a:'Numerical',
        (1, 0):b:'Numerical',
        X14:out('Numerical')),
      f(crop,
        X12:'Grid',
        (1, 0):start:'Point',
        X14:dims:'Point',
        X15:out('Grid')),
      f(vconcat, X15:a:'Grid', X15:b:'Grid', X16:out('Grid')),
      f(vconcat, X16:a:'Grid', X16:b:'Grid', X17:out('Grid')),
      f(vconcat, X17:a:'Grid', X17:b:'Grid', X18:out('Grid')),
      f(hmirror, X18:'Piece', X19:out('Piece')),
      f(crop,
        X19:'Grid',
        (0, 0):start:'Point',
        X1:dims:'Point',
        X20:out('Grid')),
      f(hmirror, X20:'Piece', OUT:out('Piece'))
    ].
solve('8d510a79', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(halve, X1:n:'Numerical', X2:out('Numerical')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X3:out('Indices')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X4:out('Indices')),
      f(ofcolor, IN:'Grid', 'FIVE':value:'Integer', X5:out('Indices')),
      f(rbind, gravitate, X5:fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        initset:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        add:outer:'Callable',
        identity:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        identity:a:'Callable',
        X8:b:'Callable',
        X9:out('Callable')),
      f(mapply,
        X9,
        X4:container:'ContainerContainer',
        X10:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(rbind, greater, X2:fixed:'Any', X12:out('Callable')),
      f(compose,
        X12:outer:'Callable',
        first:inner:'Callable',
        X13:out('Callable')),
      f(sfilter,
        X3:'Container',
        X13:condition:'Callable',
        X14:out('Container')),
      f(difference,
        X3:a:'FrozenSet',
        X14:b:'FrozenSet',
        X15:out('FrozenSet')),
      f(rbind, shoot, (-1, 0):fixed:'Any', X16:out('Callable')),
      f(rbind, shoot, (1, 0):fixed:'Any', X17:out('Callable')),
      f(mapply,
        X16,
        X15:container:'ContainerContainer',
        X18:out('FrozenSet')),
      f(mapply,
        X17,
        X14:container:'ContainerContainer',
        X19:out('FrozenSet')),
      f(combine,
        X18:a:'Container',
        X19:b:'Container',
        X20:out('Container')),
      f(fill,
        X11:'Grid',
        'ONE':value:'Integer',
        X20:'Patch',
        OUT:out('Grid'))
    ].
solve(cdecee7f, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(astuple, 'ONE':a:'Integer', 'THREE':b:'Integer', X2:out('Point')),
      f(size, X1:'Container', X3:out('Integer')),
      f(order,
        X1:'Container',
        leftmost:compfunc:'Callable',
        X4:out('Tuple')),
      f(apply, color, X4:'Container', X5:out('Container')),
      f(rbind, canvas, (1, 1):fixed:'Any', X6:out('Callable')),
      f(apply, X6, X5:'Container', X7:out('Container')),
      f(merge, X7:containers:'ContainerContainer', X8:out('Container')),
      f(dmirror, X8:'Piece', X9:out('Piece')),
      f(subtract,
        'NINE':a:'Numerical',
        X3:b:'Numerical',
        X10:out('Numerical')),
      f(astuple, 'ONE':a:'Integer', X10:b:'Integer', X11:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X11:dimensions:'Point',
        X12:out('Grid')),
      f(hconcat, X9:a:'Grid', X12:b:'Grid', X13:out('Grid')),
      f(hsplit, X13:'Grid', 'THREE':n:'Integer', X14:out('Tuple')),
      f(merge,
        X14:containers:'ContainerContainer',
        X15:out('Container')),
      f(crop,
        X15:'Grid',
        (0, 0):start:'Point',
        X2:dims:'Point',
        X16:out('Grid')),
      f(crop,
        X15:'Grid',
        (1, 0):start:'Point',
        X2:dims:'Point',
        X17:out('Grid')),
      f(crop,
        X15:'Grid',
        (2, 0):start:'Point',
        X2:dims:'Point',
        X18:out('Grid')),
      f(vmirror, X17:'Piece', X19:out('Piece')),
      f(vconcat, X16:a:'Grid', X19:b:'Grid', X20:out('Grid')),
      f(vconcat, X20:a:'Grid', X18:b:'Grid', OUT:out('Grid'))
    ].
solve('3345333e', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(asindices, IN:'Grid', X2:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X3:out('Objects')),
      f(first, X3:'Container', X4:out('Any')),
      f(mostcolor, X4:'Element', X5:out('Integer')),
      f(matcher, first, X5:target:'Any', X6:out('Callable')),
      f(sfilter,
        X4:'Container',
        X6:condition:'Callable',
        X7:out('Container')),
      f(toindices, X7:'Patch', X8:out('Indices')),
      f(ulcorner, X7:'Patch', X9:out('Point')),
      f(difference,
        X2:a:'FrozenSet',
        X8:b:'FrozenSet',
        X10:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X1:value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(subgrid, X7:'Patch', X11:'Grid', X12:out('Grid')),
      f(vmirror, X12:'Piece', X13:out('Piece')),
      f(ofcolor, X13:'Grid', X5:value:'Integer', X14:out('Indices')),
      f(last, X9:'Container', X15:out('Any')),
      f(even, X15:n:'Integer', returns=X16),
      f(invert, X16:n:'Numerical', X17:out('Numerical')),
      f(tojvec, X17:j:'Integer', X18:out('Point')),
      f(add,
        X9:a:'Numerical',
        X18:b:'Numerical',
        X19:out('Numerical')),
      f(shift, X14:'Patch', X19:directions:'Point', X20:out('Patch')),
      f(fill,
        X11:'Grid',
        X5:value:'Integer',
        X20:'Patch',
        OUT:out('Grid'))
    ].
solve(b190f7f5, IN, OUT) :-
    [ f(dmirror, IN:'Piece', X1:out('Piece')),
      f(portrait, IN:'Piece', returns=X2),
      f(branch,
        condition=X2,
        X1:a:'Any',
        IN:b:'Any',
        X3:out('Any')),
      f(lefthalf, X3:'Grid', X4:out('Grid')),
      f(righthalf, X3:'Grid', X5:out('Grid')),
      f(palette, X4:'Element', X6:out('IntegerSet')),
      f(contained, 'EIGHT':value:'Any', X6:'Container', returns=X7),
      f(branch,
        condition=X7,
        X4:a:'Any',
        X5:b:'Any',
        X8:out('Any')),
      f(branch,
        condition=X7,
        X5:a:'Any',
        X4:b:'Any',
        X9:out('Any')),
      f(width, X9:'Piece', X10:out('Integer')),
      f(upscale,
        X9:'Element',
        X10:factor:'Integer',
        X11:out('Element')),
      f(repeat, X8:item:'Any', X10:num:'Integer', X12:out('Tuple')),
      f(merge,
        X12:containers:'ContainerContainer',
        X13:out('Container')),
      f(dmirror, X13:'Piece', X14:out('Piece')),
      f(repeat, X14:item:'Any', X10:num:'Integer', X15:out('Tuple')),
      f(merge,
        X15:containers:'ContainerContainer',
        X16:out('Container')),
      f(dmirror, X16:'Piece', X17:out('Piece')),
      f(ofcolor, X17:'Grid', 'ZERO':value:'Integer', X18:out('Indices')),
      f(fill,
        X11:'Grid',
        'ZERO':value:'Integer',
        X18:'Patch',
        X19:out('Grid')),
      f(dmirror, X19:'Piece', X20:out('Piece')),
      f(branch,
        condition=X2,
        X20:a:'Any',
        X19:b:'Any',
        OUT:out('Any'))
    ].
solve(caa06a1f, IN, OUT) :-
    [ f(asobject, IN:'Grid', X1:out('Object')),
      f(shape, IN:'Piece', X2:out('Point')),
      f(decrement, X2:x:'Numerical', X3:out('Numerical')),
      f(index, IN:'Grid', X3:loc:'Point', X4:out('Integer')),
      f(double, X2:n:'Numerical', X5:out('Numerical')),
      f(canvas,
        X4:value:'Integer',
        X5:dimensions:'Point',
        X6:out('Grid')),
      f(paint, X6:'Grid', X1:obj:'Object', X7:out('Grid')),
      f(objects,
        X7:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X8:out('Objects')),
      f(first, X8:'Container', X9:out('Any')),
      f(shift, X9:'Patch', (0, -1):directions:'Point', X10:out('Patch')),
      f(vperiod, X10:obj:'Object', X11:out('Integer')),
      f(hperiod, X10:obj:'Object', X12:out('Integer')),
      f(neighbors, (0, 0):loc:'Point', X13:out('Indices')),
      f(lbind, mapply, neighbors:fixed:'Any', X14:out('Callable')),
      f(power, X14, 'TWO':n:'Integer', X15:out('Callable')),
      f(X15, X13, X16),
      f(astuple, X11:a:'Integer', X12:b:'Integer', X17:out('Point')),
      f(lbind, multiply, X17:fixed:'Any', X18:out('Callable')),
      f(apply, X18, X16:'Container', X19:out('Container')),
      f(lbind, shift, X10:fixed:'Any', X20:out('Callable')),
      f(mapply,
        X20,
        X19:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(paint, IN:'Grid', X21:obj:'Object', OUT:out('Grid'))
    ].
solve(e21d9049, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(leastcolor, IN:'Element', X2:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:out('Objects')),
      f(ofcolor, IN:'Grid', X2:value:'Integer', X4:out('Indices')),
      f(merge, X3:containers:'ContainerContainer', X5:out('Container')),
      f(shape, X5:'Piece', X6:out('Point')),
      f(neighbors, (0, 0):loc:'Point', X7:out('Indices')),
      f(lbind, mapply, neighbors:fixed:'Any', X8:out('Callable')),
      f(power, X8, 'TWO':n:'Integer', X9:out('Callable')),
      f(X9, X7, X10),
      f(lbind, multiply, X6:fixed:'Any', X11:out('Callable')),
      f(lbind, shift, X5:fixed:'Any', X12:out('Callable')),
      f(apply, X11, X10:'Container', X13:out('Container')),
      f(mapply,
        X12,
        X13:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(lbind, hmatching, X4:fixed:'Any', X15:out('Callable')),
      f(lbind, vmatching, X4:fixed:'Any', X16:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X15:a:'Callable',
        X16:b:'Callable',
        X17:out('Callable')),
      f(compose,
        X17:outer:'Callable',
        initset:inner:'Callable',
        X18:out('Callable')),
      f(paint, IN:'Grid', X14:obj:'Object', X19:out('Grid')),
      f(sfilter,
        X1:'Container',
        X18:condition:'Callable',
        X20:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X20:b:'FrozenSet',
        X21:out('FrozenSet')),
      f(cover, X19:'Grid', X21:'Patch', OUT:out('Grid'))
    ].
solve(d89b689b, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X2:out('Indices')),
      f(replace,
        IN:'Grid',
        'EIGHT':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X3:out('Grid')),
      f(vsplit, X3:'Grid', 'TWO':n:'Integer', X4:out('Tuple')),
      f(rbind, order, leftmost:fixed:'Any', X5:out('Callable')),
      f(lbind, apply, color:fixed:'Any', X6:out('Callable')),
      f(rbind, repeat, 'ONE':fixed:'Any', X7:out('Callable')),
      f(chain,
        X7:h:'Callable',
        X6:g:'Callable',
        X5:f:'Callable',
        X8:out('Callable')),
      f(matcher, first, 'ZERO':target:'Any', X9:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X9:inner:'Callable',
        X10:out('Callable')),
      f(rbind, sfilter, X10:fixed:'Any', X11:out('Callable')),
      f(lbind, apply, initset:fixed:'Any', X12:out('Callable')),
      f(chain,
        X12:h:'Callable',
        X11:g:'Callable',
        asobject:f:'Callable',
        X13:out('Callable')),
      f(compose,
        X8:outer:'Callable',
        X13:inner:'Callable',
        X14:out('Callable')),
      f(apply, X14, X4:'Container', X15:out('Container')),
      f(merge,
        X15:containers:'ContainerContainer',
        X16:out('Container')),
      f(ulcorner, X2:'Patch', X17:out('Point')),
      f(asindices, X16:'Grid', X18:out('Indices')),
      f(toobject, X18:'Patch', X16:'Grid', X19:out('Object')),
      f(shift, X19:'Patch', X17:directions:'Point', X20:out('Patch')),
      f(cover, IN:'Grid', X1:'Patch', X21:out('Grid')),
      f(paint, X21:'Grid', X20:obj:'Object', OUT:out('Grid'))
    ].
solve('746b3537', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(sfilter,
        X2:'Container',
        vline:condition:'Callable',
        X3:out('Container')),
      f(compose,
        positive:outer:'Callable',
        size:inner:'Callable',
        X4:out('Callable')),
      f(X4, X3, X5),
      f(branch,
        condition=X5,
        X1:a:'Any',
        IN:b:'Any',
        X6:out('Any')),
      f(height, X6:'Piece', X7:out('Integer')),
      f(astuple, X7:a:'Integer', 'ONE':b:'Integer', X8:out('Point')),
      f(crop,
        X6:'Grid',
        (0, 0):start:'Point',
        X8:dims:'Point',
        X9:out('Grid')),
      f(objects,
        X9:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X10:out('Objects')),
      f(asindices, X9:'Grid', X11:out('Indices')),
      f(apply, center, X10:'Container', X12:out('Container')),
      f(difference,
        X11:a:'FrozenSet',
        X12:b:'FrozenSet',
        X13:out('FrozenSet')),
      f(fill,
        X9:'Grid',
        'ZERO':value:'Integer',
        X13:'Patch',
        X14:out('Grid')),
      f(vsplit, X14:'Grid', X7:n:'Integer', X15:out('Tuple')),
      f(canvas, 'ZERO':value:'Integer', (1, 1):dimensions:'Point', X16:out('Grid')),
      f(rbind, equality, X16:fixed:'Any', X17:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X17:inner:'Callable',
        X18:out('Callable')),
      f(sfilter,
        X15:'Container',
        X18:condition:'Callable',
        X19:out('Container')),
      f(merge,
        X19:containers:'ContainerContainer',
        X20:out('Container')),
      f(dmirror, X20:'Piece', X21:out('Piece')),
      f(branch,
        condition=X5,
        X21:a:'Any',
        X20:b:'Any',
        OUT:out('Any'))
    ].
solve(63613498, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (3, 3):dims:'Point',
        X2:out('Grid')),
      f(partition, X2:'Grid', X3:out('Objects')),
      f(colorfilter,
        X3:objs:'Objects',
        'ZERO':value:'Integer',
        X4:out('Objects')),
      f(difference,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(first, X5:'Container', X6:out('Any')),
      f(toindices, X6:'Patch', X7:out('Indices')),
      f(ulcorner, X7:'Patch', X8:out('Point')),
      f(invert, X8:n:'Numerical', X9:out('Numerical')),
      f(shift, X7:'Patch', X9:directions:'Point', X10:out('Patch')),
      f(totuple, X1:container:'FrozenSet', X11:out('Tuple')),
      f(apply, toindices, X11:'Container', X12:out('Container')),
      f(apply, normalize, X12:'Container', X13:out('Container')),
      f(pair, X11:a:'Tuple', X13:b:'Tuple', X14:out('TupleTuple')),
      f(matcher, last, X10:target:'Any', X15:out('Callable')),
      f(sfilter,
        X14:'Container',
        X15:condition:'Callable',
        X16:out('Container')),
      f(matcher, first, X6:target:'Any', X17:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X17:inner:'Callable',
        X18:out('Callable')),
      f(extract,
        X16:'Container',
        X18:condition:'Callable',
        X19:out('Any')),
      f(first, X19:'Container', X20:out('Any')),
      f(recolor, 'FIVE':value:'Integer', X20:'Patch', X21:out('Object')),
      f(paint, IN:'Grid', X21:obj:'Object', OUT:out('Grid'))
    ].
solve('06df4c85', IN, OUT) :-
    [ f(partition, IN:'Grid', X1:out('Objects')),
      f(mostcolor, IN:'Element', X2:out('Integer')),
      f(ofcolor, IN:'Grid', X2:value:'Integer', X3:out('Indices')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X4:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X5:out('Any')),
      f(difference,
        X1:a:'FrozenSet',
        X4:b:'FrozenSet',
        X6:out('FrozenSet')),
      f(remove, X5:value:'Any', X6:'Container', X7:out('Container')),
      f(merge, X7:containers:'ContainerContainer', X8:out('Container')),
      f(product,
        X8:a:'Container',
        X8:b:'Container',
        X9:out('FrozenSet')),
      f(power, first, 'TWO':n:'Integer', X10:out('Callable')),
      f(compose,
        first:outer:'Callable',
        last:inner:'Callable',
        X11:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X10:a:'Callable',
        X11:b:'Callable',
        X12:out('Callable')),
      f(sfilter,
        X9:'Container',
        X12:condition:'Callable',
        X13:out('Container')),
      f(compose,
        last:outer:'Callable',
        first:inner:'Callable',
        X14:out('Callable')),
      f(power, last, 'TWO':n:'Integer', X15:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X14:a:'Callable',
        X15:b:'Callable',
        X16:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X16:b:'Callable',
        X17:out('Callable')),
      f(apply, X17, X13:'Container', X18:out('Container')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X19:out('Callable')),
      f(mfilter, X18:'Container', X19, X20:out('FrozenSet')),
      f(paint, IN:'Grid', X20:obj:'Object', X21:out('Grid')),
      f(fill,
        X21:'Grid',
        X2:value:'Integer',
        X3:'Patch',
        OUT:out('Grid'))
    ].
solve(f9012d9b, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X2:out('Indices')),
      f(lbind, contained, 'ZERO':fixed:'Any', X3:out('Callable')),
      f(chain,
        flip:h:'Callable',
        X3:g:'Callable',
        palette:f:'Callable',
        X4:out('Callable')),
      f(mfilter, X1:'Container', X4, X5:out('FrozenSet')),
      f(vsplit, IN:'Grid', 'TWO':n:'Integer', X6:out('Tuple')),
      f(hsplit, IN:'Grid', 'TWO':n:'Integer', X7:out('Tuple')),
      f(extract,
        X6:'Container',
        X4:condition:'Callable',
        X8:out('Any')),
      f(extract,
        X7:'Container',
        X4:condition:'Callable',
        X9:out('Any')),
      f(asobject, X8:'Grid', X10:out('Object')),
      f(asobject, X9:'Grid', X11:out('Object')),
      f(vperiod, X10:obj:'Object', X12:out('Integer')),
      f(hperiod, X11:obj:'Object', X13:out('Integer')),
      f(neighbors, (0, 0):loc:'Point', X14:out('Indices')),
      f(mapply,
        neighbors,
        X14:container:'ContainerContainer',
        X15:out('FrozenSet')),
      f(astuple, X12:a:'Integer', X13:b:'Integer', X16:out('Point')),
      f(rbind, multiply, X16:fixed:'Any', X17:out('Callable')),
      f(apply, X17, X15:'Container', X18:out('Container')),
      f(lbind, shift, X5:fixed:'Any', X19:out('Callable')),
      f(mapply,
        X19,
        X18:container:'ContainerContainer',
        X20:out('FrozenSet')),
      f(paint, IN:'Grid', X20:obj:'Object', X21:out('Grid')),
      f(subgrid, X2:'Patch', X21:'Grid', OUT:out('Grid'))
    ].
solve('4522001f', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(toindices, X2:'Patch', X3:out('Indices')),
      f(contained, (0, 2):value:'Any', X3:'Container', returns=X4),
      f(contained, (2, 2):value:'Any', X3:'Container', returns=X5),
      f(contained, (2, 0):value:'Any', X3:'Container', returns=X6),
      f(astuple, 'NINE':a:'Integer', 'NINE':b:'Integer', X7:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X7:dimensions:'Point',
        X8:out('Grid')),
      f(astuple, 'THREE':a:'Integer', (0, 0):b:'Integer', X9:out('Point')),
      f(initset, X9:value:'Any', X10:out('FrozenSet')),
      f(upscale, X10:'Element', 'TWO':factor:'Integer', X11:out('Element')),
      f(upscale, X11:'Element', 'TWO':factor:'Integer', X12:out('Element')),
      f(shape, X12:'Piece', X13:out('Point')),
      f(shift, X12:'Patch', X13:directions:'Point', X14:out('Patch')),
      f(combine,
        X12:a:'Container',
        X14:b:'Container',
        X15:out('Container')),
      f(paint, X8:'Grid', X15:obj:'Object', X16:out('Grid')),
      f(rot90, X16:'Grid', X17:out('Grid')),
      f(rot180, X16:'Grid', X18:out('Grid')),
      f(rot270, X16:'Grid', X19:out('Grid')),
      f(branch,
        condition=X4,
        X17:a:'Any',
        X16:b:'Any',
        X20:out('Any')),
      f(branch,
        condition=X5,
        X18:a:'Any',
        X20:b:'Any',
        X21:out('Any')),
      f(branch,
        condition=X6,
        X19:a:'Any',
        X21:b:'Any',
        OUT:out('Any'))
    ].
solve(a48eeaf7, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X3:out('Objects')),
      f(rbind, gravitate, X2:fixed:'Any', X4:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X3:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(rbind, vmatching, X2:fixed:'Any', X8:out('Callable')),
      f(rbind, hmatching, X2:fixed:'Any', X9:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X8:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(sfilter,
        X3:'Container',
        X10:condition:'Callable',
        X11:out('Container')),
      f(merge, X3:containers:'ContainerContainer', X12:out('Container')),
      f(cover, X7:'Grid', X12:'Patch', X13:out('Grid')),
      f(difference,
        X3:a:'FrozenSet',
        X11:b:'FrozenSet',
        X14:out('FrozenSet')),
      f(rbind, position, X2:fixed:'Any', X15:out('Callable')),
      f(rbind, manhattan, X2:fixed:'Any', X16:out('Callable')),
      f(compose,
        halve:outer:'Callable',
        X16:inner:'Callable',
        X17:out('Callable')),
      f(fork,
        multiply:outer:'Callable',
        X17:a:'Callable',
        X15:b:'Callable',
        X18:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X18:a:'Callable',
        X15:b:'Callable',
        X19:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X19:b:'Callable',
        X20:out('Callable')),
      f(mapply,
        X20,
        X14:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(paint, X13:'Grid', X21:obj:'Object', OUT:out('Grid'))
    ].
solve(eb5a1d5d, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(color, X2:obj:'Object', X3:out('Integer')),
      f(compose,
        invert:outer:'Callable',
        width:inner:'Callable',
        X4:out('Callable')),
      f(order,
        X1:'Container',
        X4:compfunc:'Callable',
        X5:out('Tuple')),
      f(apply, color, X5:'Container', X6:out('Container')),
      f(size, X5:'Container', X7:out('Integer')),
      f(double, X7:n:'Numerical', X8:out('Numerical')),
      f(decrement, X8:x:'Numerical', X9:out('Numerical')),
      f(interval,
        'ZERO':start:'Integer',
        X7:stop:'Integer',
        'ONE':step:'Integer',
        X10:out('Tuple')),
      f(pair, X10:a:'Tuple', X10:b:'Tuple', X11:out('TupleTuple')),
      f(decrement, X9:x:'Numerical', X12:out('Numerical')),
      f(interval,
        X12:start:'Integer',
        'ZERO':stop:'Integer',
        'NEG_TWO':step:'Integer',
        X13:out('Tuple')),
      f(papply, add, X13:a:'Tuple', X10:b:'Tuple', X14:out('Tuple')),
      f(order,
        X14:'Container',
        invert:compfunc:'Callable',
        X15:out('Tuple')),
      f(pair, X15:a:'Tuple', X15:b:'Tuple', X16:out('TupleTuple')),
      f(pair, X11:a:'Tuple', X16:b:'Tuple', X17:out('TupleTuple')),
      f(apply, box, X17:'Container', X18:out('Container')),
      f(mpapply,
        recolor,
        X6:a:'Tuple',
        X18:b:'Tuple',
        X19:out('Tuple')),
      f(astuple, X9:a:'Integer', X9:b:'Integer', X20:out('Point')),
      f(canvas,
        'ZERO':value:'Integer',
        X20:dimensions:'Point',
        X21:out('Grid')),
      f(paint, X21:'Grid', X19:obj:'Object', X22:out('Grid')),
      f(replace,
        X22:'Grid',
        'ZERO':replacee:'Integer',
        X3:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(e179c5f4, IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X2:out('Indices')),
      f(first, X2:'Container', X3:out('Any')),
      f(shoot,
        X3:start:'Point',
        (-1, 1):direction:'Point',
        X4:out('Indices')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(ofcolor, X5:'Grid', 'ONE':value:'Integer', X6:out('Indices')),
      f(urcorner, X6:'Patch', X7:out('Point')),
      f(shoot,
        X7:start:'Point',
        (-1, -1):direction:'Point',
        X8:out('Indices')),
      f(fill,
        X5:'Grid',
        'ONE':value:'Integer',
        X8:'Patch',
        X9:out('Grid')),
      f(ofcolor, X9:'Grid', 'ONE':value:'Integer', X10:out('Indices')),
      f(subgrid, X10:'Patch', X9:'Grid', X11:out('Grid')),
      f(height, X11:'Piece', X12:out('Integer')),
      f(width, X11:'Piece', X13:out('Integer')),
      f(decrement, X12:x:'Numerical', X14:out('Numerical')),
      f(astuple, X14:a:'Integer', X13:b:'Integer', X15:out('Point')),
      f(ulcorner, X10:'Patch', X16:out('Point')),
      f(crop,
        X9:'Grid',
        X16:start:'Point',
        X15:dims:'Point',
        X17:out('Grid')),
      f(repeat, X17:item:'Any', 'NINE':num:'Integer', X18:out('Tuple')),
      f(merge,
        X18:containers:'ContainerContainer',
        X19:out('Container')),
      f(astuple, X1:a:'Integer', X13:b:'Integer', X20:out('Point')),
      f(crop,
        X19:'Grid',
        (0, 0):start:'Point',
        X20:dims:'Point',
        X21:out('Grid')),
      f(hmirror, X21:'Piece', X22:out('Piece')),
      f(replace,
        X22:'Grid',
        'ZERO':replacee:'Integer',
        'EIGHT':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('228f6490', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'ZERO':value:'Integer',
        X2:out('Objects')),
      f(rbind, bordering, IN:fixed:'Any', X3:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(sfilter,
        X2:'Container',
        X4:condition:'Callable',
        X5:out('Container')),
      f(first, X5:'Container', X6:out('Any')),
      f(last, X5:'Container', X7:out('Any')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X8:out('FrozenSet')),
      f(compose,
        normalize:outer:'Callable',
        toindices:inner:'Callable',
        X9:out('Callable')),
      f(X9, X6, X10),
      f(X9, X7, X11),
      f(matcher, X9, X10:target:'Any', X12:out('Callable')),
      f(matcher, X9, X11:target:'Any', X13:out('Callable')),
      f(extract,
        X8:'Container',
        X12:condition:'Callable',
        X14:out('Any')),
      f(extract,
        X8:'Container',
        X13:condition:'Callable',
        X15:out('Any')),
      f(ulcorner, X6:'Patch', X16:out('Point')),
      f(ulcorner, X7:'Patch', X17:out('Point')),
      f(ulcorner, X14:'Patch', X18:out('Point')),
      f(ulcorner, X15:'Patch', X19:out('Point')),
      f(subtract,
        X16:a:'Numerical',
        X18:b:'Numerical',
        X20:out('Numerical')),
      f(subtract,
        X17:a:'Numerical',
        X19:b:'Numerical',
        X21:out('Numerical')),
      f(move,
        IN:'Grid',
        X14:obj:'Object',
        X20:offset:'Point',
        X22:out('Grid')),
      f(move,
        X22:'Grid',
        X15:obj:'Object',
        X21:offset:'Point',
        OUT:out('Grid'))
    ].
solve('995c5fa3', IN, OUT) :-
    [ f(hsplit, IN:'Grid', 'THREE':n:'Integer', X1:out('Tuple')),
      f(astuple, 'TWO':a:'Integer', 'ONE':b:'Integer', X2:out('Point')),
      f(rbind, ofcolor, 'ZERO':fixed:'Any', X3:out('Callable')),
      f(compose,
        ulcorner:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(compose,
        size:outer:'Callable',
        X3:inner:'Callable',
        X5:out('Callable')),
      f(matcher, X5, 'ZERO':target:'Any', X6:out('Callable')),
      f(matcher, X4, (1, 1):target:'Any', X7:out('Callable')),
      f(matcher, X4, (1, 0):target:'Any', X8:out('Callable')),
      f(matcher, X4, X2:target:'Any', X9:out('Callable')),
      f(rbind, multiply, 'THREE':fixed:'Any', X10:out('Callable')),
      f(power, double, 'TWO':n:'Integer', X11:out('Callable')),
      f(compose,
        double:outer:'Callable',
        X6:inner:'Callable',
        X12:out('Callable')),
      f(chain,
        X11:h:'Callable',
        double:g:'Callable',
        X7:f:'Callable',
        X13:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        X8:inner:'Callable',
        X14:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        X9:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X12:a:'Callable',
        X13:b:'Callable',
        X16:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X14:a:'Callable',
        X15:b:'Callable',
        X17:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X16:a:'Callable',
        X17:b:'Callable',
        X18:out('Callable')),
      f(rbind, canvas, (1, 1):fixed:'Any', X19:out('Callable')),
      f(compose,
        X19:outer:'Callable',
        X18:inner:'Callable',
        X20:out('Callable')),
      f(apply, X20, X1:'Container', X21:out('Container')),
      f(merge,
        X21:containers:'ContainerContainer',
        X22:out('Container')),
      f(hupscale, X22:'Grid', 'THREE':factor:'Integer', OUT:out('Grid'))
    ].
solve(d06dbe63, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'EIGHT':value:'Integer', X1:out('Indices')),
      f(center, X1:'Patch', X2:out('Point')),
      f(connect, (0, 0):a:'Point', (1, 0):b:'Point', X3:out('Indices')),
      f(connect, (0, 0):a:'Point', (0, 2):b:'Point', X4:out('Indices')),
      f(combine,
        X3:a:'Container',
        X4:b:'Container',
        X5:out('Container')),
      f(subtract,
        X2:a:'Numerical',
        (2, 0):b:'Numerical',
        X6:out('Numerical')),
      f(shift, X5:'Patch', X6:directions:'Point', X7:out('Patch')),
      f(astuple, 'NEG_TWO':a:'Integer', 'TWO':b:'Integer', X8:out('Point')),
      f(interval,
        'ZERO':start:'Integer',
        'FIVE':stop:'Integer',
        'ONE':step:'Integer',
        X9:out('Tuple')),
      f(lbind, multiply, X8:fixed:'Any', X10:out('Callable')),
      f(apply, X10, X9:'Container', X11:out('Container')),
      f(lbind, shift, X7:fixed:'Any', X12:out('Callable')),
      f(mapply,
        X12,
        X11:container:'ContainerContainer',
        X13:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FIVE':value:'Integer',
        X13:'Patch',
        X14:out('Grid')),
      f(rot180, X14:'Grid', X15:out('Grid')),
      f(ofcolor, X15:'Grid', 'EIGHT':value:'Integer', X16:out('Indices')),
      f(center, X16:'Patch', X17:out('Point')),
      f(subtract,
        X17:a:'Numerical',
        X6:b:'Numerical',
        X18:out('Numerical')),
      f(shift, X13:'Patch', X18:directions:'Point', X19:out('Patch')),
      f(toivec, 'NEG_TWO':i:'Integer', X20:out('Point')),
      f(shift, X19:'Patch', X20:directions:'Point', X21:out('Patch')),
      f(fill,
        X15:'Grid',
        'FIVE':value:'Integer',
        X21:'Patch',
        X22:out('Grid')),
      f(rot180, X22:'Grid', OUT:out('Grid'))
    ].
solve('36fdfd69', IN, OUT) :-
    [ f(upscale, IN:'Element', 'TWO':factor:'Integer', X1:out('Element')),
      f(ofcolor, X1:'Grid', 'TWO':value:'Integer', X2:out('Indices')),
      f(mapply,
        neighbors,
        X2:container:'ContainerContainer',
        X3:out('FrozenSet')),
      f(difference,
        X3:a:'FrozenSet',
        X2:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(fill,
        X1:'Grid',
        'FOUR':value:'Integer',
        X4:'Patch',
        X5:out('Grid')),
      f(objects,
        X5:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X6:out('Objects')),
      f(colorfilter,
        X6:objs:'Objects',
        'FOUR':value:'Integer',
        X7:out('Objects')),
      f(totuple, X7:container:'FrozenSet', X8:out('Tuple')),
      f(rbind, subgrid, X5:fixed:'Any', X9:out('Callable')),
      f(apply, X9, X8:'Container', X10:out('Container')),
      f(apply, ulcorner, X8:'Container', X11:out('Container')),
      f(rbind, ofcolor, 'TWO':fixed:'Any', X12:out('Callable')),
      f(apply, X12, X10:'Container', X13:out('Container')),
      f(papply,
        subgrid,
        X13:a:'Tuple',
        X10:b:'Tuple',
        X14:out('Tuple')),
      f(rbind, downscale, 'TWO':fixed:'Any', X15:out('Callable')),
      f(apply, X15, X14:'Container', X16:out('Container')),
      f(apply, asindices, X16:'Container', X17:out('Container')),
      f(apply, increment, X11:'Container', X18:out('Container')),
      f(apply, halve, X18:'Container', X19:out('Container')),
      f(mpapply,
        shift,
        X17:a:'Tuple',
        X19:b:'Tuple',
        X20:out('Tuple')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X20:'Patch',
        X21:out('Grid')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X22:out('Indices')),
      f(fill,
        X21:'Grid',
        'TWO':value:'Integer',
        X22:'Patch',
        OUT:out('Grid'))
    ].
solve('0a938d79', IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch,
        condition=X1,
        dmirror:a:'Any',
        identity:b:'Any',
        X2:out('Any')),
      f(X2, IN, X3),
      f(objects,
        X3:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X4:out('Objects')),
      f(argmin,
        X4:'Container',
        leftmost:compfunc:'Callable',
        X5:out('Any')),
      f(argmax,
        X4:'Container',
        leftmost:compfunc:'Callable',
        X6:out('Any')),
      f(color, X5:obj:'Object', X7:out('Integer')),
      f(color, X6:obj:'Object', X8:out('Integer')),
      f(leftmost, X5:'Patch', X9:out('Integer')),
      f(leftmost, X6:'Patch', X10:out('Integer')),
      f(subtract,
        X10:a:'Numerical',
        X9:b:'Numerical',
        X11:out('Numerical')),
      f(double, X11:n:'Numerical', X12:out('Numerical')),
      f(multiply, 'THREE':a:'Numerical', 'TEN':b:'Numerical', X13:out('Numerical')),
      f(interval,
        X9:start:'Integer',
        X13:stop:'Integer',
        X12:step:'Integer',
        X14:out('Tuple')),
      f(interval,
        X10:start:'Integer',
        X13:stop:'Integer',
        X12:step:'Integer',
        X15:out('Tuple')),
      f(compose,
        vfrontier:outer:'Callable',
        tojvec:inner:'Callable',
        X16:out('Callable')),
      f(mapply,
        X16,
        X14:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(mapply,
        X16,
        X15:container:'ContainerContainer',
        X18:out('FrozenSet')),
      f(recolor, X7:value:'Integer', X17:'Patch', X19:out('Object')),
      f(recolor, X8:value:'Integer', X18:'Patch', X20:out('Object')),
      f(combine,
        X19:a:'Container',
        X20:b:'Container',
        X21:out('Container')),
      f(paint, X3:'Grid', X21:obj:'Object', X22:out('Grid')),
      f(X2, X22, OUT)
    ].
solve('045e512c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(apply, size, X1:'Container', X2:out('Container')),
      f(maximum, X2:container:'IntegerSet', X3:out('Integer')),
      f(lbind, greater, X3:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        size:inner:'Callable',
        X5:out('Callable')),
      f(sfilter,
        X1:'Container',
        X5:condition:'Callable',
        X6:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X6:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(first, X7:'Container', X8:out('Any')),
      f(interval,
        'ONE':start:'Integer',
        'FOUR':stop:'Integer',
        'ONE':step:'Integer',
        X9:out('Tuple')),
      f(lbind, multiply, 'FOUR':fixed:'Any', X10:out('Callable')),
      f(apply, X10, X9:'Container', X11:out('Container')),
      f(product,
        X6:a:'Container',
        X11:b:'Container',
        X12:out('FrozenSet')),
      f(totuple, X12:container:'FrozenSet', X13:out('Tuple')),
      f(apply, first, X13:'Container', X14:out('Container')),
      f(apply, last, X13:'Container', X15:out('Container')),
      f(apply, color, X14:'Container', X16:out('Container')),
      f(lbind, position, X8:fixed:'Any', X17:out('Callable')),
      f(apply, X17, X14:'Container', X18:out('Container')),
      f(papply,
        multiply,
        X18:a:'Tuple',
        X15:b:'Tuple',
        X19:out('Tuple')),
      f(rbind, recolor, X8:fixed:'Any', X20:out('Callable')),
      f(apply, X20, X16:'Container', X21:out('Container')),
      f(mpapply,
        shift,
        X21:a:'Tuple',
        X19:b:'Tuple',
        X22:out('Tuple')),
      f(paint, IN:'Grid', X22:obj:'Object', X23:out('Grid')),
      f(paint, X23:'Grid', X8:obj:'Object', OUT:out('Grid'))
    ].
solve(82819916, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(index, IN:'Grid', (1, 0):loc:'Point', X2:out('Integer')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(remove, X3:value:'Any', X1:'Container', X4:out('Container')),
      f(matcher, first, X2:target:'Any', X5:out('Callable')),
      f(sfilter,
        X3:'Container',
        X5:condition:'Callable',
        X6:out('Container')),
      f(difference,
        X3:a:'FrozenSet',
        X6:b:'FrozenSet',
        X7:out('FrozenSet')),
      f(lbind, shift, X6:fixed:'Any', X8:out('Callable')),
      f(lbind, shift, X7:fixed:'Any', X9:out('Callable')),
      f(totuple, X4:container:'FrozenSet', X10:out('Tuple')),
      f(apply, ulcorner, X10:'Container', X11:out('Container')),
      f(apply, urcorner, X10:'Container', X12:out('Container')),
      f(apply, first, X11:'Container', X13:out('Container')),
      f(apply, decrement, X13:'Container', X14:out('Container')),
      f(apply, toivec, X14:'Container', X15:out('Container')),
      f(lbind, index, IN:fixed:'Any', X16:out('Callable')),
      f(apply, X16, X11:'Container', X17:out('Container')),
      f(apply, X16, X12:'Container', X18:out('Container')),
      f(apply, X8, X15:'Container', X19:out('Container')),
      f(apply, X9, X15:'Container', X20:out('Container')),
      f(mpapply,
        recolor,
        X17:a:'Tuple',
        X19:b:'Tuple',
        X21:out('Tuple')),
      f(mpapply,
        recolor,
        X18:a:'Tuple',
        X20:b:'Tuple',
        X22:out('Tuple')),
      f(paint, IN:'Grid', X21:obj:'Object', X23:out('Grid')),
      f(paint, X23:'Grid', X22:obj:'Object', OUT:out('Grid'))
    ].
solve('99fa7670', IN, OUT) :-
    [ f(shape, IN:'Piece', X1:out('Point')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(rbind, shoot, (0, 1):fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        center:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X2:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(add, X1:a:'Numerical', (1, -1):b:'Numerical', X8:out('Numerical')),
      f(initset, X8:value:'Any', X9:out('FrozenSet')),
      f(recolor, 'ZERO':value:'Integer', X9:'Patch', X10:out('Object')),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X11:out('Objects')),
      f(insert,
        X10:value:'Any',
        X11:container:'FrozenSet',
        X12:out('FrozenSet')),
      f(order,
        X12:'Container',
        uppermost:compfunc:'Callable',
        X13:out('Tuple')),
      f(first, X13:'Container', X14:out('Any')),
      f(remove,
        X10:value:'Any',
        X13:'Container',
        X15:out('Container')),
      f(remove,
        X14:value:'Any',
        X13:'Container',
        X16:out('Container')),
      f(compose,
        lrcorner:outer:'Callable',
        first:inner:'Callable',
        X17:out('Callable')),
      f(compose,
        lrcorner:outer:'Callable',
        last:inner:'Callable',
        X18:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X17:a:'Callable',
        X18:b:'Callable',
        X19:out('Callable')),
      f(compose,
        color:outer:'Callable',
        first:inner:'Callable',
        X20:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X20:a:'Callable',
        X19:b:'Callable',
        X21:out('Callable')),
      f(pair, X15:a:'Tuple', X16:b:'Tuple', X22:out('TupleTuple')),
      f(mapply,
        X21,
        X22:container:'ContainerContainer',
        X23:out('FrozenSet')),
      f(underpaint, X7:'Grid', X23:obj:'Object', OUT:out('Grid'))
    ].
solve('72322fa7', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, numcolors, 'ONE':target:'Any', X2:out('Callable')),
      f(sfilter,
        X1:'Container',
        X2:condition:'Callable',
        X3:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(lbind, matcher, first:fixed:'Any', X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        mostcolor:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        identity:a:'Callable',
        X7:b:'Callable',
        X8:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X9:out('Callable')),
      f(compose,
        X9:outer:'Callable',
        X7:inner:'Callable',
        X10:out('Callable')),
      f(compose,
        X9:outer:'Callable',
        X8:inner:'Callable',
        X11:out('Callable')),
      f(compose,
        ulcorner:outer:'Callable',
        X8:inner:'Callable',
        X12:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        ulcorner:a:'Callable',
        X12:b:'Callable',
        X13:out('Callable')),
      f(lbind, rbind, add:fixed:'Any', X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        X13:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X15:a:'Callable',
        X11:b:'Callable',
        X16:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X17:out('Callable')),
      f(compose,
        X17:outer:'Callable',
        normalize:inner:'Callable',
        X18:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X18:a:'Callable',
        X10:b:'Callable',
        X19:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X18:a:'Callable',
        X16:b:'Callable',
        X20:out('Callable')),
      f(mapply,
        X19,
        X4:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(mapply,
        X20,
        X4:container:'ContainerContainer',
        X22:out('FrozenSet')),
      f(paint, IN:'Grid', X21:obj:'Object', X23:out('Grid')),
      f(paint, X23:'Grid', X22:obj:'Object', OUT:out('Grid'))
    ].
solve('855e0971', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X2:out('Objects')),
      f(sizefilter, X2:'Container', 'ONE':n:'Integer', X3:out('FrozenSet')),
      f(difference,
        X2:a:'FrozenSet',
        X3:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(first, X4:'Container', X5:out('Any')),
      f(portrait, X5:'Piece', returns=X6),
      f(branch,
        condition=X6,
        X1:a:'Any',
        IN:b:'Any',
        X7:out('Any')),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X8:out('Objects')),
      f(sizefilter, X8:'Container', 'ONE':n:'Integer', X9:out('FrozenSet')),
      f(difference,
        X8:a:'FrozenSet',
        X9:b:'FrozenSet',
        X10:out('FrozenSet')),
      f(rbind, subgrid, X7:fixed:'Any', X11:out('Callable')),
      f(rbind, ofcolor, 'ZERO':fixed:'Any', X12:out('Callable')),
      f(lbind, mapply, vfrontier:fixed:'Any', X13:out('Callable')),
      f(chain,
        X13:h:'Callable',
        X12:g:'Callable',
        X11:f:'Callable',
        X14:out('Callable')),
      f(lbind, recolor, 'ZERO':fixed:'Any', X15:out('Callable')),
      f(compose,
        X15:outer:'Callable',
        X14:inner:'Callable',
        X16:out('Callable')),
      f(fork,
        paint:outer:'Callable',
        X11:a:'Callable',
        X16:b:'Callable',
        X17:out('Callable')),
      f(fork,
        toobject:outer:'Callable',
        asindices:a:'Callable',
        identity:b:'Callable',
        X18:out('Callable')),
      f(compose,
        X18:outer:'Callable',
        X17:inner:'Callable',
        X19:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X19:a:'Callable',
        ulcorner:b:'Callable',
        X20:out('Callable')),
      f(mapply,
        X20,
        X10:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(paint, X7:'Grid', X21:obj:'Object', X22:out('Grid')),
      f(rot270, X22:'Grid', X23:out('Grid')),
      f(branch,
        condition=X6,
        X23:a:'Any',
        X22:b:'Any',
        OUT:out('Any'))
    ].
solve(a78176bb, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X3:out('Container')),
      f(other, X3:'Container', 'FIVE':value:'Any', X4:out('Any')),
      f(colorfilter,
        X2:objs:'Objects',
        'FIVE':value:'Integer',
        X5:out('Objects')),
      f(lbind, index, IN:fixed:'Any', X6:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        urcorner:inner:'Callable',
        X7:out('Callable')),
      f(matcher, X7, 'FIVE':target:'Any', X8:out('Callable')),
      f(sfilter,
        X5:'Container',
        X8:condition:'Callable',
        X9:out('Container')),
      f(difference,
        X5:a:'FrozenSet',
        X9:b:'FrozenSet',
        X10:out('FrozenSet')),
      f(apply, urcorner, X9:'Container', X11:out('Container')),
      f(apply, llcorner, X10:'Container', X12:out('Container')),
      f(rbind, add, (-1, 1):fixed:'Any', X13:out('Callable')),
      f(rbind, add, (1, -1):fixed:'Any', X14:out('Callable')),
      f(apply, X13, X11:'Container', X15:out('Container')),
      f(apply, X14, X12:'Container', X16:out('Container')),
      f(rbind, shoot, (1, 1):fixed:'Any', X17:out('Callable')),
      f(rbind, shoot, (-1, -1):fixed:'Any', X18:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X17:a:'Callable',
        X18:b:'Callable',
        X19:out('Callable')),
      f(mapply,
        X19,
        X15:container:'ContainerContainer',
        X20:out('FrozenSet')),
      f(mapply,
        X19,
        X16:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(combine,
        X20:a:'Container',
        X21:b:'Container',
        X22:out('Container')),
      f(fill,
        IN:'Grid',
        X4:value:'Integer',
        X22:'Patch',
        X23:out('Grid')),
      f(replace,
        X23:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('952a094c', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(first, X1:'Container', X2:out('Any')),
      f(inbox, X2:'Patch', X3:out('Indices')),
      f(toobject, X3:'Patch', IN:'Grid', X4:out('Object')),
      f(dmirror, X4:'Piece', X5:out('Piece')),
      f(cmirror, X5:'Piece', X6:out('Piece')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(lbind, index, X7:fixed:'Any', X8:out('Callable')),
      f(fork,
        astuple:outer:'Callable',
        X8:a:'Callable',
        identity:b:'Callable',
        X9:out('Callable')),
      f(compose,
        initset:outer:'Callable',
        X9:inner:'Callable',
        X10:out('Callable')),
      f(double, (-1, -1):n:'Numerical', X11:out('Numerical')),
      f(astuple, 'NEG_TWO':a:'Integer', 'TWO':b:'Integer', X12:out('Point')),
      f(astuple, 'TWO':a:'Integer', 'NEG_TWO':b:'Integer', X13:out('Point')),
      f(ulcorner, X3:'Patch', X14:out('Point')),
      f(urcorner, X3:'Patch', X15:out('Point')),
      f(llcorner, X3:'Patch', X16:out('Point')),
      f(lrcorner, X3:'Patch', X17:out('Point')),
      f(X10, X14, X18),
      f(move,
        X7:'Grid',
        X18:obj:'Object',
        X11:offset:'Point',
        X19:out('Grid')),
      f(X10, X15, X20),
      f(move,
        X19:'Grid',
        X20:obj:'Object',
        X12:offset:'Point',
        X21:out('Grid')),
      f(X10, X16, X22),
      f(move,
        X21:'Grid',
        X22:obj:'Object',
        X13:offset:'Point',
        X23:out('Grid')),
      f(X10, X17, X24),
      f(move,
        X23:'Grid',
        X24:obj:'Object',
        (2, 2):offset:'Point',
        OUT:out('Grid'))
    ].
solve('6d58a25d', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(remove, X2:value:'Any', X1:'Container', X3:out('Container')),
      f(first, X3:'Container', X4:out('Any')),
      f(color, X4:obj:'Object', X5:out('Integer')),
      f(leftmost, X2:'Patch', X6:out('Integer')),
      f(rightmost, X2:'Patch', X7:out('Integer')),
      f(center, X2:'Patch', X8:out('Point')),
      f(first, X8:'Container', X9:out('Any')),
      f(rbind, greater, X6:fixed:'Any', X10:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        leftmost:inner:'Callable',
        X11:out('Callable')),
      f(lbind, greater, X7:fixed:'Any', X12:out('Callable')),
      f(compose,
        X12:outer:'Callable',
        rightmost:inner:'Callable',
        X13:out('Callable')),
      f(rbind, greater, X9:fixed:'Any', X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        lowermost:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X11:a:'Callable',
        X13:b:'Callable',
        X16:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X16:a:'Callable',
        X15:b:'Callable',
        X17:out('Callable')),
      f(sfilter,
        X3:'Container',
        X17:condition:'Callable',
        X18:out('Container')),
      f(mapply,
        toindices,
        X18:container:'ContainerContainer',
        X19:out('FrozenSet')),
      f(apply, last, X19:'Container', X20:out('Container')),
      f(lbind, astuple, X9:fixed:'Any', X21:out('Callable')),
      f(apply, X21, X20:'Container', X22:out('Container')),
      f(rbind, shoot, (1, 0):fixed:'Any', X23:out('Callable')),
      f(mapply,
        X23,
        X22:container:'ContainerContainer',
        X24:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        X5:value:'Integer',
        X24:'Patch',
        OUT:out('Grid'))
    ].
solve('6aa20dc0', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax,
        X1:'Container',
        numcolors:compfunc:'Callable',
        X2:out('Any')),
      f(normalize, X2:'Patch', X3:out('Patch')),
      f(lbind, matcher, first:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        mostcolor:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        identity:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(lbind, rbind, upscale:fixed:'Any', X8:out('Callable')),
      f(interval,
        'ONE':start:'Integer',
        'FOUR':stop:'Integer',
        'ONE':step:'Integer',
        X9:out('Tuple')),
      f(apply, X8, X9:'Container', X10:out('Container')),
      f(initset, identity:value:'Any', X11:out('FrozenSet')),
      f(insert,
        vmirror:value:'Any',
        X11:container:'FrozenSet',
        X12:out('FrozenSet')),
      f(insert,
        hmirror:value:'Any',
        X12:container:'FrozenSet',
        X13:out('FrozenSet')),
      f(insert,
        cmirror:value:'Any',
        X13:container:'FrozenSet',
        X14:out('FrozenSet')),
      f(insert,
        dmirror:value:'Any',
        X14:container:'FrozenSet',
        X15:out('FrozenSet')),
      f(fork,
        compose:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X16:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X17:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X18:out('Callable')),
      f(compose,
        X17:outer:'Callable',
        X7:inner:'Callable',
        X19:out('Callable')),
      f(product,
        X15:a:'Container',
        X10:b:'Container',
        X20:out('FrozenSet')),
      f(apply, X16, X20:'Container', X21:out('Container')),
      f(rapply,
        X21:functions:'Container',
        X3:value:'Any',
        X22:out('Container')),
      f(fork,
        mapply:outer:'Callable',
        X18:a:'Callable',
        X19:b:'Callable',
        X23:out('Callable')),
      f(mapply,
        X23,
        X22:container:'ContainerContainer',
        X24:out('FrozenSet')),
      f(paint, IN:'Grid', X24:obj:'Object', OUT:out('Grid'))
    ].
solve(e6721834, IN, OUT) :-
    [ f(portrait, IN:'Piece', returns=X1),
      f(branch,
        condition=X1,
        vsplit:a:'Any',
        hsplit:b:'Any',
        X2:out('Any')),
      f(X2, IN, 'TWO', X3),
      f(order,
        X3:'Container',
        numcolors:compfunc:'Callable',
        X4:out('Tuple')),
      f(first, X4:'Container', X5:out('Any')),
      f(last, X4:'Container', X6:out('Any')),
      f(objects,
        X6:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X7:out('Objects')),
      f(merge, X7:containers:'ContainerContainer', X8:out('Container')),
      f(mostcolor, X8:'Element', X9:out('Integer')),
      f(matcher, first, X9:target:'Any', X10:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X10:inner:'Callable',
        X11:out('Callable')),
      f(rbind, sfilter, X11:fixed:'Any', X12:out('Callable')),
      f(lbind, occurrences, X5:fixed:'Any', X13:out('Callable')),
      f(compose,
        X13:outer:'Callable',
        X12:inner:'Callable',
        X14:out('Callable')),
      f(chain,
        positive:h:'Callable',
        size:g:'Callable',
        X14:f:'Callable',
        X15:out('Callable')),
      f(sfilter,
        X7:'Container',
        X15:condition:'Callable',
        X16:out('Container')),
      f(chain,
        first:h:'Callable',
        X13:g:'Callable',
        X12:f:'Callable',
        X17:out('Callable')),
      f(compose,
        ulcorner:outer:'Callable',
        X12:inner:'Callable',
        X18:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X17:a:'Callable',
        X18:b:'Callable',
        X19:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        identity:a:'Callable',
        X19:b:'Callable',
        X20:out('Callable')),
      f(apply, X20, X16:'Container', X21:out('Container')),
      f(compose,
        decrement:outer:'Callable',
        width:inner:'Callable',
        X22:out('Callable')),
      f(chain,
        positive:h:'Callable',
        decrement:g:'Callable',
        X22:f:'Callable',
        X23:out('Callable')),
      f(mfilter, X21:'Container', X23, X24:out('FrozenSet')),
      f(paint, X5:'Grid', X24:obj:'Object', OUT:out('Grid'))
    ].
solve('447fd412', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax,
        X1:'Container',
        numcolors:compfunc:'Callable',
        X2:out('Any')),
      f(normalize, X2:'Patch', X3:out('Patch')),
      f(lbind, matcher, first:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        mostcolor:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        identity:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        identity:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(lbind, rbind, upscale:fixed:'Any', X8:out('Callable')),
      f(interval,
        'ONE':start:'Integer',
        'FOUR':stop:'Integer',
        'ONE':step:'Integer',
        X9:out('Tuple')),
      f(apply, X8, X9:'Container', X10:out('Container')),
      f(lbind, recolor, 'ZERO':fixed:'Any', X11:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        outbox:inner:'Callable',
        X12:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        identity:a:'Callable',
        X12:b:'Callable',
        X13:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X14:out('Callable')),
      f(lbind, rbind, subtract:fixed:'Any', X15:out('Callable')),
      f(lbind, apply, increment:fixed:'Any', X16:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X17:out('Callable')),
      f(chain,
        X15:h:'Callable',
        ulcorner:g:'Callable',
        X7:f:'Callable',
        X18:out('Callable')),
      f(chain,
        X14:h:'Callable',
        X13:g:'Callable',
        X7:f:'Callable',
        X19:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X18:a:'Callable',
        X19:b:'Callable',
        X20:out('Callable')),
      f(compose,
        X16:outer:'Callable',
        X20:inner:'Callable',
        X21:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X17:a:'Callable',
        X21:b:'Callable',
        X22:out('Callable')),
      f(rapply,
        X10:functions:'Container',
        X3:value:'Any',
        X23:out('Container')),
      f(mapply,
        X22,
        X23:container:'ContainerContainer',
        X24:out('FrozenSet')),
      f(paint, IN:'Grid', X24:obj:'Object', OUT:out('Grid'))
    ].
solve('2bcee788', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(replace,
        IN:'Grid',
        X1:replacee:'Integer',
        'THREE':replacer:'Integer',
        X3:out('Grid')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(argmin, X2:'Container', size:compfunc:'Callable', X5:out('Any')),
      f(position, X4:a:'Patch', X5:b:'Patch', X6:out('Point')),
      f(first, X6:'Container', X7:out('Any')),
      f(last, X6:'Container', X8:out('Any')),
      f(subgrid, X4:'Patch', X3:'Grid', X9:out('Grid')),
      f(hline, X5:'Patch', returns=X10),
      f(hmirror, X9:'Piece', X11:out('Piece')),
      f(vmirror, X9:'Piece', X12:out('Piece')),
      f(branch,
        condition=X10,
        X11:a:'Any',
        X12:b:'Any',
        X13:out('Any')),
      f(branch,
        condition=X10,
        X7:a:'Any',
        'ZERO':b:'Any',
        X14:out('Any')),
      f(branch,
        condition=X10,
        'ZERO':a:'Any',
        X8:b:'Any',
        X15:out('Any')),
      f(asobject, X13:'Grid', X16:out('Object')),
      f(matcher, first, 'THREE':target:'Any', X17:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X17:inner:'Callable',
        X18:out('Callable')),
      f(sfilter,
        X16:'Container',
        X18:condition:'Callable',
        X19:out('Container')),
      f(ulcorner, X4:'Patch', X20:out('Point')),
      f(shape, X4:'Piece', X21:out('Point')),
      f(astuple, X14:a:'Integer', X15:b:'Integer', X22:out('Point')),
      f(multiply,
        X21:a:'Numerical',
        X22:b:'Numerical',
        X23:out('Numerical')),
      f(add,
        X20:a:'Numerical',
        X23:b:'Numerical',
        X24:out('Numerical')),
      f(shift, X19:'Patch', X24:directions:'Point', X25:out('Patch')),
      f(paint, X3:'Grid', X25:obj:'Object', OUT:out('Grid'))
    ].
solve('776ffc46', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X2:out('Objects')),
      f(totuple, X2:container:'FrozenSet', X3:out('Tuple')),
      f(rbind, subgrid, IN:fixed:'Any', X4:out('Callable')),
      f(apply, X4, X3:'Container', X5:out('Container')),
      f(multiply, 'FOUR':a:'Numerical', 'SIX':b:'Numerical', X6:out('Numerical')),
      f(rbind, ofcolor, 'FIVE':fixed:'Any', X7:out('Callable')),
      f(compose,
        size:outer:'Callable',
        X7:inner:'Callable',
        X8:out('Callable')),
      f(matcher, X8, X6:target:'Any', X9:out('Callable')),
      f(extract,
        X5:'Container',
        X9:condition:'Callable',
        X10:out('Any')),
      f(astuple, 'FIVE':a:'Integer', 'FIVE':b:'Integer', X11:out('Point')),
      f(crop,
        X10:'Grid',
        (1, 1):start:'Point',
        X11:dims:'Point',
        X12:out('Grid')),
      f(objects,
        X12:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X13:out('Objects')),
      f(first, X13:'Container', X14:out('Any')),
      f(color, X14:obj:'Object', X15:out('Integer')),
      f(normalize, X14:'Patch', X16:out('Patch')),
      f(toindices, X16:'Patch', X17:out('Indices')),
      f(totuple, X1:container:'FrozenSet', X18:out('Tuple')),
      f(apply, normalize, X18:'Container', X19:out('Container')),
      f(apply, toindices, X19:'Container', X20:out('Container')),
      f(pair, X18:a:'Tuple', X20:b:'Tuple', X21:out('TupleTuple')),
      f(matcher, last, X17:target:'Any', X22:out('Callable')),
      f(sfilter,
        X21:'Container',
        X22:condition:'Callable',
        X23:out('Container')),
      f(mapply,
        first,
        X23:container:'ContainerContainer',
        X24:out('FrozenSet')),
      f(recolor, X15:value:'Integer', X24:'Patch', X25:out('Object')),
      f(paint, IN:'Grid', X25:obj:'Object', OUT:out('Grid'))
    ].
solve(f35d900a, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(hmirror, X2:'Piece', X3:out('Piece')),
      f(compose,
        neighbors:outer:'Callable',
        last:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        first:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(mapply,
        X5,
        X3:container:'ContainerContainer',
        X6:out('FrozenSet')),
      f(paint, IN:'Grid', X6:obj:'Object', X7:out('Grid')),
      f(outbox, X2:'Patch', X8:out('Indices')),
      f(ulcorner, X8:'Patch', X9:out('Point')),
      f(subgrid, X8:'Patch', X7:'Grid', X10:out('Grid')),
      f(dneighbors, (0, 0):loc:'Point', X11:out('Indices')),
      f(rbind, multiply, 'FOUR':fixed:'Any', X12:out('Callable')),
      f(apply, double, X11:'Container', X13:out('Container')),
      f(apply, X12, X11:'Container', X14:out('Container')),
      f(apply, increment, X13:'Container', X15:out('Container')),
      f(apply, increment, X14:'Container', X16:out('Container')),
      f(combine,
        X15:a:'Container',
        X16:b:'Container',
        X17:out('Container')),
      f(underfill,
        X10:'Grid',
        'FIVE':value:'Integer',
        X17:'Patch',
        X18:out('Grid')),
      f(vmirror, X18:'Piece', X19:out('Piece')),
      f(underfill,
        X19:'Grid',
        'FIVE':value:'Integer',
        X17:'Patch',
        X20:out('Grid')),
      f(ofcolor, X20:'Grid', 'FIVE':value:'Integer', X21:out('Indices')),
      f(hmirror, X20:'Piece', X22:out('Piece')),
      f(underfill,
        X22:'Grid',
        'FIVE':value:'Integer',
        X21:'Patch',
        X23:out('Grid')),
      f(ofcolor, X23:'Grid', 'FIVE':value:'Integer', X24:out('Indices')),
      f(shift, X24:'Patch', X9:directions:'Point', X25:out('Patch')),
      f(fill,
        X7:'Grid',
        'FIVE':value:'Integer',
        X25:'Patch',
        OUT:out('Grid'))
    ].
solve('0dfd9992', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(partition, IN:'Grid', X3:out('Objects')),
      f(colorfilter,
        X3:objs:'Objects',
        'ZERO':value:'Integer',
        X4:out('Objects')),
      f(difference,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(astuple, X1:a:'Integer', 'ONE':b:'Integer', X7:out('Point')),
      f(astuple, 'ONE':a:'Integer', X2:b:'Integer', X8:out('Point')),
      f(decrement, X1:x:'Numerical', X9:out('Numerical')),
      f(decrement, X2:x:'Numerical', X10:out('Numerical')),
      f(toivec, X10:i:'Integer', X11:out('Point')),
      f(tojvec, X9:j:'Integer', X12:out('Point')),
      f(crop,
        IN:'Grid',
        X11:start:'Point',
        X8:dims:'Point',
        X13:out('Grid')),
      f(crop,
        IN:'Grid',
        X12:start:'Point',
        X7:dims:'Point',
        X14:out('Grid')),
      f(asobject, X14:'Grid', X15:out('Object')),
      f(asobject, X13:'Grid', X16:out('Object')),
      f(vperiod, X15:obj:'Object', X17:out('Integer')),
      f(hperiod, X16:obj:'Object', X18:out('Integer')),
      f(astuple, X17:a:'Integer', X18:b:'Integer', X19:out('Point')),
      f(lbind, multiply, X19:fixed:'Any', X20:out('Callable')),
      f(neighbors, (0, 0):loc:'Point', X21:out('Indices')),
      f(mapply,
        neighbors,
        X21:container:'ContainerContainer',
        X22:out('FrozenSet')),
      f(apply, X20, X22:'Container', X23:out('Container')),
      f(lbind, shift, X6:fixed:'Any', X24:out('Callable')),
      f(mapply,
        X24,
        X23:container:'ContainerContainer',
        X25:out('FrozenSet')),
      f(paint, IN:'Grid', X25:obj:'Object', OUT:out('Grid'))
    ].
solve('29ec7d0e', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(partition, IN:'Grid', X3:out('Objects')),
      f(colorfilter,
        X3:objs:'Objects',
        'ZERO':value:'Integer',
        X4:out('Objects')),
      f(difference,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(astuple, X1:a:'Integer', 'ONE':b:'Integer', X7:out('Point')),
      f(astuple, 'ONE':a:'Integer', X2:b:'Integer', X8:out('Point')),
      f(decrement, X1:x:'Numerical', X9:out('Numerical')),
      f(decrement, X2:x:'Numerical', X10:out('Numerical')),
      f(toivec, X10:i:'Integer', X11:out('Point')),
      f(tojvec, X9:j:'Integer', X12:out('Point')),
      f(crop,
        IN:'Grid',
        X11:start:'Point',
        X8:dims:'Point',
        X13:out('Grid')),
      f(crop,
        IN:'Grid',
        X12:start:'Point',
        X7:dims:'Point',
        X14:out('Grid')),
      f(asobject, X14:'Grid', X15:out('Object')),
      f(asobject, X13:'Grid', X16:out('Object')),
      f(vperiod, X15:obj:'Object', X17:out('Integer')),
      f(hperiod, X16:obj:'Object', X18:out('Integer')),
      f(astuple, X17:a:'Integer', X18:b:'Integer', X19:out('Point')),
      f(lbind, multiply, X19:fixed:'Any', X20:out('Callable')),
      f(neighbors, (0, 0):loc:'Point', X21:out('Indices')),
      f(mapply,
        neighbors,
        X21:container:'ContainerContainer',
        X22:out('FrozenSet')),
      f(apply, X20, X22:'Container', X23:out('Container')),
      f(lbind, shift, X6:fixed:'Any', X24:out('Callable')),
      f(mapply,
        X24,
        X23:container:'ContainerContainer',
        X25:out('FrozenSet')),
      f(paint, IN:'Grid', X25:obj:'Object', OUT:out('Grid'))
    ].
solve('36d67576', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmax,
        X1:'Container',
        numcolors:compfunc:'Callable',
        X2:out('Any')),
      f(astuple, 'TWO':a:'Integer', 'FOUR':b:'Integer', X3:out('Point')),
      f(rbind, contained, X3:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        first:inner:'Callable',
        X5:out('Callable')),
      f(rbind, sfilter, X5:fixed:'Any', X6:out('Callable')),
      f(lbind, rbind, subtract:fixed:'Any', X7:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X8:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X9:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        ulcorner:inner:'Callable',
        X10:out('Callable')),
      f(chain,
        X10:h:'Callable',
        X6:g:'Callable',
        normalize:f:'Callable',
        X11:out('Callable')),
      f(chain,
        X8:h:'Callable',
        X6:g:'Callable',
        normalize:f:'Callable',
        X12:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X11:a:'Callable',
        X12:b:'Callable',
        X13:out('Callable')),
      f(compose,
        X9:outer:'Callable',
        normalize:inner:'Callable',
        X14:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X14:a:'Callable',
        X13:b:'Callable',
        X15:out('Callable')),
      f(astuple, cmirror:a:'Integer', dmirror:b:'Integer', X16:out('Point')),
      f(astuple, hmirror:a:'Integer', vmirror:b:'Integer', X17:out('Point')),
      f(combine,
        X16:a:'Container',
        X17:b:'Container',
        X18:out('Container')),
      f(product,
        X18:a:'Container',
        X18:b:'Container',
        X19:out('FrozenSet')),
      f(fork,
        compose:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X20:out('Callable')),
      f(apply, X20, X19:'Container', X21:out('Container')),
      f(totuple, X21:container:'FrozenSet', X22:out('Tuple')),
      f(combine,
        X18:a:'Container',
        X22:b:'Container',
        X23:out('Container')),
      f(rapply,
        X23:functions:'Container',
        X2:value:'Any',
        X24:out('Container')),
      f(mapply,
        X15,
        X24:container:'ContainerContainer',
        X25:out('FrozenSet')),
      f(paint, IN:'Grid', X25:obj:'Object', OUT:out('Grid'))
    ].
solve('98cf29f8', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(fork,
        multiply:outer:'Callable',
        height:a:'Callable',
        width:b:'Callable',
        X2:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        size:a:'Callable',
        X2:b:'Callable',
        X3:out('Callable')),
      f(extract,
        X1:'Container',
        X3:condition:'Callable',
        X4:out('Any')),
      f(other, X1:'Container', X4:value:'Any', X5:out('Any')),
      f(toindices, X5:'Patch', X6:out('Indices')),
      f(rbind, add, (0, -1):fixed:'Any', X7:out('Callable')),
      f(rbind, add, (0, 1):fixed:'Any', X8:out('Callable')),
      f(rbind, add, (-1, 0):fixed:'Any', X9:out('Callable')),
      f(rbind, add, (1, 0):fixed:'Any', X10:out('Callable')),
      f(initset, 'ZERO':value:'Any', X11:out('FrozenSet')),
      f(compose,
        initset:outer:'Callable',
        X8:inner:'Callable',
        X12:out('Callable')),
      f(compose,
        initset:outer:'Callable',
        X10:inner:'Callable',
        X13:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X7:a:'Callable',
        X12:b:'Callable',
        X14:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X9:a:'Callable',
        X13:b:'Callable',
        X15:out('Callable')),
      f(matcher, palette, X11:target:'Any', X16:out('Callable')),
      f(rbind, toobject, IN:fixed:'Any', X17:out('Callable')),
      f(chain,
        X16:h:'Callable',
        X17:g:'Callable',
        X14:f:'Callable',
        X18:out('Callable')),
      f(chain,
        X16:h:'Callable',
        X17:g:'Callable',
        X15:f:'Callable',
        X19:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X18:a:'Callable',
        X19:b:'Callable',
        X20:out('Callable')),
      f(sfilter,
        X6:'Container',
        X20:condition:'Callable',
        X21:out('Container')),
      f(cover, IN:'Grid', X21:'Patch', X22:out('Grid')),
      f(difference,
        X6:a:'FrozenSet',
        X21:b:'FrozenSet',
        X23:out('FrozenSet')),
      f(gravitate,
        X23:source:'Patch',
        X4:destination:'Patch',
        X24:out('Point')),
      f(toobject, X23:'Patch', X22:'Grid', X25:out('Object')),
      f(move,
        X22:'Grid',
        X25:obj:'Object',
        X24:offset:'Point',
        OUT:out('Grid'))
    ].
solve('469497ad', IN, OUT) :-
    [ f(numcolors, IN:'Element', X1:out('IntegerSet')),
      f(decrement, X1:x:'Numerical', X2:out('Numerical')),
      f(upscale,
        IN:'Element',
        X2:factor:'Integer',
        X3:out('Element')),
      f(objects,
        X3:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X4:out('Objects')),
      f(argmin, X4:'Container', size:compfunc:'Callable', X5:out('Any')),
      f(ulcorner, X5:'Patch', X6:out('Point')),
      f(llcorner, X5:'Patch', X7:out('Point')),
      f(shoot,
        X6:start:'Point',
        (-1, -1):direction:'Point',
        X8:out('Indices')),
      f(shoot,
        X6:start:'Point',
        (1, 1):direction:'Point',
        X9:out('Indices')),
      f(shoot,
        X7:start:'Point',
        (1, -1):direction:'Point',
        X10:out('Indices')),
      f(shoot,
        X7:start:'Point',
        (-1, 1):direction:'Point',
        X11:out('Indices')),
      f(combine,
        X8:a:'Container',
        X9:b:'Container',
        X12:out('Container')),
      f(combine,
        X10:a:'Container',
        X11:b:'Container',
        X13:out('Container')),
      f(combine,
        X12:a:'Container',
        X13:b:'Container',
        X14:out('Container')),
      f(underfill,
        X3:'Grid',
        'TWO':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(objects,
        X15:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X16:out('Objects')),
      f(argmax,
        X16:'Container',
        lrcorner:compfunc:'Callable',
        X17:out('Any')),
      f(urcorner, X17:'Patch', X18:out('Point')),
      f(tojvec, 'NEG_TWO':j:'Integer', X19:out('Point')),
      f(add,
        X18:a:'Numerical',
        X19:b:'Numerical',
        X20:out('Numerical')),
      f(connect, X18:a:'Point', X20:b:'Point', X21:out('Indices')),
      f(toobject, X21:'Patch', X15:'Grid', X22:out('Object')),
      f(shift, X22:'Patch', (-1, 0):directions:'Point', X23:out('Patch')),
      f(color, X23:obj:'Object', X24:out('Integer')),
      f(equality, X24:a:'Any', 'SIX':b:'Any', returns=X25),
      f(branch,
        condition=X25,
        X23:a:'Any',
        X17:b:'Any',
        X26:out('Any')),
      f(paint, X15:'Grid', X26:obj:'Object', OUT:out('Grid'))
    ].
solve('39e1d7f9', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(order, X1:'Container', height:compfunc:'Callable', X3:out('Tuple')),
      f(last, X3:'Container', X4:out('Any')),
      f(remove, X4:value:'Any', X3:'Container', X5:out('Container')),
      f(last, X5:'Container', X6:out('Any')),
      f(color, X6:obj:'Object', X7:out('Integer')),
      f(colorfilter,
        X2:objs:'Objects',
        X7:value:'Integer',
        X8:out('Objects')),
      f(power, outbox, 'TWO':n:'Integer', X9:out('Callable')),
      f(rbind, toobject, IN:fixed:'Any', X10:out('Callable')),
      f(chain,
        numcolors:h:'Callable',
        X10:g:'Callable',
        X9:f:'Callable',
        X11:out('Callable')),
      f(argmax,
        X8:'Container',
        X11:compfunc:'Callable',
        X12:out('Any')),
      f(ulcorner, X12:'Patch', X13:out('Point')),
      f(shape, X12:'Piece', X14:out('Point')),
      f(subtract,
        X13:a:'Numerical',
        X14:b:'Numerical',
        X15:out('Numerical')),
      f(decrement, X15:x:'Numerical', X16:out('Numerical')),
      f(multiply,
        X14:a:'Numerical',
        'THREE':b:'Numerical',
        X17:out('Numerical')),
      f(add, X17:a:'Numerical', (2, 2):b:'Numerical', X18:out('Numerical')),
      f(crop,
        IN:'Grid',
        X16:start:'Point',
        X18:dims:'Point',
        X19:out('Grid')),
      f(asobject, X19:'Grid', X20:out('Object')),
      f(apply, ulcorner, X8:'Container', X21:out('Container')),
      f(increment, X14:x:'Numerical', X22:out('Numerical')),
      f(rbind, subtract, X22:fixed:'Any', X23:out('Callable')),
      f(apply, X23, X21:'Container', X24:out('Container')),
      f(lbind, shift, X20:fixed:'Any', X25:out('Callable')),
      f(mapply,
        X25,
        X24:container:'ContainerContainer',
        X26:out('FrozenSet')),
      f(paint, IN:'Grid', X26:obj:'Object', OUT:out('Grid'))
    ].
solve('484b58aa', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(partition, IN:'Grid', X3:out('Objects')),
      f(colorfilter,
        X3:objs:'Objects',
        'ZERO':value:'Integer',
        X4:out('Objects')),
      f(difference,
        X3:a:'FrozenSet',
        X4:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(astuple, X1:a:'Integer', 'TWO':b:'Integer', X7:out('Point')),
      f(astuple, 'TWO':a:'Integer', X2:b:'Integer', X8:out('Point')),
      f(power, decrement, 'TWO':n:'Integer', X9:out('Callable')),
      f(X9, X1, X10),
      f(X9, X2, X11),
      f(toivec, X11:i:'Integer', X12:out('Point')),
      f(tojvec, X10:j:'Integer', X13:out('Point')),
      f(crop,
        IN:'Grid',
        X12:start:'Point',
        X8:dims:'Point',
        X14:out('Grid')),
      f(crop,
        IN:'Grid',
        X13:start:'Point',
        X7:dims:'Point',
        X15:out('Grid')),
      f(asobject, X15:'Grid', X16:out('Object')),
      f(asobject, X14:'Grid', X17:out('Object')),
      f(vperiod, X16:obj:'Object', X18:out('Integer')),
      f(hperiod, X17:obj:'Object', X19:out('Integer')),
      f(astuple, X18:a:'Integer', X19:b:'Integer', X20:out('Point')),
      f(lbind, multiply, X20:fixed:'Any', X21:out('Callable')),
      f(neighbors, (0, 0):loc:'Point', X22:out('Indices')),
      f(mapply,
        neighbors,
        X22:container:'ContainerContainer',
        X23:out('FrozenSet')),
      f(apply, X21, X23:'Container', X24:out('Container')),
      f(lbind, shift, X6:fixed:'Any', X25:out('Callable')),
      f(mapply,
        X25,
        X24:container:'ContainerContainer',
        X26:out('FrozenSet')),
      f(paint, IN:'Grid', X26:obj:'Object', OUT:out('Grid'))
    ].
solve('3befdf3e', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(totuple, X1:container:'FrozenSet', X2:out('Tuple')),
      f(apply, mostcolor, X2:'Container', X3:out('Container')),
      f(apply, leastcolor, X2:'Container', X4:out('Container')),
      f(apply, width, X2:'Container', X5:out('Container')),
      f(rbind, subtract, 'TWO':fixed:'Any', X6:out('Callable')),
      f(apply, X6, X5:'Container', X7:out('Container')),
      f(apply, invert, X7:'Container', X8:out('Container')),
      f(papply, recolor, X4:a:'Tuple', X2:b:'Tuple', X9:out('Tuple')),
      f(apply, toivec, X7:'Container', X10:out('Container')),
      f(mpapply, shift, X9:a:'Tuple', X10:b:'Tuple', X11:out('Tuple')),
      f(paint, IN:'Grid', X11:obj:'Object', X12:out('Grid')),
      f(apply, toivec, X8:'Container', X13:out('Container')),
      f(mpapply, shift, X9:a:'Tuple', X13:b:'Tuple', X14:out('Tuple')),
      f(paint, X12:'Grid', X14:obj:'Object', X15:out('Grid')),
      f(apply, tojvec, X7:'Container', X16:out('Container')),
      f(mpapply, shift, X9:a:'Tuple', X16:b:'Tuple', X17:out('Tuple')),
      f(paint, X15:'Grid', X17:obj:'Object', X18:out('Grid')),
      f(apply, tojvec, X8:'Container', X19:out('Container')),
      f(mpapply, shift, X9:a:'Tuple', X19:b:'Tuple', X20:out('Tuple')),
      f(paint, X18:'Grid', X20:obj:'Object', X21:out('Grid')),
      f(merge, X2:containers:'ContainerContainer', X22:out('Container')),
      f(paint, X21:'Grid', X22:obj:'Object', X23:out('Grid')),
      f(first, X4:'Container', X24:out('Any')),
      f(first, X3:'Container', X25:out('Any')),
      f(replace,
        X23:'Grid',
        X24:replacee:'Integer',
        'NEG_ONE':replacer:'Integer',
        X26:out('Grid')),
      f(replace,
        X26:'Grid',
        X25:replacee:'Integer',
        X24:replacer:'Integer',
        X27:out('Grid')),
      f(replace,
        X27:'Grid',
        'NEG_ONE':replacee:'Integer',
        X25:replacer:'Integer',
        OUT:out('Grid'))
    ].
solve('9aec4887', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'EIGHT':value:'Integer',
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(other, X1:'Container', X3:value:'Any', X4:out('Any')),
      f(subgrid, X4:'Patch', IN:'Grid', X5:out('Grid')),
      f(normalize, X3:'Patch', X6:out('Patch')),
      f(shift, X6:'Patch', (1, 1):directions:'Point', X7:out('Patch')),
      f(paint, X5:'Grid', X7:obj:'Object', X8:out('Grid')),
      f(palette, X8:'Element', X9:out('IntegerSet')),
      f(remove, 'ZERO':value:'Any', X9:'Container', X10:out('Container')),
      f(remove, 'EIGHT':value:'Any', X10:'Container', X11:out('Container')),
      f(lbind, ofcolor, X8:fixed:'Any', X12:out('Callable')),
      f(rbind, remove, X11:fixed:'Any', X13:out('Callable')),
      f(lbind, mapply, X12:fixed:'Any', X14:out('Callable')),
      f(lbind, rbind, manhattan:fixed:'Any', X15:out('Callable')),
      f(chain,
        X15:h:'Callable',
        X14:g:'Callable',
        X13:f:'Callable',
        X16:out('Callable')),
      f(rbind, compose, initset:fixed:'Any', X17:out('Callable')),
      f(lbind, lbind, manhattan:fixed:'Any', X18:out('Callable')),
      f(chain,
        X17:h:'Callable',
        X18:g:'Callable',
        X12:f:'Callable',
        X19:out('Callable')),
      f(compose,
        X17:outer:'Callable',
        X16:inner:'Callable',
        X20:out('Callable')),
      f(lbind, fork, greater:fixed:'Any', X21:out('Callable')),
      f(fork,
        X21:outer:'Callable',
        X20:a:'Callable',
        X19:b:'Callable',
        X22:out('Callable')),
      f(ofcolor, X8:'Grid', 'EIGHT':value:'Integer', X23:out('Indices')),
      f(lbind, sfilter, X23:fixed:'Any', X24:out('Callable')),
      f(compose,
        X24:outer:'Callable',
        X22:inner:'Callable',
        X25:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        identity:a:'Callable',
        X25:b:'Callable',
        X26:out('Callable')),
      f(mapply,
        X26,
        X11:container:'ContainerContainer',
        X27:out('FrozenSet')),
      f(paint, X8:'Grid', X27:obj:'Object', OUT:out('Grid'))
    ].
solve('49d1d64f', IN, OUT) :-
    [ f(upscale, IN:'Element', 'TWO':factor:'Integer', X1:out('Element')),
      f(asindices, X1:'Grid', X2:out('Indices')),
      f(corners, X2:'Patch', X3:out('Indices')),
      f(fill,
        X1:'Grid',
        'ZERO':value:'Integer',
        X3:'Patch',
        X4:out('Grid')),
      f(height, X4:'Piece', X5:out('Integer')),
      f(width, X4:'Piece', X6:out('Integer')),
      f(equality, X5:a:'Any', 'SIX':b:'Any', returns=X7),
      f(equality, X6:a:'Any', 'SIX':b:'Any', returns=X8),
      f(compose,
        decrement:outer:'Callable',
        halve:inner:'Callable',
        X9:out('Callable')),
      f(X9, X5, X10),
      f(X9, X6, X11),
      f(astuple, X10:a:'Integer', X6:b:'Integer', X12:out('Point')),
      f(crop,
        X4:'Grid',
        (0, 0):start:'Point',
        X12:dims:'Point',
        X13:out('Grid')),
      f(increment, X10:x:'Numerical', X14:out('Numerical')),
      f(toivec, X14:i:'Integer', X15:out('Point')),
      f(astuple, X14:a:'Integer', X6:b:'Integer', X16:out('Point')),
      f(crop,
        X4:'Grid',
        X15:start:'Point',
        X16:dims:'Point',
        X17:out('Grid')),
      f(vconcat, X13:a:'Grid', X17:b:'Grid', X18:out('Grid')),
      f(branch,
        condition=X7,
        X18:a:'Any',
        X4:b:'Any',
        X19:out('Any')),
      f(decrement, X5:x:'Numerical', X20:out('Numerical')),
      f(branch,
        condition=X7,
        X20:a:'Any',
        X5:b:'Any',
        X21:out('Any')),
      f(astuple, X21:a:'Integer', X11:b:'Integer', X22:out('Point')),
      f(crop,
        X19:'Grid',
        (0, 0):start:'Point',
        X22:dims:'Point',
        X23:out('Grid')),
      f(increment, X11:x:'Numerical', X24:out('Numerical')),
      f(tojvec, X24:j:'Integer', X25:out('Point')),
      f(astuple, X21:a:'Integer', X24:b:'Integer', X26:out('Point')),
      f(crop,
        X19:'Grid',
        X25:start:'Point',
        X26:dims:'Point',
        X27:out('Grid')),
      f(hconcat, X23:a:'Grid', X27:b:'Grid', X28:out('Grid')),
      f(branch,
        condition=X8,
        X28:a:'Any',
        X19:b:'Any',
        OUT:out('Any'))
    ].
solve('57aa92db', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(lbind, lbind, colorcount:fixed:'Any', X3:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X3:a:'Callable',
        palette:b:'Callable',
        X4:out('Callable')),
      f(compose,
        maximum:outer:'Callable',
        X4:inner:'Callable',
        X5:out('Callable')),
      f(compose,
        minimum:outer:'Callable',
        X4:inner:'Callable',
        X6:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X5:a:'Callable',
        X6:b:'Callable',
        X7:out('Callable')),
      f(argmax,
        X1:'Container',
        X7:compfunc:'Callable',
        X8:out('Any')),
      f(leastcolor, X8:'Element', X9:out('Integer')),
      f(normalize, X8:'Patch', X10:out('Patch')),
      f(matcher, first, X9:target:'Any', X11:out('Callable')),
      f(sfilter,
        X10:'Container',
        X11:condition:'Callable',
        X12:out('Container')),
      f(ulcorner, X12:'Patch', X13:out('Point')),
      f(colorfilter,
        X2:objs:'Objects',
        X9:value:'Integer',
        X14:out('Objects')),
      f(rbind, toobject, IN:fixed:'Any', X15:out('Callable')),
      f(lbind, remove, 'ZERO':fixed:'Any', X16:out('Callable')),
      f(chain,
        first:h:'Callable',
        X16:g:'Callable',
        palette:f:'Callable',
        X17:out('Callable')),
      f(chain,
        X17:h:'Callable',
        X15:g:'Callable',
        outbox:f:'Callable',
        X18:out('Callable')),
      f(lbind, multiply, X13:fixed:'Any', X19:out('Callable')),
      f(compose,
        X19:outer:'Callable',
        width:inner:'Callable',
        X20:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        ulcorner:a:'Callable',
        X20:b:'Callable',
        X21:out('Callable')),
      f(lbind, shift, X10:fixed:'Any', X22:out('Callable')),
      f(compose,
        X22:outer:'Callable',
        X21:inner:'Callable',
        X23:out('Callable')),
      f(fork,
        upscale:outer:'Callable',
        X23:a:'Callable',
        width:b:'Callable',
        X24:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X18:a:'Callable',
        X24:b:'Callable',
        X25:out('Callable')),
      f(mapply,
        X25,
        X14:container:'ContainerContainer',
        X26:out('FrozenSet')),
      f(paint, IN:'Grid', X26:obj:'Object', X27:out('Grid')),
      f(merge, X2:containers:'ContainerContainer', X28:out('Container')),
      f(paint, X27:'Grid', X28:obj:'Object', OUT:out('Grid'))
    ].
solve(aba27056, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(mapply,
        toindices,
        X1:container:'ContainerContainer',
        X2:out('FrozenSet')),
      f(box, X2:'Patch', X3:out('Indices')),
      f(difference,
        X3:a:'FrozenSet',
        X2:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(delta, X2:'Patch', X5:out('Indices')),
      f(position, X5:a:'Patch', X4:b:'Patch', X6:out('Point')),
      f(interval,
        'ZERO':start:'Integer',
        'NINE':stop:'Integer',
        'ONE':step:'Integer',
        X7:out('Tuple')),
      f(lbind, multiply, X6:fixed:'Any', X8:out('Callable')),
      f(apply, X8, X7:'Container', X9:out('Container')),
      f(lbind, shift, X4:fixed:'Any', X10:out('Callable')),
      f(mapply,
        X10,
        X9:container:'ContainerContainer',
        X11:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'FOUR':value:'Integer',
        X5:'Patch',
        X12:out('Grid')),
      f(fill,
        X12:'Grid',
        'FOUR':value:'Integer',
        X11:'Patch',
        X13:out('Grid')),
      f(corners, X4:'Patch', X14:out('Indices')),
      f(ofcolor, X13:'Grid', 'ZERO':value:'Integer', X15:out('Indices')),
      f(rbind, toobject, X13:fixed:'Any', X16:out('Callable')),
      f(rbind, colorcount, 'ZERO':fixed:'Any', X17:out('Callable')),
      f(chain,
        X17:h:'Callable',
        X16:g:'Callable',
        dneighbors:f:'Callable',
        X18:out('Callable')),
      f(matcher, X18, 'TWO':target:'Any', X19:out('Callable')),
      f(rbind, adjacent, X2:fixed:'Any', X20:out('Callable')),
      f(rbind, adjacent, X11:fixed:'Any', X21:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X20:a:'Callable',
        X21:b:'Callable',
        X22:out('Callable')),
      f(compose,
        X22:outer:'Callable',
        initset:inner:'Callable',
        X23:out('Callable')),
      f(sfilter,
        X15:'Container',
        X19:condition:'Callable',
        X24:out('Container')),
      f(sfilter,
        X24:'Container',
        X23:condition:'Callable',
        X25:out('Container')),
      f(product,
        X14:a:'Container',
        X25:b:'Container',
        X26:out('FrozenSet')),
      f(fork,
        subtract:outer:'Callable',
        last:a:'Callable',
        first:b:'Callable',
        X27:out('Callable')),
      f(fork,
        shoot:outer:'Callable',
        first:a:'Callable',
        X27:b:'Callable',
        X28:out('Callable')),
      f(mapply,
        X28,
        X26:container:'ContainerContainer',
        X29:out('FrozenSet')),
      f(fill,
        X13:'Grid',
        'FOUR':value:'Integer',
        X29:'Patch',
        OUT:out('Grid'))
    ].
solve(f1cefba8, IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(ofcolor, IN:'Grid', 'ZERO':value:'Integer', X3:out('Indices')),
      f(first, X2:'Container', X4:out('Any')),
      f(ulcorner, X4:'Patch', X5:out('Point')),
      f(subgrid, X4:'Patch', IN:'Grid', X6:out('Grid')),
      f(power, trim, 'TWO':n:'Integer', X7:out('Callable')),
      f(X7, X6, X8),
      f(asindices, X8:'Grid', X9:out('Indices')),
      f(shift, X9:'Patch', (2, 2):directions:'Point', X10:out('Patch')),
      f(fill,
        X6:'Grid',
        'ZERO':value:'Integer',
        X10:'Patch',
        X11:out('Grid')),
      f(leastcolor, X11:'Element', X12:out('Integer')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X13:out('Container')),
      f(other, X13:'Container', X12:value:'Any', X14:out('Any')),
      f(ofcolor, X11:'Grid', X12:value:'Integer', X15:out('Indices')),
      f(shift, X15:'Patch', X5:directions:'Point', X16:out('Patch')),
      f(ofcolor, IN:'Grid', X12:value:'Integer', X17:out('Indices')),
      f(uppermost, X17:'Patch', X18:out('Integer')),
      f(lowermost, X17:'Patch', X19:out('Integer')),
      f(matcher, first, X18:target:'Any', X20:out('Callable')),
      f(matcher, first, X19:target:'Any', X21:out('Callable')),
      f(fork,
        either:outer:'Callable',
        X20:a:'Callable',
        X21:b:'Callable',
        X22:out('Callable')),
      f(sfilter,
        X16:'Container',
        X22:condition:'Callable',
        X23:out('Container')),
      f(difference,
        X16:a:'FrozenSet',
        X23:b:'FrozenSet',
        X24:out('FrozenSet')),
      f(mapply,
        vfrontier,
        X23:container:'ContainerContainer',
        X25:out('FrozenSet')),
      f(mapply,
        hfrontier,
        X24:container:'ContainerContainer',
        X26:out('FrozenSet')),
      f(combine,
        X25:a:'Container',
        X26:b:'Container',
        X27:out('Container')),
      f(intersection,
        X3:a:'FrozenSet',
        X27:b:'FrozenSet',
        X28:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        X14:value:'Integer',
        X27:'Patch',
        X29:out('Grid')),
      f(fill,
        X29:'Grid',
        X12:value:'Integer',
        X28:'Patch',
        OUT:out('Grid'))
    ].
solve('1e32b0e9', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(mostcolor, IN:'Element', X2:out('Integer')),
      f(asobject, IN:'Grid', X3:out('Object')),
      f(subtract, X1:a:'Numerical', 'TWO':b:'Numerical', X4:out('Numerical')),
      f(divide, X4:a:'Numerical', 'THREE':b:'Numerical', X5:out('Numerical')),
      f(astuple, X5:a:'Integer', X5:b:'Integer', X6:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X6:dims:'Point',
        X7:out('Grid')),
      f(partition, X7:'Grid', X8:out('Objects')),
      f(matcher, color, 'ZERO':target:'Any', X9:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X9:inner:'Callable',
        X10:out('Callable')),
      f(extract,
        X8:'Container',
        X10:condition:'Callable',
        X11:out('Any')),
      f(initset, X2:value:'Any', X12:out('FrozenSet')),
      f(palette, X3:'Element', X13:out('IntegerSet')),
      f(palette, X11:'Element', X14:out('IntegerSet')),
      f(difference,
        X13:a:'FrozenSet',
        X14:b:'FrozenSet',
        X15:out('FrozenSet')),
      f(difference,
        X15:a:'FrozenSet',
        X12:b:'FrozenSet',
        X16:out('FrozenSet')),
      f(first, X16:'Container', X17:out('Any')),
      f(interval,
        'ZERO':start:'Integer',
        'THREE':stop:'Integer',
        'ONE':step:'Integer',
        X18:out('Tuple')),
      f(product,
        X18:a:'Container',
        X18:b:'Container',
        X19:out('FrozenSet')),
      f(totuple, X19:container:'FrozenSet', X20:out('Tuple')),
      f(apply, first, X20:'Container', X21:out('Container')),
      f(apply, last, X20:'Container', X22:out('Container')),
      f(lbind, multiply, X5:fixed:'Any', X23:out('Callable')),
      f(apply, X23, X21:'Container', X24:out('Container')),
      f(apply, X23, X22:'Container', X25:out('Container')),
      f(papply, add, X24:a:'Tuple', X21:b:'Tuple', X26:out('Tuple')),
      f(papply, add, X25:a:'Tuple', X22:b:'Tuple', X27:out('Tuple')),
      f(papply,
        astuple,
        X26:a:'Tuple',
        X27:b:'Tuple',
        X28:out('Tuple')),
      f(lbind, shift, X11:fixed:'Any', X29:out('Callable')),
      f(mapply,
        X29,
        X28:container:'ContainerContainer',
        X30:out('FrozenSet')),
      f(underfill,
        IN:'Grid',
        X17:value:'Integer',
        X30:'Patch',
        OUT:out('Grid'))
    ].
solve('28e73c20', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(astuple, 'ONE':a:'Integer', 'TWO':b:'Integer', X2:out('Point')),
      f(astuple, 'TWO':a:'Integer', 'TWO':b:'Integer', X3:out('Point')),
      f(astuple, 'TWO':a:'Integer', 'ONE':b:'Integer', X4:out('Point')),
      f(astuple, 'THREE':a:'Integer', 'ONE':b:'Integer', X5:out('Point')),
      f(canvas, 'THREE':value:'Integer', (1, 1):dimensions:'Point', X6:out('Grid')),
      f(upscale, X6:'Element', 'FOUR':factor:'Integer', X7:out('Element')),
      f(initset, (1, 0):value:'Any', X8:out('FrozenSet')),
      f(insert,
        (1, 1):value:'Any',
        X8:container:'FrozenSet',
        X9:out('FrozenSet')),
      f(insert,
        X2:value:'Any',
        X9:container:'FrozenSet',
        X10:out('FrozenSet')),
      f(insert,
        X3:value:'Any',
        X10:container:'FrozenSet',
        X11:out('FrozenSet')),
      f(fill,
        X7:'Grid',
        'ZERO':value:'Integer',
        X11:'Patch',
        X12:out('Grid')),
      f(vupscale, X6:'Grid', 'FIVE':factor:'Integer', X13:out('Grid')),
      f(hupscale, X13:'Grid', 'THREE':factor:'Integer', X14:out('Grid')),
      f(insert,
        X4:value:'Any',
        X9:container:'FrozenSet',
        X15:out('FrozenSet')),
      f(insert,
        X5:value:'Any',
        X15:container:'FrozenSet',
        X16:out('FrozenSet')),
      f(fill,
        X14:'Grid',
        'ZERO':value:'Integer',
        X16:'Patch',
        X17:out('Grid')),
      f(even, X1:n:'Integer', returns=X18),
      f(branch,
        condition=X18,
        X12:a:'Any',
        X17:b:'Any',
        X19:out('Any')),
      f(canvas, 'ZERO':value:'Integer', (1, 1):dimensions:'Point', X20:out('Grid')),
      f(lbind, hupscale, X20:fixed:'Any', X21:out('Callable')),
      f(chain,
        X21:h:'Callable',
        decrement:g:'Callable',
        height:f:'Callable',
        X22:out('Callable')),
      f(rbind, hconcat, X6:fixed:'Any', X23:out('Callable')),
      f(compose,
        X23:outer:'Callable',
        X22:inner:'Callable',
        X24:out('Callable')),
      f(lbind, hupscale, X6:fixed:'Any', X25:out('Callable')),
      f(compose,
        X25:outer:'Callable',
        height:inner:'Callable',
        X26:out('Callable')),
      f(fork,
        vconcat:outer:'Callable',
        X24:a:'Callable',
        rot90:b:'Callable',
        X27:out('Callable')),
      f(fork,
        vconcat:outer:'Callable',
        X26:a:'Callable',
        X27:b:'Callable',
        X28:out('Callable')),
      f(subtract,
        X1:a:'Numerical',
        'FOUR':b:'Numerical',
        X29:out('Numerical')),
      f(power, X28, X29:n:'Integer', X30:out('Callable')),
      f(X30, X19, OUT)
    ].
solve('4c5c2cf0', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(first, X2:'Container', X3:out('Any')),
      f(rbind, subgrid, IN:fixed:'Any', X4:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        identity:a:'Callable',
        rot90:b:'Callable',
        X5:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        X4:inner:'Callable',
        X6:out('Callable')),
      f(extract,
        X1:'Container',
        X6:condition:'Callable',
        X7:out('Any')),
      f(center, X7:'Patch', X8:out('Point')),
      f(subgrid, X3:'Patch', IN:'Grid', X9:out('Grid')),
      f(hmirror, X9:'Piece', X10:out('Piece')),
      f(objects,
        X10:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X11:out('Objects')),
      f(first, X11:'Container', X12:out('Any')),
      f(objects,
        X10:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X13:out('Objects')),
      f(extract,
        X13:'Container',
        X6:condition:'Callable',
        X14:out('Any')),
      f(center, X14:'Patch', X15:out('Point')),
      f(subtract,
        X8:a:'Numerical',
        X15:b:'Numerical',
        X16:out('Numerical')),
      f(shift, X12:'Patch', X16:directions:'Point', X17:out('Patch')),
      f(paint, IN:'Grid', X17:obj:'Object', X18:out('Grid')),
      f(objects,
        X18:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X19:out('Objects')),
      f(first, X19:'Container', X20:out('Any')),
      f(subgrid, X20:'Patch', X18:'Grid', X21:out('Grid')),
      f(vmirror, X21:'Piece', X22:out('Piece')),
      f(objects,
        X22:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X23:out('Objects')),
      f(first, X23:'Container', X24:out('Any')),
      f(objects,
        X22:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X25:out('Objects')),
      f(color, X7:obj:'Object', X26:out('Integer')),
      f(matcher, color, X26:target:'Any', X27:out('Callable')),
      f(extract,
        X25:'Container',
        X27:condition:'Callable',
        X28:out('Any')),
      f(center, X28:'Patch', X29:out('Point')),
      f(subtract,
        X8:a:'Numerical',
        X29:b:'Numerical',
        X30:out('Numerical')),
      f(shift, X24:'Patch', X30:directions:'Point', X31:out('Patch')),
      f(paint, X18:'Grid', X31:obj:'Object', OUT:out('Grid'))
    ].
solve('508bd3b6', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(argmin, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X4:out('Any')),
      f(ulcorner, X3:'Patch', X5:out('Point')),
      f(urcorner, X3:'Patch', X6:out('Point')),
      f(index, IN:'Grid', X5:loc:'Point', X7:out('Integer')),
      f(equality, X7:a:'Any', 'EIGHT':b:'Any', returns=X8),
      f(branch,
        condition=X8,
        X5:a:'Any',
        X6:b:'Any',
        X9:out('Any')),
      f(branch,
        condition=X8,
        (1, 1):a:'Any',
        (1, -1):b:'Any',
        X10:out('Any')),
      f(multiply,
        X10:a:'Numerical',
        X1:b:'Numerical',
        X11:out('Numerical')),
      f(double, X11:n:'Numerical', X12:out('Numerical')),
      f(add,
        X9:a:'Numerical',
        X12:b:'Numerical',
        X13:out('Numerical')),
      f(subtract,
        X9:a:'Numerical',
        X12:b:'Numerical',
        X14:out('Numerical')),
      f(connect, X13:a:'Point', X14:b:'Point', X15:out('Indices')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X15:'Patch',
        X16:out('Grid')),
      f(paint, X16:'Grid', X4:obj:'Object', X17:out('Grid')),
      f(objects,
        X17:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X18:out('Objects')),
      f(rbind, adjacent, X4:fixed:'Any', X19:out('Callable')),
      f(extract,
        X18:'Container',
        X19:condition:'Callable',
        X20:out('Any')),
      f(first, X20:'Container', X21:out('Any')),
      f(last, X21:'Container', X22:out('Any')),
      f(flip, b=X8, returns=X23),
      f(branch,
        condition=X23,
        (1, 1):a:'Any',
        (1, -1):b:'Any',
        X24:out('Any')),
      f(multiply,
        X24:a:'Numerical',
        X1:b:'Numerical',
        X25:out('Numerical')),
      f(double, X25:n:'Numerical', X26:out('Numerical')),
      f(add,
        X22:a:'Numerical',
        X26:b:'Numerical',
        X27:out('Numerical')),
      f(subtract,
        X22:a:'Numerical',
        X26:b:'Numerical',
        X28:out('Numerical')),
      f(connect, X27:a:'Point', X28:b:'Point', X29:out('Indices')),
      f(fill,
        X17:'Grid',
        'THREE':value:'Integer',
        X29:'Patch',
        X30:out('Grid')),
      f(paint, X30:'Grid', X3:obj:'Object', X31:out('Grid')),
      f(paint, X31:'Grid', X4:obj:'Object', OUT:out('Grid'))
    ].
solve('6d0160f0', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X1:out('Indices')),
      f(first, X1:'Container', X2:out('Any')),
      f(first, X2:'Container', X3:out('Any')),
      f(last, X2:'Container', X4:out('Any')),
      f(greater, X3:a:'Integer', 'THREE':b:'Integer', returns=X5),
      f(greater, X3:a:'Integer', 'SEVEN':b:'Integer', returns=X6),
      f(greater, X4:a:'Integer', 'THREE':b:'Integer', returns=X7),
      f(greater, X4:a:'Integer', 'SEVEN':b:'Integer', returns=X8),
      f(branch, condition=X5, 'FOUR':a:'Any', 'ZERO':b:'Any', X9:out('Any')),
      f(branch,
        condition=X6,
        'EIGHT':a:'Any',
        X9:b:'Any',
        X10:out('Any')),
      f(branch, condition=X7, 'FOUR':a:'Any', 'ZERO':b:'Any', X11:out('Any')),
      f(branch,
        condition=X8,
        'EIGHT':a:'Any',
        X11:b:'Any',
        X12:out('Any')),
      f(astuple, X10:a:'Integer', X12:b:'Integer', X13:out('Point')),
      f(initset, 'ZERO':value:'Any', X14:out('FrozenSet')),
      f(insert,
        'FOUR':value:'Any',
        X14:container:'FrozenSet',
        X15:out('FrozenSet')),
      f(insert,
        'EIGHT':value:'Any',
        X15:container:'FrozenSet',
        X16:out('FrozenSet')),
      f(product,
        X16:a:'Container',
        X16:b:'Container',
        X17:out('FrozenSet')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        (3, 3):dims:'Point',
        X18:out('Grid')),
      f(asindices, X18:'Grid', X19:out('Indices')),
      f(recolor, 'ZERO':value:'Integer', X19:'Patch', X20:out('Object')),
      f(lbind, shift, X20:fixed:'Any', X21:out('Callable')),
      f(mapply,
        X21,
        X17:container:'ContainerContainer',
        X22:out('FrozenSet')),
      f(paint, IN:'Grid', X22:obj:'Object', X23:out('Grid')),
      f(crop,
        IN:'Grid',
        X13:start:'Point',
        (3, 3):dims:'Point',
        X24:out('Grid')),
      f(replace,
        X24:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X25:out('Grid')),
      f(ofcolor, X25:'Grid', 'FOUR':value:'Integer', X26:out('Indices')),
      f(first, X26:'Container', X27:out('Any')),
      f(asindices, X25:'Grid', X28:out('Indices')),
      f(toobject, X28:'Patch', X25:'Grid', X29:out('Object')),
      f(multiply,
        X27:a:'Numerical',
        'FOUR':b:'Numerical',
        X30:out('Numerical')),
      f(shift, X29:'Patch', X30:directions:'Point', X31:out('Patch')),
      f(paint, X23:'Grid', X31:obj:'Object', OUT:out('Grid'))
    ].
solve(f8a8fe49, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(replace,
        IN:'Grid',
        'FIVE':replacee:'Integer',
        'ZERO':replacer:'Integer',
        X2:out('Grid')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X3:out('Objects')),
      f(first, X3:'Container', X4:out('Any')),
      f(portrait, X4:'Piece', returns=X5),
      f(branch,
        condition=X5,
        hsplit:a:'Any',
        vsplit:b:'Any',
        X6:out('Any')),
      f(branch,
        condition=X5,
        vmirror:a:'Any',
        hmirror:b:'Any',
        X7:out('Any')),
      f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X8:out('Indices')),
      f(subgrid, X8:'Patch', IN:'Grid', X9:out('Grid')),
      f(trim, X9:'Grid', X10:out('Grid')),
      f(X7, X10, X11),
      f(X6, X11, 'TWO', X12),
      f(compose,
        normalize:outer:'Callable',
        asobject:inner:'Callable',
        X13:out('Callable')),
      f(apply, X13, X12:'Container', X14:out('Container')),
      f(last, X14:'Container', X15:out('Any')),
      f(first, X14:'Container', X16:out('Any')),
      f(ulcorner, X8:'Patch', X17:out('Point')),
      f(increment, X17:x:'Numerical', X18:out('Numerical')),
      f(shift, X15:'Patch', X18:directions:'Point', X19:out('Patch')),
      f(shift, X16:'Patch', X18:directions:'Point', X20:out('Patch')),
      f(branch,
        condition=X5,
        width:a:'Any',
        height:b:'Any',
        X21:out('Any')),
      f(branch,
        condition=X5,
        tojvec:a:'Any',
        toivec:b:'Any',
        X22:out('Any')),
      f(X21, X15, X23),
      f(double, X23:n:'Numerical', X24:out('Numerical')),
      f(compose,
        X22:outer:'Callable',
        increment:inner:'Callable',
        X25:out('Callable')),
      f(X25, X23, X26),
      f(invert, X26:n:'Numerical', X27:out('Numerical')),
      f(X25, X24, X28),
      f(shift, X19:'Patch', X27:directions:'Point', X29:out('Patch')),
      f(shift, X20:'Patch', X28:directions:'Point', X30:out('Patch')),
      f(paint, X2:'Grid', X29:obj:'Object', X31:out('Grid')),
      f(paint, X31:'Grid', X30:obj:'Object', OUT:out('Grid'))
    ].
solve(d07ae81c, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X1:out('Objects')),
      f(sizefilter, X1:'Container', 'ONE':n:'Integer', X2:out('FrozenSet')),
      f(apply, color, X2:'Container', X3:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X4:out('FrozenSet')),
      f(apply, color, X4:'Container', X5:out('Container')),
      f(first, X5:'Container', X6:out('Any')),
      f(last, X5:'Container', X7:out('Any')),
      f(ofcolor, IN:'Grid', X6:value:'Integer', X8:out('Indices')),
      f(ofcolor, IN:'Grid', X7:value:'Integer', X9:out('Indices')),
      f(rbind, shoot, (1, 1):fixed:'Any', X10:out('Callable')),
      f(rbind, shoot, (-1, -1):fixed:'Any', X11:out('Callable')),
      f(rbind, shoot, (1, -1):fixed:'Any', X12:out('Callable')),
      f(rbind, shoot, (-1, 1):fixed:'Any', X13:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X10:a:'Callable',
        X11:b:'Callable',
        X14:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X12:a:'Callable',
        X13:b:'Callable',
        X15:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X14:a:'Callable',
        X15:b:'Callable',
        X16:out('Callable')),
      f(compose,
        X16:outer:'Callable',
        center:inner:'Callable',
        X17:out('Callable')),
      f(mapply,
        X17,
        X2:container:'ContainerContainer',
        X18:out('FrozenSet')),
      f(intersection,
        X8:a:'FrozenSet',
        X18:b:'FrozenSet',
        X19:out('FrozenSet')),
      f(intersection,
        X9:a:'FrozenSet',
        X18:b:'FrozenSet',
        X20:out('FrozenSet')),
      f(first, X2:'Container', X21:out('Any')),
      f(color, X21:obj:'Object', X22:out('Integer')),
      f(center, X21:'Patch', X23:out('Point')),
      f(neighbors, X23:loc:'Point', X24:out('Indices')),
      f(toobject, X24:'Patch', IN:'Grid', X25:out('Object')),
      f(mostcolor, X25:'Element', X26:out('Integer')),
      f(other, X3:'Container', X22:value:'Any', X27:out('Any')),
      f(equality, X26:a:'Any', X6:b:'Any', returns=X28),
      f(branch,
        condition=X28,
        X22:a:'Any',
        X27:b:'Any',
        X29:out('Any')),
      f(branch,
        condition=X28,
        X27:a:'Any',
        X22:b:'Any',
        X30:out('Any')),
      f(fill,
        IN:'Grid',
        X29:value:'Integer',
        X19:'Patch',
        X31:out('Grid')),
      f(fill,
        X31:'Grid',
        X30:value:'Integer',
        X20:'Patch',
        OUT:out('Grid'))
    ].
solve('6a1e5592', IN, OUT) :-
    [ f(width, IN:'Piece', X1:out('Integer')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(astuple, 'FIVE':a:'Integer', X1:b:'Integer', X3:out('Point')),
      f(crop,
        IN:'Grid',
        (0, 0):start:'Point',
        X3:dims:'Point',
        X4:out('Grid')),
      f(colorfilter,
        X2:objs:'Objects',
        'FIVE':value:'Integer',
        X5:out('Objects')),
      f(merge, X5:containers:'ContainerContainer', X6:out('Container')),
      f(cover, IN:'Grid', X6:'Patch', X7:out('Grid')),
      f(compose,
        toindices:outer:'Callable',
        normalize:inner:'Callable',
        X8:out('Callable')),
      f(apply, X8, X5:'Container', X9:out('Container')),
      f(asindices, X4:'Grid', X10:out('Indices')),
      f(ofcolor, X4:'Grid', 'ZERO':value:'Integer', X11:out('Indices')),
      f(ofcolor, X4:'Grid', 'TWO':value:'Integer', X12:out('Indices')),
      f(rbind, multiply, 'TEN':fixed:'Any', X13:out('Callable')),
      f(rbind, multiply, 'EIGHT':fixed:'Any', X14:out('Callable')),
      f(rbind, intersection, X12:fixed:'Any', X15:out('Callable')),
      f(rbind, intersection, X11:fixed:'Any', X16:out('Callable')),
      f(rbind, intersection, X10:fixed:'Any', X17:out('Callable')),
      f(chain,
        X13:h:'Callable',
        size:g:'Callable',
        X15:f:'Callable',
        X18:out('Callable')),
      f(chain,
        size:h:'Callable',
        X16:g:'Callable',
        delta:f:'Callable',
        X19:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        uppermost:inner:'Callable',
        X20:out('Callable')),
      f(chain,
        size:h:'Callable',
        X16:g:'Callable',
        outbox:f:'Callable',
        X21:out('Callable')),
      f(chain,
        X13:h:'Callable',
        size:g:'Callable',
        X17:f:'Callable',
        X22:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X18:inner:'Callable',
        X23:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X22:a:'Callable',
        X23:b:'Callable',
        X24:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X24:a:'Callable',
        X21:b:'Callable',
        X25:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X25:a:'Callable',
        X20:b:'Callable',
        X26:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X26:a:'Callable',
        X19:b:'Callable',
        X27:out('Callable')),
      f(rbind, apply, X10:fixed:'Any', X28:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X29:out('Callable')),
      f(rbind, argmax, X27:fixed:'Any', X30:out('Callable')),
      f(chain,
        X30:h:'Callable',
        X28:g:'Callable',
        X29:f:'Callable',
        X31:out('Callable')),
      f(mapply,
        X31,
        X9:container:'ContainerContainer',
        X32:out('FrozenSet')),
      f(fill,
        X7:'Grid',
        'ONE':value:'Integer',
        X32:'Patch',
        OUT:out('Grid'))
    ].
solve('0e206a2e', IN, OUT) :-
    [ f(palette, IN:'Element', X1:out('IntegerSet')),
      f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(rbind, greater, 'ONE':fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        numcolors:inner:'Callable',
        X4:out('Callable')),
      f(sfilter,
        X2:'Container',
        X4:condition:'Callable',
        X5:out('Container')),
      f(remove, 'ZERO':value:'Any', X1:'Container', X6:out('Container')),
      f(lbind, colorcount, IN:fixed:'Any', X7:out('Callable')),
      f(argmax,
        X6:'Container',
        X7:compfunc:'Callable',
        X8:out('Any')),
      f(remove, X8:value:'Any', X6:'Container', X9:out('Container')),
      f(rbind, contained, X9:fixed:'Any', X10:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        first:inner:'Callable',
        X11:out('Callable')),
      f(rbind, sfilter, X11:fixed:'Any', X12:out('Callable')),
      f(lbind, rbind, subtract:fixed:'Any', X13:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X14:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X15:out('Callable')),
      f(compose,
        X13:outer:'Callable',
        ulcorner:inner:'Callable',
        X16:out('Callable')),
      f(chain,
        X16:h:'Callable',
        X12:g:'Callable',
        normalize:f:'Callable',
        X17:out('Callable')),
      f(chain,
        X14:h:'Callable',
        X12:g:'Callable',
        normalize:f:'Callable',
        X18:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X17:a:'Callable',
        X18:b:'Callable',
        X19:out('Callable')),
      f(compose,
        X15:outer:'Callable',
        normalize:inner:'Callable',
        X20:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X20:a:'Callable',
        X19:b:'Callable',
        X21:out('Callable')),
      f(astuple, cmirror:a:'Integer', dmirror:b:'Integer', X22:out('Point')),
      f(astuple, hmirror:a:'Integer', vmirror:b:'Integer', X23:out('Point')),
      f(combine,
        X22:a:'Container',
        X23:b:'Container',
        X24:out('Container')),
      f(product,
        X24:a:'Container',
        X24:b:'Container',
        X25:out('FrozenSet')),
      f(fork,
        compose:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X26:out('Callable')),
      f(apply, X26, X25:'Container', X27:out('Container')),
      f(totuple, X27:container:'FrozenSet', X28:out('Tuple')),
      f(combine,
        X24:a:'Container',
        X28:b:'Container',
        X29:out('Container')),
      f(lbind, rapply, X29:fixed:'Any', X30:out('Callable')),
      f(mapply,
        X30,
        X5:container:'ContainerContainer',
        X31:out('FrozenSet')),
      f(mapply,
        X21,
        X31:container:'ContainerContainer',
        X32:out('FrozenSet')),
      f(paint, IN:'Grid', X32:obj:'Object', X33:out('Grid')),
      f(merge, X5:containers:'ContainerContainer', X34:out('Container')),
      f(cover, X33:'Grid', X34:'Patch', OUT:out('Grid'))
    ].
solve(d22278a0, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X2:out('Objects')),
      f(fork,
        multiply:outer:'Callable',
        sign:a:'Callable',
        identity:b:'Callable',
        X3:out('Callable')),
      f(lbind, apply, X3:fixed:'Any', X4:out('Callable')),
      f(chain,
        even:h:'Callable',
        maximum:g:'Callable',
        X4:f:'Callable',
        X5:out('Callable')),
      f(lbind, sfilter, X1:fixed:'Any', X6:out('Callable')),
      f(fork,
        add:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X7:out('Callable')),
      f(rbind, remove, X2:fixed:'Any', X8:out('Callable')),
      f(compose,
        center:outer:'Callable',
        last:inner:'Callable',
        X9:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        first:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(compose,
        X5:outer:'Callable',
        X10:inner:'Callable',
        X11:out('Callable')),
      f(lbind, rbind, equality:fixed:'Any', X12:out('Callable')),
      f(lbind, argmin, X2:fixed:'Any', X13:out('Callable')),
      f(chain,
        X7:h:'Callable',
        X4:g:'Callable',
        X10:f:'Callable',
        X14:out('Callable')),
      f(lbind, lbind, astuple:fixed:'Any', X15:out('Callable')),
      f(lbind, rbind, astuple:fixed:'Any', X16:out('Callable')),
      f(lbind, compose, X11:fixed:'Any', X17:out('Callable')),
      f(lbind, compose, X14:fixed:'Any', X18:out('Callable')),
      f(compose,
        X18:outer:'Callable',
        X15:inner:'Callable',
        X19:out('Callable')),
      f(compose,
        X18:outer:'Callable',
        X16:inner:'Callable',
        X20:out('Callable')),
      f(compose,
        X13:outer:'Callable',
        X19:inner:'Callable',
        X21:out('Callable')),
      f(rbind, compose, X21:fixed:'Any', X22:out('Callable')),
      f(lbind, lbind, valmin:fixed:'Any', X23:out('Callable')),
      f(rbind, compose, X19:fixed:'Any', X24:out('Callable')),
      f(chain,
        X24:h:'Callable',
        X23:g:'Callable',
        X8:f:'Callable',
        X25:out('Callable')),
      f(lbind, fork, greater:fixed:'Any', X26:out('Callable')),
      f(fork,
        X26:outer:'Callable',
        X25:a:'Callable',
        X20:b:'Callable',
        X27:out('Callable')),
      f(chain,
        X6:h:'Callable',
        X17:g:'Callable',
        X16:f:'Callable',
        X28:out('Callable')),
      f(chain,
        X6:h:'Callable',
        X22:g:'Callable',
        X12:f:'Callable',
        X29:out('Callable')),
      f(fork,
        intersection:outer:'Callable',
        X28:a:'Callable',
        X29:b:'Callable',
        X30:out('Callable')),
      f(compose,
        X6:outer:'Callable',
        X27:inner:'Callable',
        X31:out('Callable')),
      f(fork,
        intersection:outer:'Callable',
        X30:a:'Callable',
        X31:b:'Callable',
        X32:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X32:b:'Callable',
        X33:out('Callable')),
      f(mapply,
        X33,
        X2:container:'ContainerContainer',
        X34:out('FrozenSet')),
      f(paint, IN:'Grid', X34:obj:'Object', OUT:out('Grid'))
    ].
solve('4290ef0e', IN, OUT) :-
    [ f(mostcolor, IN:'Element', X1:out('Integer')),
      f(fgpartition, IN:'Grid', X2:out('Objects')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X3:out('Objects')),
      f(rbind, valmax, width:fixed:'Any', X4:out('Callable')),
      f(lbind, colorfilter, X3:fixed:'Any', X5:out('Callable')),
      f(chain,
        X4:h:'Callable',
        X5:g:'Callable',
        color:f:'Callable',
        X6:out('Callable')),
      f(compose,
        maximum:outer:'Callable',
        shape:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X7:a:'Callable',
        X6:b:'Callable',
        X8:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X8:inner:'Callable',
        X9:out('Callable')),
      f(order,
        X2:'Container',
        X9:compfunc:'Callable',
        X10:out('Tuple')),
      f(rbind, argmin, centerofmass:fixed:'Any', X11:out('Callable')),
      f(compose,
        initset:outer:'Callable',
        vmirror:inner:'Callable',
        X12:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        dmirror:a:'Callable',
        X12:b:'Callable',
        X13:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        cmirror:a:'Callable',
        X13:b:'Callable',
        X14:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        hmirror:a:'Callable',
        X14:b:'Callable',
        X15:out('Callable')),
      f(compose,
        X11:outer:'Callable',
        X15:inner:'Callable',
        X16:out('Callable')),
      f(apply, X16, X10:'Container', X17:out('Container')),
      f(size, X2:'Container', X18:out('Integer')),
      f(apply, size, X2:'Container', X19:out('Container')),
      f(contained, 'ONE':value:'Any', X19:'Container', returns=X20),
      f(increment, X18:x:'Numerical', X21:out('Numerical')),
      f(branch,
        condition=X20,
        X18:a:'Any',
        X21:b:'Any',
        X22:out('Any')),
      f(double, X22:n:'Numerical', X23:out('Numerical')),
      f(decrement, X23:x:'Numerical', X24:out('Numerical')),
      f(apply, normalize, X17:'Container', X25:out('Container')),
      f(interval,
        'ZERO':start:'Integer',
        X22:stop:'Integer',
        'ONE':step:'Integer',
        X26:out('Tuple')),
      f(pair, X26:a:'Tuple', X26:b:'Tuple', X27:out('TupleTuple')),
      f(mpapply,
        shift,
        X25:a:'Tuple',
        X27:b:'Tuple',
        X28:out('Tuple')),
      f(astuple, X24:a:'Integer', X24:b:'Integer', X29:out('Point')),
      f(canvas,
        X1:value:'Integer',
        X29:dimensions:'Point',
        X30:out('Grid')),
      f(paint, X30:'Grid', X28:obj:'Object', X31:out('Grid')),
      f(rot90, X31:'Grid', X32:out('Grid')),
      f(paint, X32:'Grid', X28:obj:'Object', X33:out('Grid')),
      f(rot90, X33:'Grid', X34:out('Grid')),
      f(paint, X34:'Grid', X28:obj:'Object', X35:out('Grid')),
      f(rot90, X35:'Grid', X36:out('Grid')),
      f(paint, X36:'Grid', X28:obj:'Object', OUT:out('Grid'))
    ].
solve(50846271, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(prapply, connect, X1, X1, X2),
      f(lbind, greater, 'SIX':fixed:'Any', X3:out('Callable')),
      f(compose,
        X3:outer:'Callable',
        size:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        either:outer:'Callable',
        vline:a:'Callable',
        hline:b:'Callable',
        X5:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X4:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(mfilter, X2:'Container', X6, X7:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X7:'Patch',
        X8:out('Grid')),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X9:out('Objects')),
      f(colorfilter,
        X9:objs:'Objects',
        'TWO':value:'Integer',
        X10:out('Objects')),
      f(valmax,
        X10:'Container',
        width:compfunc:'Callable',
        X11:out('Integer')),
      f(halve, X11:n:'Numerical', X12:out('Numerical')),
      f(toivec, X12:i:'Integer', X13:out('Point')),
      f(tojvec, X12:j:'Integer', X14:out('Point')),
      f(rbind, add, (0, 2):fixed:'Any', X15:out('Callable')),
      f(rbind, add, (2, 0):fixed:'Any', X16:out('Callable')),
      f(rbind, subtract, (0, 2):fixed:'Any', X17:out('Callable')),
      f(rbind, subtract, (2, 0):fixed:'Any', X18:out('Callable')),
      f(rbind, colorcount, 'TWO':fixed:'Any', X19:out('Callable')),
      f(rbind, toobject, X8:fixed:'Any', X20:out('Callable')),
      f(compose,
        initset:outer:'Callable',
        X15:inner:'Callable',
        X21:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X16:a:'Callable',
        X21:b:'Callable',
        X22:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X17:a:'Callable',
        X22:b:'Callable',
        X23:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X18:a:'Callable',
        X23:b:'Callable',
        X24:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        dneighbors:a:'Callable',
        X24:b:'Callable',
        X25:out('Callable')),
      f(chain,
        X19:h:'Callable',
        X20:g:'Callable',
        X25:f:'Callable',
        X26:out('Callable')),
      f(rbind, argmax, X26:fixed:'Any', X27:out('Callable')),
      f(compose,
        X27:outer:'Callable',
        toindices:inner:'Callable',
        X28:out('Callable')),
      f(apply, X28, X10:'Container', X29:out('Container')),
      f(rbind, add, X13:fixed:'Any', X30:out('Callable')),
      f(rbind, subtract, X13:fixed:'Any', X31:out('Callable')),
      f(rbind, add, X14:fixed:'Any', X32:out('Callable')),
      f(rbind, subtract, X14:fixed:'Any', X33:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X30:a:'Callable',
        X31:b:'Callable',
        X34:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X32:a:'Callable',
        X33:b:'Callable',
        X35:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X34:a:'Callable',
        X35:b:'Callable',
        X36:out('Callable')),
      f(mapply,
        X36,
        X29:container:'ContainerContainer',
        X37:out('FrozenSet')),
      f(fill,
        X8:'Grid',
        'EIGHT':value:'Integer',
        X37:'Patch',
        X38:out('Grid')),
      f(fill,
        X38:'Grid',
        'TWO':value:'Integer',
        X1:'Patch',
        OUT:out('Grid'))
    ].
solve(b527c5c6, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(matcher, first, 'TWO':target:'Any', X2:out('Callable')),
      f(rbind, sfilter, X2:fixed:'Any', X3:out('Callable')),
      f(compose,
        lowermost:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(compose,
        rightmost:outer:'Callable',
        X3:inner:'Callable',
        X5:out('Callable')),
      f(compose,
        uppermost:outer:'Callable',
        X3:inner:'Callable',
        X6:out('Callable')),
      f(compose,
        leftmost:outer:'Callable',
        X3:inner:'Callable',
        X7:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X4:a:'Callable',
        lowermost:b:'Callable',
        X8:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X5:a:'Callable',
        rightmost:b:'Callable',
        X9:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X6:a:'Callable',
        uppermost:b:'Callable',
        X10:out('Callable')),
      f(fork,
        equality:outer:'Callable',
        X7:a:'Callable',
        leftmost:b:'Callable',
        X11:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X10:inner:'Callable',
        X12:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X11:inner:'Callable',
        X13:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X12:a:'Callable',
        X8:b:'Callable',
        X14:out('Callable')),
      f(fork,
        add:outer:'Callable',
        X13:a:'Callable',
        X9:b:'Callable',
        X15:out('Callable')),
      f(fork,
        astuple:outer:'Callable',
        X14:a:'Callable',
        X15:b:'Callable',
        X16:out('Callable')),
      f(compose,
        center:outer:'Callable',
        X3:inner:'Callable',
        X17:out('Callable')),
      f(fork,
        shoot:outer:'Callable',
        X17:a:'Callable',
        X16:b:'Callable',
        X18:out('Callable')),
      f(mapply,
        X18,
        X1:container:'ContainerContainer',
        X19:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'TWO':value:'Integer',
        X19:'Patch',
        X20:out('Grid')),
      f(compose,
        vline:outer:'Callable',
        X18:inner:'Callable',
        X21:out('Callable')),
      f(sfilter,
        X1:'Container',
        X21:condition:'Callable',
        X22:out('Container')),
      f(difference,
        X1:a:'FrozenSet',
        X22:b:'FrozenSet',
        X23:out('FrozenSet')),
      f(chain,
        decrement:h:'Callable',
        minimum:g:'Callable',
        shape:f:'Callable',
        X24:out('Callable')),
      f(compose,
        increment:outer:'Callable',
        X24:inner:'Callable',
        X25:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X24:inner:'Callable',
        X26:out('Callable')),
      f(rbind, interval, 'ONE':fixed:'Any', X27:out('Callable')),
      f(fork,
        X27:outer:'Callable',
        X26:a:'Callable',
        X25:b:'Callable',
        X28:out('Callable')),
      f(lbind, apply, toivec:fixed:'Any', X29:out('Callable')),
      f(lbind, apply, tojvec:fixed:'Any', X30:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X31:out('Callable')),
      f(compose,
        X31:outer:'Callable',
        X18:inner:'Callable',
        X32:out('Callable')),
      f(compose,
        X29:outer:'Callable',
        X28:inner:'Callable',
        X33:out('Callable')),
      f(compose,
        X30:outer:'Callable',
        X28:inner:'Callable',
        X34:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X32:a:'Callable',
        X33:b:'Callable',
        X35:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X32:a:'Callable',
        X34:b:'Callable',
        X36:out('Callable')),
      f(mapply,
        X35,
        X23:container:'ContainerContainer',
        X37:out('FrozenSet')),
      f(mapply,
        X36,
        X22:container:'ContainerContainer',
        X38:out('FrozenSet')),
      f(combine,
        X37:a:'Container',
        X38:b:'Container',
        X39:out('Container')),
      f(underfill,
        X20:'Grid',
        'THREE':value:'Integer',
        X39:'Patch',
        OUT:out('Grid'))
    ].
solve('150deff5', IN, OUT) :-
    [ f(canvas, 'FIVE':value:'Integer', (2, 2):dimensions:'Point', X1:out('Grid')),
      f(asobject, X1:'Grid', X2:out('Object')),
      f(occurrences, IN:'Grid', X2:obj:'Object', X3:out('Indices')),
      f(lbind, shift, X2:fixed:'Any', X4:out('Callable')),
      f(mapply,
        X4,
        X3:container:'ContainerContainer',
        X5:out('FrozenSet')),
      f(fill,
        IN:'Grid',
        'EIGHT':value:'Integer',
        X5:'Patch',
        X6:out('Grid')),
      f(canvas, 'FIVE':value:'Integer', (1, 1):dimensions:'Point', X7:out('Grid')),
      f(astuple, 'TWO':a:'Integer', 'ONE':b:'Integer', X8:out('Point')),
      f(canvas,
        'EIGHT':value:'Integer',
        X8:dimensions:'Point',
        X9:out('Grid')),
      f(vconcat, X9:a:'Grid', X7:b:'Grid', X10:out('Grid')),
      f(asobject, X10:'Grid', X11:out('Object')),
      f(occurrences, X6:'Grid', X11:obj:'Object', X12:out('Indices')),
      f(lbind, shift, X11:fixed:'Any', X13:out('Callable')),
      f(mapply,
        X13,
        X12:container:'ContainerContainer',
        X14:out('FrozenSet')),
      f(fill,
        X6:'Grid',
        'TWO':value:'Integer',
        X14:'Patch',
        X15:out('Grid')),
      f(astuple, 'ONE':a:'Integer', 'THREE':b:'Integer', X16:out('Point')),
      f(canvas,
        'FIVE':value:'Integer',
        X16:dimensions:'Point',
        X17:out('Grid')),
      f(asobject, X17:'Grid', X18:out('Object')),
      f(occurrences,
        X15:'Grid',
        X18:obj:'Object',
        X19:out('Indices')),
      f(lbind, shift, X18:fixed:'Any', X20:out('Callable')),
      f(mapply,
        X20,
        X19:container:'ContainerContainer',
        X21:out('FrozenSet')),
      f(fill,
        X15:'Grid',
        'TWO':value:'Integer',
        X21:'Patch',
        X22:out('Grid')),
      f(hmirror, X10:'Piece', X23:out('Piece')),
      f(asobject, X23:'Grid', X24:out('Object')),
      f(occurrences,
        X22:'Grid',
        X24:obj:'Object',
        X25:out('Indices')),
      f(lbind, shift, X24:fixed:'Any', X26:out('Callable')),
      f(mapply,
        X26,
        X25:container:'ContainerContainer',
        X27:out('FrozenSet')),
      f(fill,
        X22:'Grid',
        'TWO':value:'Integer',
        X27:'Patch',
        X28:out('Grid')),
      f(dmirror, X10:'Piece', X29:out('Piece')),
      f(asobject, X29:'Grid', X30:out('Object')),
      f(occurrences,
        X28:'Grid',
        X30:obj:'Object',
        X31:out('Indices')),
      f(lbind, shift, X30:fixed:'Any', X32:out('Callable')),
      f(mapply,
        X32,
        X31:container:'ContainerContainer',
        X33:out('FrozenSet')),
      f(fill,
        X28:'Grid',
        'TWO':value:'Integer',
        X33:'Patch',
        X34:out('Grid')),
      f(vmirror, X29:'Piece', X35:out('Piece')),
      f(asobject, X35:'Grid', X36:out('Object')),
      f(occurrences,
        X34:'Grid',
        X36:obj:'Object',
        X37:out('Indices')),
      f(lbind, shift, X36:fixed:'Any', X38:out('Callable')),
      f(mapply,
        X38,
        X37:container:'ContainerContainer',
        X39:out('FrozenSet')),
      f(fill,
        X34:'Grid',
        'TWO':value:'Integer',
        X39:'Patch',
        OUT:out('Grid'))
    ].
solve(b7249182, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(merge, X1:containers:'ContainerContainer', X2:out('Container')),
      f(portrait, X2:'Piece', returns=X3),
      f(branch,
        condition=X3,
        identity:a:'Any',
        dmirror:b:'Any',
        X4:out('Any')),
      f(X4, IN, X5),
      f(objects,
        X5:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X6:out('Objects')),
      f(order,
        X6:'Container',
        uppermost:compfunc:'Callable',
        X7:out('Tuple')),
      f(first, X7:'Container', X8:out('Any')),
      f(last, X7:'Container', X9:out('Any')),
      f(color, X8:obj:'Object', X10:out('Integer')),
      f(color, X9:obj:'Object', X11:out('Integer')),
      f(compose,
        first:outer:'Callable',
        toindices:inner:'Callable',
        X12:out('Callable')),
      f(X12, X8, X13),
      f(X12, X9, X14),
      f(connect, X13:a:'Point', X14:b:'Point', X15:out('Indices')),
      f(centerofmass, X15:'Patch', X16:out('Point')),
      f(connect, X13:a:'Point', X16:b:'Point', X17:out('Indices')),
      f(fill,
        X5:'Grid',
        X11:value:'Integer',
        X15:'Patch',
        X18:out('Grid')),
      f(fill,
        X18:'Grid',
        X10:value:'Integer',
        X17:'Patch',
        X19:out('Grid')),
      f(add, X16:a:'Numerical', (1, 0):b:'Numerical', X20:out('Numerical')),
      f(initset, X16:value:'Any', X21:out('FrozenSet')),
      f(insert,
        X20:value:'Any',
        X21:container:'FrozenSet',
        X22:out('FrozenSet')),
      f(toobject, X22:'Patch', X19:'Grid', X23:out('Object')),
      f(astuple, 'ZERO':a:'Integer', 'NEG_TWO':b:'Integer', X24:out('Point')),
      f(shift, X23:'Patch', (0, 2):directions:'Point', X25:out('Patch')),
      f(shift, X23:'Patch', X24:directions:'Point', X26:out('Patch')),
      f(combine,
        X25:a:'Container',
        X26:b:'Container',
        X27:out('Container')),
      f(ulcorner, X27:'Patch', X28:out('Point')),
      f(urcorner, X27:'Patch', X29:out('Point')),
      f(connect, X28:a:'Point', X29:b:'Point', X30:out('Indices')),
      f(shift, X30:'Patch', (-1, 0):directions:'Point', X31:out('Patch')),
      f(llcorner, X27:'Patch', X32:out('Point')),
      f(lrcorner, X27:'Patch', X33:out('Point')),
      f(connect, X32:a:'Point', X33:b:'Point', X34:out('Indices')),
      f(shift, X34:'Patch', (1, 0):directions:'Point', X35:out('Patch')),
      f(paint, X19:'Grid', X27:obj:'Object', X36:out('Grid')),
      f(fill,
        X36:'Grid',
        X10:value:'Integer',
        X31:'Patch',
        X37:out('Grid')),
      f(fill,
        X37:'Grid',
        X11:value:'Integer',
        X35:'Patch',
        X38:out('Grid')),
      f(cover, X38:'Grid', X22:'Patch', X39:out('Grid')),
      f(X4, X39, OUT)
    ].
solve('9d9215db', IN, OUT) :-
    [ f(rot90, IN:'Grid', X1:out('Grid')),
      f(rot180, IN:'Grid', X2:out('Grid')),
      f(rot270, IN:'Grid', X3:out('Grid')),
      f(initset, IN:value:'Any', X4:out('FrozenSet')),
      f(chain,
        numcolors:h:'Callable',
        lefthalf:g:'Callable',
        tophalf:f:'Callable',
        X5:out('Callable')),
      f(insert,
        X1:value:'Any',
        X4:container:'FrozenSet',
        X6:out('FrozenSet')),
      f(insert,
        X2:value:'Any',
        X6:container:'FrozenSet',
        X7:out('FrozenSet')),
      f(insert,
        X3:value:'Any',
        X7:container:'FrozenSet',
        X8:out('FrozenSet')),
      f(argmax,
        X8:'Container',
        X5:compfunc:'Callable',
        X9:out('Any')),
      f(vmirror, X9:'Piece', X10:out('Piece')),
      f(papply, pair, X9:a:'Tuple', X10:b:'Tuple', X11:out('Tuple')),
      f(lbind, apply, maximum:fixed:'Any', X12:out('Callable')),
      f(apply, X12, X11:'Container', X13:out('Container')),
      f(partition, X13:'Grid', X14:out('Objects')),
      f(sizefilter,
        X14:'Container',
        'FOUR':n:'Integer',
        X15:out('FrozenSet')),
      f(apply, llcorner, X15:'Container', X16:out('Container')),
      f(apply, lrcorner, X15:'Container', X17:out('Container')),
      f(combine,
        X16:a:'Container',
        X17:b:'Container',
        X18:out('Container')),
      f(cover, X13:'Grid', X18:'Patch', X19:out('Grid')),
      f(tojvec, 'NEG_TWO':j:'Integer', X20:out('Point')),
      f(rbind, add, (0, 2):fixed:'Any', X21:out('Callable')),
      f(rbind, add, X20:fixed:'Any', X22:out('Callable')),
      f(compose,
        X21:outer:'Callable',
        ulcorner:inner:'Callable',
        X23:out('Callable')),
      f(compose,
        X22:outer:'Callable',
        urcorner:inner:'Callable',
        X24:out('Callable')),
      f(fork,
        connect:outer:'Callable',
        X23:a:'Callable',
        X24:b:'Callable',
        X25:out('Callable')),
      f(compose,
        even:outer:'Callable',
        last:inner:'Callable',
        X26:out('Callable')),
      f(rbind, sfilter, X26:fixed:'Any', X27:out('Callable')),
      f(chain,
        normalize:h:'Callable',
        X27:g:'Callable',
        X25:f:'Callable',
        X28:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X28:a:'Callable',
        X23:b:'Callable',
        X29:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        color:a:'Callable',
        X29:b:'Callable',
        X30:out('Callable')),
      f(mapply,
        X30,
        X15:container:'ContainerContainer',
        X31:out('FrozenSet')),
      f(paint, X19:'Grid', X31:obj:'Object', X32:out('Grid')),
      f(rot90, X32:'Grid', X33:out('Grid')),
      f(rot180, X32:'Grid', X34:out('Grid')),
      f(rot270, X32:'Grid', X35:out('Grid')),
      f(papply, pair, X32:a:'Tuple', X33:b:'Tuple', X36:out('Tuple')),
      f(apply, X12, X36:'Container', X37:out('Container')),
      f(papply, pair, X37:a:'Tuple', X34:b:'Tuple', X38:out('Tuple')),
      f(apply, X12, X38:'Container', X39:out('Container')),
      f(papply, pair, X39:a:'Tuple', X35:b:'Tuple', X40:out('Tuple')),
      f(apply, X12, X40:'Container', OUT:out('Container'))
    ].
solve('6855a6e4', IN, OUT) :-
    [ f(fgpartition, IN:'Grid', X1:out('Objects')),
      f(rot90, IN:'Grid', X2:out('Grid')),
      f(colorfilter,
        X1:objs:'Objects',
        'TWO':value:'Integer',
        X3:out('Objects')),
      f(first, X3:'Container', X4:out('Any')),
      f(portrait, X4:'Piece', returns=X5),
      f(branch,
        condition=X5,
        IN:a:'Any',
        X2:b:'Any',
        X6:out('Any')),
      f(objects,
        X6:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X7:out('Objects')),
      f(colorfilter,
        X7:objs:'Objects',
        'FIVE':value:'Integer',
        X8:out('Objects')),
      f(apply, center, X8:'Container', X9:out('Container')),
      f(valmin,
        X9:'Container',
        first:compfunc:'Callable',
        X10:out('Integer')),
      f(compose,
        first:outer:'Callable',
        center:inner:'Callable',
        X11:out('Callable')),
      f(matcher, X11, X10:target:'Any', X12:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X12:inner:'Callable',
        X13:out('Callable')),
      f(extract,
        X8:'Container',
        X12:condition:'Callable',
        X14:out('Any')),
      f(extract,
        X8:'Container',
        X13:condition:'Callable',
        X15:out('Any')),
      f(ulcorner, X14:'Patch', X16:out('Point')),
      f(ulcorner, X15:'Patch', X17:out('Point')),
      f(subgrid, X14:'Patch', X6:'Grid', X18:out('Grid')),
      f(subgrid, X15:'Patch', X6:'Grid', X19:out('Grid')),
      f(hmirror, X18:'Piece', X20:out('Piece')),
      f(hmirror, X19:'Piece', X21:out('Piece')),
      f(ofcolor, X20:'Grid', 'FIVE':value:'Integer', X22:out('Indices')),
      f(recolor, 'FIVE':value:'Integer', X22:'Patch', X23:out('Object')),
      f(ofcolor, X21:'Grid', 'FIVE':value:'Integer', X24:out('Indices')),
      f(recolor, 'FIVE':value:'Integer', X24:'Patch', X25:out('Object')),
      f(height, X23:'Piece', X26:out('Integer')),
      f(height, X25:'Piece', X27:out('Integer')),
      f(add, 'THREE':a:'Numerical', X26:b:'Numerical', X28:out('Numerical')),
      f(add, 'THREE':a:'Numerical', X27:b:'Numerical', X29:out('Numerical')),
      f(toivec, X28:i:'Integer', X30:out('Point')),
      f(toivec, X29:i:'Integer', X31:out('Point')),
      f(add,
        X16:a:'Numerical',
        X30:b:'Numerical',
        X32:out('Numerical')),
      f(subtract,
        X17:a:'Numerical',
        X31:b:'Numerical',
        X33:out('Numerical')),
      f(shift, X23:'Patch', X32:directions:'Point', X34:out('Patch')),
      f(shift, X25:'Patch', X33:directions:'Point', X35:out('Patch')),
      f(merge, X8:containers:'ContainerContainer', X36:out('Container')),
      f(cover, X6:'Grid', X36:'Patch', X37:out('Grid')),
      f(paint, X37:'Grid', X34:obj:'Object', X38:out('Grid')),
      f(paint, X38:'Grid', X35:obj:'Object', X39:out('Grid')),
      f(rot270, X39:'Grid', X40:out('Grid')),
      f(branch,
        condition=X5,
        X39:a:'Any',
        X40:b:'Any',
        OUT:out('Any'))
    ].
solve('264363fd', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(argmin, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(normalize, X2:'Patch', X3:out('Patch')),
      f(height, X2:'Piece', X4:out('Integer')),
      f(width, X2:'Piece', X5:out('Integer')),
      f(equality, X4:a:'Any', 'FIVE':b:'Any', returns=X6),
      f(equality, X5:a:'Any', 'FIVE':b:'Any', returns=X7),
      f(astuple, X6:a:'Integer', X7:b:'Integer', X8:out('Point')),
      f(add, (1, 1):a:'Numerical', X8:b:'Numerical', X9:out('Numerical')),
      f(invert, X9:n:'Numerical', X10:out('Numerical')),
      f(center, X2:'Patch', X11:out('Point')),
      f(index, IN:'Grid', X11:loc:'Point', X12:out('Integer')),
      f(branch,
        condition=X6,
        (-1, 0):a:'Any',
        (0, 1):b:'Any',
        X13:out('Any')),
      f(add,
        X13:a:'Numerical',
        X11:b:'Numerical',
        X14:out('Numerical')),
      f(index, IN:'Grid', X14:loc:'Point', X15:out('Integer')),
      f(astuple, X12:a:'Integer', (0, 0):b:'Integer', X16:out('Point')),
      f(initset, X16:value:'Any', X17:out('FrozenSet')),
      f(cover, IN:'Grid', X2:'Patch', X18:out('Grid')),
      f(mostcolor, X18:'Element', X19:out('Integer')),
      f(ofcolor, X18:'Grid', X19:value:'Integer', X20:out('Indices')),
      f(occurrences,
        X18:'Grid',
        X17:obj:'Object',
        X21:out('Indices')),
      f(objects,
        X18:'Grid',
        univalued=false,
        diagonal=false,
        without_bg=true,
        X22:out('Objects')),
      f(rbind, occurrences, X17:fixed:'Any', X23:out('Callable')),
      f(rbind, subgrid, X18:fixed:'Any', X24:out('Callable')),
      f(compose,
        X23:outer:'Callable',
        X24:inner:'Callable',
        X25:out('Callable')),
      f(lbind, mapply, vfrontier:fixed:'Any', X26:out('Callable')),
      f(lbind, mapply, hfrontier:fixed:'Any', X27:out('Callable')),
      f(compose,
        X26:outer:'Callable',
        X25:inner:'Callable',
        X28:out('Callable')),
      f(compose,
        X27:outer:'Callable',
        X25:inner:'Callable',
        X29:out('Callable')),
      f(branch,
        condition=X6,
        X28:a:'Any',
        X29:b:'Any',
        X30:out('Any')),
      f(branch,
        condition=X7,
        X29:a:'Any',
        X28:b:'Any',
        X31:out('Any')),
      f(fork,
        combine:outer:'Callable',
        X30:a:'Callable',
        X31:b:'Callable',
        X32:out('Callable')),
      f(lbind, recolor, X15:fixed:'Any', X33:out('Callable')),
      f(compose,
        X33:outer:'Callable',
        X32:inner:'Callable',
        X34:out('Callable')),
      f(fork,
        paint:outer:'Callable',
        X24:a:'Callable',
        X34:b:'Callable',
        X35:out('Callable')),
      f(compose,
        asobject:outer:'Callable',
        X35:inner:'Callable',
        X36:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X36:a:'Callable',
        ulcorner:b:'Callable',
        X37:out('Callable')),
      f(mapply,
        X37,
        X22:container:'ContainerContainer',
        X38:out('FrozenSet')),
      f(paint, X18:'Grid', X38:obj:'Object', X39:out('Grid')),
      f(shift, X3:'Patch', X10:directions:'Point', X40:out('Patch')),
      f(lbind, shift, X40:fixed:'Any', X41:out('Callable')),
      f(mapply,
        X41,
        X21:container:'ContainerContainer',
        X42:out('FrozenSet')),
      f(paint, X39:'Grid', X42:obj:'Object', X43:out('Grid')),
      f(fill,
        X43:'Grid',
        X19:value:'Integer',
        X20:'Patch',
        OUT:out('Grid'))
    ].
solve('7df24a62', IN, OUT) :-
    [ f(height, IN:'Piece', X1:out('Integer')),
      f(width, IN:'Piece', X2:out('Integer')),
      f(ofcolor, IN:'Grid', 'ONE':value:'Integer', X3:out('Indices')),
      f(ofcolor, IN:'Grid', 'FOUR':value:'Integer', X4:out('Indices')),
      f(ulcorner, X3:'Patch', X5:out('Point')),
      f(subgrid, X3:'Patch', IN:'Grid', X6:out('Grid')),
      f(rot90, X6:'Grid', X7:out('Grid')),
      f(rot180, X6:'Grid', X8:out('Grid')),
      f(rot270, X6:'Grid', X9:out('Grid')),
      f(matcher, size, 'ZERO':target:'Any', X10:out('Callable')),
      f(rbind, ofcolor, 'ONE':fixed:'Any', X11:out('Callable')),
      f(compose,
        normalize:outer:'Callable',
        X11:inner:'Callable',
        X12:out('Callable')),
      f(rbind, ofcolor, 'FOUR':fixed:'Any', X13:out('Callable')),
      f(rbind, shift, X5:fixed:'Any', X14:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        X13:inner:'Callable',
        X15:out('Callable')),
      f(lbind, subtract, X1:fixed:'Any', X16:out('Callable')),
      f(chain,
        increment:h:'Callable',
        X16:g:'Callable',
        height:f:'Callable',
        X17:out('Callable')),
      f(lbind, subtract, X2:fixed:'Any', X18:out('Callable')),
      f(chain,
        increment:h:'Callable',
        X18:g:'Callable',
        width:f:'Callable',
        X19:out('Callable')),
      f(rbind, interval, 'ONE':fixed:'Any', X20:out('Callable')),
      f(lbind, X20, 'ZERO':fixed:'Any', X21:out('Callable')),
      f(compose,
        X21:outer:'Callable',
        X17:inner:'Callable',
        X22:out('Callable')),
      f(compose,
        X21:outer:'Callable',
        X19:inner:'Callable',
        X23:out('Callable')),
      f(fork,
        product:outer:'Callable',
        X22:a:'Callable',
        X23:b:'Callable',
        X24:out('Callable')),
      f(rbind, shift, (-1, -1):fixed:'Any', X25:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X26:out('Callable')),
      f(chain,
        X26:h:'Callable',
        X25:g:'Callable',
        X12:f:'Callable',
        X27:out('Callable')),
      f(astuple, X6:a:'Integer', X7:b:'Integer', X28:out('Point')),
      f(astuple, X8:a:'Integer', X9:b:'Integer', X29:out('Point')),
      f(combine,
        X28:a:'Container',
        X29:b:'Container',
        X30:out('Container')),
      f(apply, X15, X30:'Container', X31:out('Container')),
      f(lbind, difference, X4:fixed:'Any', X32:out('Callable')),
      f(apply, X32, X31:'Container', X33:out('Container')),
      f(apply, normalize, X31:'Container', X34:out('Container')),
      f(apply, X24, X34:'Container', X35:out('Container')),
      f(lbind, rbind, difference:fixed:'Any', X36:out('Callable')),
      f(apply, X26, X34:'Container', X37:out('Container')),
      f(apply, X36, X33:'Container', X38:out('Container')),
      f(papply,
        compose,
        X38:a:'Tuple',
        X37:b:'Tuple',
        X39:out('Tuple')),
      f(lbind, compose, X10:fixed:'Any', X40:out('Callable')),
      f(apply, X40, X39:'Container', X41:out('Container')),
      f(papply,
        sfilter,
        X35:a:'Tuple',
        X41:b:'Tuple',
        X42:out('Tuple')),
      f(apply, X27, X30:'Container', X43:out('Container')),
      f(mpapply,
        mapply,
        X43:a:'Tuple',
        X42:b:'Tuple',
        X44:out('Tuple')),
      f(fill,
        IN:'Grid',
        'ONE':value:'Integer',
        X44:'Patch',
        OUT:out('Grid'))
    ].
solve(f15e1fac, IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(portrait, X1:'Piece', returns=X2),
      f(branch,
        condition=X2,
        identity:a:'Any',
        dmirror:b:'Any',
        X3:out('Any')),
      f(X3, IN, X4),
      f(leftmost, X1:'Patch', X5:out('Integer')),
      f(equality, X5:a:'Any', 'ZERO':b:'Any', returns=X6),
      f(branch,
        condition=X6,
        identity:a:'Any',
        vmirror:b:'Any',
        X7:out('Any')),
      f(X7, X4, X8),
      f(ofcolor, X8:'Grid', 'EIGHT':value:'Integer', X9:out('Indices')),
      f(uppermost, X9:'Patch', X10:out('Integer')),
      f(equality, X10:a:'Any', 'ZERO':b:'Any', returns=X11),
      f(branch,
        condition=X11,
        identity:a:'Any',
        hmirror:b:'Any',
        X12:out('Any')),
      f(X12, X8, X13),
      f(ofcolor, X13:'Grid', 'EIGHT':value:'Integer', X14:out('Indices')),
      f(ofcolor, X13:'Grid', 'TWO':value:'Integer', X15:out('Indices')),
      f(rbind, shoot, (1, 0):fixed:'Any', X16:out('Callable')),
      f(mapply,
        X16,
        X14:container:'ContainerContainer',
        X17:out('FrozenSet')),
      f(height, X13:'Piece', X18:out('Integer')),
      f(apply, first, X15:'Container', X19:out('Container')),
      f(insert,
        'ZERO':value:'Any',
        X19:container:'FrozenSet',
        X20:out('FrozenSet')),
      f(insert,
        X18:value:'Any',
        X19:container:'FrozenSet',
        X21:out('FrozenSet')),
      f(apply, decrement, X21:'Container', X22:out('Container')),
      f(order,
        X20:'Container',
        identity:compfunc:'Callable',
        X23:out('Tuple')),
      f(order,
        X22:'Container',
        identity:compfunc:'Callable',
        X24:out('Tuple')),
      f(size, X15:'Container', X25:out('Integer')),
      f(increment, X25:x:'Numerical', X26:out('Numerical')),
      f(interval,
        'ZERO':start:'Integer',
        X26:stop:'Integer',
        'ONE':step:'Integer',
        X27:out('Tuple')),
      f(apply, tojvec, X27:'Container', X28:out('Container')),
      f(pair, X23:a:'Tuple', X24:b:'Tuple', X29:out('TupleTuple')),
      f(lbind, sfilter, X17:fixed:'Any', X30:out('Callable')),
      f(compose,
        first:outer:'Callable',
        last:inner:'Callable',
        X31:out('Callable')),
      f(chain,
        decrement:h:'Callable',
        first:g:'Callable',
        first:f:'Callable',
        X32:out('Callable')),
      f(fork,
        greater:outer:'Callable',
        X31:a:'Callable',
        X32:b:'Callable',
        X33:out('Callable')),
      f(chain,
        increment:h:'Callable',
        last:g:'Callable',
        first:f:'Callable',
        X34:out('Callable')),
      f(fork,
        greater:outer:'Callable',
        X34:a:'Callable',
        X31:b:'Callable',
        X35:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X33:a:'Callable',
        X35:b:'Callable',
        X36:out('Callable')),
      f(lbind, lbind, astuple:fixed:'Any', X37:out('Callable')),
      f(lbind, compose, X36:fixed:'Any', X38:out('Callable')),
      f(chain,
        X30:h:'Callable',
        X38:g:'Callable',
        X37:f:'Callable',
        X39:out('Callable')),
      f(apply, X39, X29:'Container', X40:out('Container')),
      f(papply, shift, X40:a:'Tuple', X28:b:'Tuple', X41:out('Tuple')),
      f(merge,
        X41:containers:'ContainerContainer',
        X42:out('Container')),
      f(fill,
        X13:'Grid',
        'EIGHT':value:'Integer',
        X42:'Patch',
        X43:out('Grid')),
      f(chain,
        X3:h:'Callable',
        X7:g:'Callable',
        X12:f:'Callable',
        X44:out('Callable')),
      f(X44, X43, OUT)
    ].
solve('234bbc79', IN, OUT) :-
    [ f(rbind, objects, true:fixed:'Any', X1:out('Callable')),
      f(rbind, X1, false:fixed:'Any', X2:out('Callable')),
      f(rbind, X2, false:fixed:'Any', X3:out('Callable')),
      f(rbind, argmin, leftmost:fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        X3:inner:'Callable',
        X5:out('Callable')),
      f(fork,
        remove:outer:'Callable',
        X5:a:'Callable',
        X3:b:'Callable',
        X6:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        X6:inner:'Callable',
        X7:out('Callable')),
      f(compose,
        last:outer:'Callable',
        last:inner:'Callable',
        X8:out('Callable')),
      f(matcher, first, 'FIVE':target:'Any', X9:out('Callable')),
      f(rbind, sfilter, X9:fixed:'Any', X10:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        identity:a:'Callable',
        X10:b:'Callable',
        X11:out('Callable')),
      f(rbind, argmin, X8:fixed:'Any', X12:out('Callable')),
      f(compose,
        X12:outer:'Callable',
        X10:inner:'Callable',
        X13:out('Callable')),
      f(compose,
        last:outer:'Callable',
        X13:inner:'Callable',
        X14:out('Callable')),
      f(rbind, add, (0, 1):fixed:'Any', X15:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        X7:inner:'Callable',
        X16:out('Callable')),
      f(compose,
        X14:outer:'Callable',
        X5:inner:'Callable',
        X17:out('Callable')),
      f(fork,
        subtract:outer:'Callable',
        X16:a:'Callable',
        X17:b:'Callable',
        X18:out('Callable')),
      f(compose,
        invert:outer:'Callable',
        X18:inner:'Callable',
        X19:out('Callable')),
      f(compose,
        X15:outer:'Callable',
        X19:inner:'Callable',
        X20:out('Callable')),
      f(compose,
        mostcolor:outer:'Callable',
        X11:inner:'Callable',
        X21:out('Callable')),
      f(fork,
        astuple:outer:'Callable',
        X21:a:'Callable',
        X14:b:'Callable',
        X22:out('Callable')),
      f(fork,
        remove:outer:'Callable',
        X13:a:'Callable',
        identity:b:'Callable',
        X23:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X22:a:'Callable',
        X23:b:'Callable',
        X24:out('Callable')),
      f(compose,
        X24:outer:'Callable',
        X7:inner:'Callable',
        X25:out('Callable')),
      f(fork,
        cover:outer:'Callable',
        identity:a:'Callable',
        X25:b:'Callable',
        X26:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X25:a:'Callable',
        X20:b:'Callable',
        X27:out('Callable')),
      f(fork,
        paint:outer:'Callable',
        X26:a:'Callable',
        X27:b:'Callable',
        X28:out('Callable')),
      f(rbind, argmax, X8:fixed:'Any', X29:out('Callable')),
      f(chain,
        first:h:'Callable',
        X29:g:'Callable',
        X11:f:'Callable',
        X30:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X30:a:'Callable',
        X10:b:'Callable',
        X31:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X11:a:'Callable',
        X31:b:'Callable',
        X32:out('Callable')),
      f(compose,
        X32:outer:'Callable',
        X5:inner:'Callable',
        X33:out('Callable')),
      f(fork,
        paint:outer:'Callable',
        X28:a:'Callable',
        X33:b:'Callable',
        X34:out('Callable')),
      f(X34, IN, X35),
      f(X34, X35, X36),
      f(palette, X36:'Element', X37:out('IntegerSet')),
      f(contained, 'FIVE':value:'Any', X37:'Container', returns=X38),
      f(branch,
        condition=X38,
        X34:a:'Any',
        identity:b:'Any',
        X39:out('Any')),
      f(X39, X36, X40),
      f(X3, X40, X41),
      f(merge,
        X41:containers:'ContainerContainer',
        X42:out('Container')),
      f(width, X42:'Piece', X43:out('Integer')),
      f(astuple, 'THREE':a:'Integer', X43:b:'Integer', X44:out('Point')),
      f(crop,
        X40:'Grid',
        (0, 0):start:'Point',
        X44:dims:'Point',
        OUT:out('Grid'))
    ].
solve('22233c11', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X2:out('Objects')),
      f(first, X1:'Container', X3:out('Any')),
      f(recolor, 'EIGHT':value:'Integer', X3:'Patch', X4:out('Object')),
      f(normalize, X4:'Patch', X5:out('Patch')),
      f(totuple, X2:container:'FrozenSet', X6:out('Tuple')),
      f(apply, width, X6:'Container', X7:out('Container')),
      f(lbind, index, IN:fixed:'Any', X8:out('Callable')),
      f(rbind, equality, 'ZERO':fixed:'Any', X9:out('Callable')),
      f(chain,
        flip:h:'Callable',
        X9:g:'Callable',
        X8:f:'Callable',
        X10:out('Callable')),
      f(apply, urcorner, X6:'Container', X11:out('Container')),
      f(apply, X10, X11:'Container', X12:out('Container')),
      f(first, X7:'Container', X13:out('Any')),
      f(halve, X13:n:'Numerical', X14:out('Numerical')),
      f(pair, X6:a:'Tuple', X12:b:'Tuple', X15:out('TupleTuple')),
      f(sfilter,
        X15:'Container',
        last:condition:'Callable',
        X16:out('Container')),
      f(apply, first, X16:'Container', X17:out('Container')),
      f(apply, flip, X12:'Container', X18:out('Container')),
      f(pair, X6:a:'Tuple', X18:b:'Tuple', X19:out('TupleTuple')),
      f(sfilter,
        X19:'Container',
        last:condition:'Callable',
        X20:out('Container')),
      f(apply, first, X20:'Container', X21:out('Container')),
      f(apply, urcorner, X21:'Container', X22:out('Container')),
      f(invert, X14:n:'Numerical', X23:out('Numerical')),
      f(astuple, X23:a:'Integer', 'ONE':b:'Integer', X24:out('Point')),
      f(lbind, add, X24:fixed:'Any', X25:out('Callable')),
      f(apply, X25, X22:'Container', X26:out('Container')),
      f(lbind, shift, X5:fixed:'Any', X27:out('Callable')),
      f(mapply,
        X27,
        X26:container:'ContainerContainer',
        X28:out('FrozenSet')),
      f(apply, llcorner, X21:'Container', X29:out('Container')),
      f(astuple, 'ONE':a:'Integer', X23:b:'Integer', X30:out('Point')),
      f(lbind, add, X30:fixed:'Any', X31:out('Callable')),
      f(apply, X31, X29:'Container', X32:out('Container')),
      f(mapply,
        X27,
        X32:container:'ContainerContainer',
        X33:out('FrozenSet')),
      f(apply, ulcorner, X17:'Container', X34:out('Container')),
      f(astuple, X23:a:'Integer', X23:b:'Integer', X35:out('Point')),
      f(lbind, add, X35:fixed:'Any', X36:out('Callable')),
      f(apply, X36, X34:'Container', X37:out('Container')),
      f(mapply,
        X27,
        X37:container:'ContainerContainer',
        X38:out('FrozenSet')),
      f(apply, lrcorner, X17:'Container', X39:out('Container')),
      f(lbind, add, (1, 1):fixed:'Any', X40:out('Callable')),
      f(apply, X40, X39:'Container', X41:out('Container')),
      f(mapply,
        X27,
        X41:container:'ContainerContainer',
        X42:out('FrozenSet')),
      f(paint, IN:'Grid', X28:obj:'Object', X43:out('Grid')),
      f(paint, X43:'Grid', X33:obj:'Object', X44:out('Grid')),
      f(paint, X44:'Grid', X38:obj:'Object', X45:out('Grid')),
      f(paint, X45:'Grid', X42:obj:'Object', OUT:out('Grid'))
    ].
solve('2dd70a9a', IN, OUT) :-
    [ f(ofcolor, IN:'Grid', 'TWO':value:'Integer', X1:out('Indices')),
      f(ofcolor, IN:'Grid', 'THREE':value:'Integer', X2:out('Indices')),
      f(vline, X1:'Patch', returns=X3),
      f(vline, X2:'Patch', returns=X4),
      f(center, X1:'Patch', X5:out('Point')),
      f(branch,
        condition=X4,
        uppermost:a:'Any',
        rightmost:b:'Any',
        X6:out('Any')),
      f(X6, X1, X7),
      f(X6, X2, X8),
      f(greater, X7:a:'Integer', X8:b:'Integer', returns=X9),
      f(both, a=X4, b=X9, returns=X10),
      f(branch,
        condition=X10,
        lowermost:a:'Any',
        uppermost:b:'Any',
        X11:out('Any')),
      f(X11, X2, X12),
      f(branch,
        condition=X4,
        leftmost:a:'Any',
        rightmost:b:'Any',
        X13:out('Any')),
      f(X13, X2, X14),
      f(astuple, X12:a:'Integer', X14:b:'Integer', X15:out('Point')),
      f(other, X2:'Container', X15:value:'Any', X16:out('Any')),
      f(subtract,
        X15:a:'Numerical',
        X16:b:'Numerical',
        X17:out('Numerical')),
      f(shoot,
        X15:start:'Point',
        X17:direction:'Point',
        X18:out('Indices')),
      f(underfill,
        IN:'Grid',
        'ONE':value:'Integer',
        X18:'Patch',
        X19:out('Grid')),
      f(objects,
        X19:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=false,
        X20:out('Objects')),
      f(colorfilter,
        X20:objs:'Objects',
        'ONE':value:'Integer',
        X21:out('Objects')),
      f(rbind, adjacent, X2:fixed:'Any', X22:out('Callable')),
      f(sfilter,
        X21:'Container',
        X22:condition:'Callable',
        X23:out('Container')),
      f(difference,
        X21:a:'FrozenSet',
        X23:b:'FrozenSet',
        X24:out('FrozenSet')),
      f(merge,
        X24:containers:'ContainerContainer',
        X25:out('Container')),
      f(cover, X19:'Grid', X25:'Patch', X26:out('Grid')),
      f(shoot,
        X5:start:'Point',
        (1, 0):direction:'Point',
        X27:out('Indices')),
      f(shoot,
        X5:start:'Point',
        (-1, 0):direction:'Point',
        X28:out('Indices')),
      f(shoot,
        X5:start:'Point',
        (0, -1):direction:'Point',
        X29:out('Indices')),
      f(shoot,
        X5:start:'Point',
        (0, 1):direction:'Point',
        X30:out('Indices')),
      f(combine,
        X27:a:'Container',
        X28:b:'Container',
        X31:out('Container')),
      f(combine,
        X29:a:'Container',
        X30:b:'Container',
        X32:out('Container')),
      f(branch,
        condition=X3,
        X31:a:'Any',
        X32:b:'Any',
        X33:out('Any')),
      f(ofcolor, X26:'Grid', 'ONE':value:'Integer', X34:out('Indices')),
      f(initset, X15:value:'Any', X35:out('FrozenSet')),
      f(rbind, manhattan, X35:fixed:'Any', X36:out('Callable')),
      f(compose,
        X36:outer:'Callable',
        initset:inner:'Callable',
        X37:out('Callable')),
      f(argmax,
        X34:'Container',
        X37:compfunc:'Callable',
        X38:out('Any')),
      f(initset, X38:value:'Any', X39:out('FrozenSet')),
      f(gravitate,
        X39:source:'Patch',
        X33:destination:'Patch',
        X40:out('Point')),
      f(crement, X40:x:'Numerical', X41:out('Numerical')),
      f(add,
        X38:a:'Numerical',
        X41:b:'Numerical',
        X42:out('Numerical')),
      f(connect, X38:a:'Point', X42:b:'Point', X43:out('Indices')),
      f(fill,
        X26:'Grid',
        'ONE':value:'Integer',
        X43:'Patch',
        X44:out('Grid')),
      f(connect, X42:a:'Point', X5:b:'Point', X45:out('Indices')),
      f(underfill,
        X44:'Grid',
        'ONE':value:'Integer',
        X45:'Patch',
        X46:out('Grid')),
      f(replace,
        X46:'Grid',
        'ONE':replacee:'Integer',
        'THREE':replacer:'Integer',
        OUT:out('Grid'))
    ].
solve(a64e4611, IN, OUT) :-
    [ f(asindices, IN:'Grid', X1:out('Indices')),
      f(fork,
        product:outer:'Callable',
        identity:a:'Callable',
        identity:b:'Callable',
        X2:out('Callable')),
      f(lbind, canvas, 'ZERO':fixed:'Any', X3:out('Callable')),
      f(compose,
        asobject:outer:'Callable',
        X3:inner:'Callable',
        X4:out('Callable')),
      f(fork,
        multiply:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X5:out('Callable')),
      f(compose,
        positive:outer:'Callable',
        size:inner:'Callable',
        X6:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X7:out('Callable')),
      f(rbind, fork, X5:fixed:'Any', X8:out('Callable')),
      f(lbind, X8, multiply:fixed:'Any', X9:out('Callable')),
      f(lbind, chain, X6:fixed:'Any', X10:out('Callable')),
      f(rbind, X10, X4:fixed:'Any', X11:out('Callable')),
      f(lbind, lbind, occurrences:fixed:'Any', X12:out('Callable')),
      f(chain,
        X9:h:'Callable',
        X11:g:'Callable',
        X12:f:'Callable',
        X13:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        first:inner:'Callable',
        X14:out('Callable')),
      f(compose,
        X13:outer:'Callable',
        last:inner:'Callable',
        X15:out('Callable')),
      f(fork,
        argmax:outer:'Callable',
        X14:a:'Callable',
        X15:b:'Callable',
        X16:out('Callable')),
      f(chain,
        X7:h:'Callable',
        X4:g:'Callable',
        X16:f:'Callable',
        X17:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        X16:inner:'Callable',
        X18:out('Callable')),
      f(fork,
        occurrences:outer:'Callable',
        last:a:'Callable',
        X18:b:'Callable',
        X19:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X17:a:'Callable',
        X19:b:'Callable',
        X20:out('Callable')),
      f(multiply, 'TWO':a:'Numerical', 'SIX':b:'Numerical', X21:out('Numerical')),
      f(interval,
        'THREE':start:'Integer',
        X21:stop:'Integer',
        'ONE':step:'Integer',
        X22:out('Tuple')),
      f(astuple, X22:a:'Integer', IN:b:'Integer', X23:out('Point')),
      f(X20, X23, X24),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X24:'Patch',
        X25:out('Grid')),
      f(interval,
        'THREE':start:'Integer',
        'TEN':stop:'Integer',
        'ONE':step:'Integer',
        X26:out('Tuple')),
      f(astuple, X26:a:'Integer', X25:b:'Integer', X27:out('Point')),
      f(X20, X27, X28),
      f(fill,
        X25:'Grid',
        'THREE':value:'Integer',
        X28:'Patch',
        X29:out('Grid')),
      f(astuple, X26:a:'Integer', X29:b:'Integer', X30:out('Point')),
      f(X20, X30, X31),
      f(fill,
        X29:'Grid',
        'THREE':value:'Integer',
        X31:'Patch',
        X32:out('Grid')),
      f(rbind, toobject, X32:fixed:'Any', X33:out('Callable')),
      f(rbind, colorcount, 'THREE':fixed:'Any', X34:out('Callable')),
      f(chain,
        X34:h:'Callable',
        X33:g:'Callable',
        neighbors:f:'Callable',
        X35:out('Callable')),
      f(matcher, X35, 'EIGHT':target:'Any', X36:out('Callable')),
      f(sfilter,
        X1:'Container',
        X36:condition:'Callable',
        X37:out('Container')),
      f(fill,
        IN:'Grid',
        'THREE':value:'Integer',
        X37:'Patch',
        X38:out('Grid')),
      f(ofcolor, X38:'Grid', 'ZERO':value:'Integer', X39:out('Indices')),
      f(rbind, bordering, X38:fixed:'Any', X40:out('Callable')),
      f(compose,
        X40:outer:'Callable',
        initset:inner:'Callable',
        X41:out('Callable')),
      f(lbind, contained, 'THREE':fixed:'Any', X42:out('Callable')),
      f(rbind, toobject, X38:fixed:'Any', X43:out('Callable')),
      f(chain,
        X42:h:'Callable',
        palette:g:'Callable',
        X43:f:'Callable',
        X44:out('Callable')),
      f(compose,
        X44:outer:'Callable',
        dneighbors:inner:'Callable',
        X45:out('Callable')),
      f(fork,
        both:outer:'Callable',
        X45:a:'Callable',
        X41:b:'Callable',
        X46:out('Callable')),
      f(sfilter,
        X39:'Container',
        X46:condition:'Callable',
        X47:out('Container')),
      f(fill,
        X38:'Grid',
        'THREE':value:'Integer',
        X47:'Patch',
        OUT:out('Grid'))
    ].
solve('7837ac64', IN, OUT) :-
    [ f(compress, IN:'Grid', X1:out('Grid')),
      f(lbind, colorcount, X1:fixed:'Any', X2:out('Callable')),
      f(palette, X1:'Element', X3:out('IntegerSet')),
      f(order,
        X3:'Container',
        X2:compfunc:'Callable',
        X4:out('Tuple')),
      f(remove, 'ZERO':value:'Any', X4:'Container', X5:out('Container')),
      f(last, X5:'Container', X6:out('Any')),
      f(replace,
        X1:'Grid',
        X6:replacee:'Integer',
        'ZERO':replacer:'Integer',
        X7:out('Grid')),
      f(objects,
        X7:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X8:out('Objects')),
      f(merge, X8:containers:'ContainerContainer', X9:out('Container')),
      f(subgrid, X9:'Patch', X7:'Grid', X10:out('Grid')),
      f(index, X10:'Grid', (0, 0):loc:'Point', X11:out('Integer')),
      f(vmirror, X10:'Piece', X12:out('Piece')),
      f(index, X12:'Grid', (0, 0):loc:'Point', X13:out('Integer')),
      f(hmirror, X10:'Piece', X14:out('Piece')),
      f(index, X14:'Grid', (0, 0):loc:'Point', X15:out('Integer')),
      f(vmirror, X14:'Piece', X16:out('Piece')),
      f(index, X16:'Grid', (0, 0):loc:'Point', X17:out('Integer')),
      f(width, X10:'Piece', X18:out('Integer')),
      f(subtract,
        X18:a:'Numerical',
        'FOUR':b:'Numerical',
        X19:out('Numerical')),
      f(divide,
        X19:a:'Numerical',
        'THREE':b:'Numerical',
        X20:out('Numerical')),
      f(increment, X20:x:'Numerical', X21:out('Numerical')),
      f(tojvec, X21:j:'Integer', X22:out('Point')),
      f(toivec, X21:i:'Integer', X23:out('Point')),
      f(index, X10:'Grid', X22:loc:'Point', X24:out('Integer')),
      f(index, X12:'Grid', X22:loc:'Point', X25:out('Integer')),
      f(index, X14:'Grid', X22:loc:'Point', X26:out('Integer')),
      f(index, X16:'Grid', X22:loc:'Point', X27:out('Integer')),
      f(index, X10:'Grid', X23:loc:'Point', X28:out('Integer')),
      f(index, X14:'Grid', X23:loc:'Point', X29:out('Integer')),
      f(index, X12:'Grid', X23:loc:'Point', X30:out('Integer')),
      f(equality, X24:a:'Any', X25:b:'Any', returns=X31),
      f(equality, X26:a:'Any', X27:b:'Any', returns=X32),
      f(equality, X28:a:'Any', X29:b:'Any', returns=X33),
      f(equality, X29:a:'Any', X30:b:'Any', returns=X34),
      f(branch,
        condition=X31,
        X24:a:'Any',
        'ZERO':b:'Any',
        X35:out('Any')),
      f(branch,
        condition=X32,
        X26:a:'Any',
        'ZERO':b:'Any',
        X36:out('Any')),
      f(branch,
        condition=X33,
        X28:a:'Any',
        'ZERO':b:'Any',
        X37:out('Any')),
      f(branch,
        condition=X34,
        X29:a:'Any',
        'ZERO':b:'Any',
        X38:out('Any')),
      f(astuple, X11:a:'Integer', X35:b:'Integer', X39:out('Point')),
      f(repeat, X13:item:'Any', 'ONE':num:'Integer', X40:out('Tuple')),
      f(combine,
        X39:a:'Container',
        X40:b:'Container',
        X41:out('Container')),
      f(astuple, X37:a:'Integer', 'ZERO':b:'Integer', X42:out('Point')),
      f(repeat, X38:item:'Any', 'ONE':num:'Integer', X43:out('Tuple')),
      f(combine,
        X42:a:'Container',
        X43:b:'Container',
        X44:out('Container')),
      f(astuple, X15:a:'Integer', X36:b:'Integer', X45:out('Point')),
      f(repeat, X17:item:'Any', 'ONE':num:'Integer', X46:out('Tuple')),
      f(combine,
        X45:a:'Container',
        X46:b:'Container',
        X47:out('Container')),
      f(astuple, X41:a:'Integer', X44:b:'Integer', X48:out('Point')),
      f(repeat, X47:item:'Any', 'ONE':num:'Integer', X49:out('Tuple')),
      f(vconcat, X48:a:'Grid', X49:b:'Grid', OUT:out('Grid'))
    ].
solve(a8c38be5, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=true,
        diagonal=false,
        without_bg=true,
        X1:out('Objects')),
      f(colorfilter,
        X1:objs:'Objects',
        'FIVE':value:'Integer',
        X2:out('Objects')),
      f(argmax, X2:'Container', size:compfunc:'Callable', X3:out('Any')),
      f(subgrid, X3:'Patch', IN:'Grid', X4:out('Grid')),
      f(difference,
        X1:a:'FrozenSet',
        X2:b:'FrozenSet',
        X5:out('FrozenSet')),
      f(fork,
        equality:outer:'Callable',
        height:a:'Callable',
        width:b:'Callable',
        X6:out('Callable')),
      f(fork,
        greater:outer:'Callable',
        width:a:'Callable',
        height:b:'Callable',
        X7:out('Callable')),
      f(sfilter,
        X5:'Container',
        X6:condition:'Callable',
        X8:out('Container')),
      f(sfilter,
        X5:'Container',
        portrait:condition:'Callable',
        X9:out('Container')),
      f(sfilter,
        X5:'Container',
        X7:condition:'Callable',
        X10:out('Container')),
      f(rbind, subgrid, IN:fixed:'Any', X11:out('Callable')),
      f(chain,
        center:h:'Callable',
        delta:g:'Callable',
        normalize:f:'Callable',
        X12:out('Callable')),
      f(order,
        X8:'Container',
        X12:compfunc:'Callable',
        X13:out('Tuple')),
      f(apply, X11, X13:'Container', X14:out('Container')),
      f(order,
        X9:'Container',
        X12:compfunc:'Callable',
        X15:out('Tuple')),
      f(apply, X11, X15:'Container', X16:out('Container')),
      f(order,
        X10:'Container',
        X12:compfunc:'Callable',
        X17:out('Tuple')),
      f(apply, X11, X17:'Container', X18:out('Container')),
      f(first, X14:'Container', X19:out('Any')),
      f(remove,
        X19:value:'Any',
        X14:'Container',
        X20:out('Container')),
      f(first, X20:'Container', X21:out('Any')),
      f(remove,
        X21:value:'Any',
        X20:'Container',
        X22:out('Container')),
      f(first, X22:'Container', X23:out('Any')),
      f(last, X14:'Container', X24:out('Any')),
      f(last, X16:'Container', X25:out('Any')),
      f(first, X16:'Container', X26:out('Any')),
      f(last, X18:'Container', X27:out('Any')),
      f(first, X18:'Container', X28:out('Any')),
      f(astuple, 'ONE':a:'Integer', 'TWO':b:'Integer', X29:out('Point')),
      f(astuple, 'ONE':a:'Integer', 'THREE':b:'Integer', X30:out('Point')),
      f(astuple, 'NINE':a:'Integer', 'ONE':b:'Integer', X31:out('Point')),
      f(canvas,
        'FIVE':value:'Integer',
        X29:dimensions:'Point',
        X32:out('Grid')),
      f(canvas,
        'FIVE':value:'Integer',
        X30:dimensions:'Point',
        X33:out('Grid')),
      f(canvas,
        'FIVE':value:'Integer',
        X31:dimensions:'Point',
        X34:out('Grid')),
      f(vconcat, X24:a:'Grid', X32:b:'Grid', X35:out('Grid')),
      f(vconcat, X35:a:'Grid', X25:b:'Grid', X36:out('Grid')),
      f(vconcat, X36:a:'Grid', X32:b:'Grid', X37:out('Grid')),
      f(vconcat, X37:a:'Grid', X21:b:'Grid', X38:out('Grid')),
      f(vconcat, X27:a:'Grid', X33:b:'Grid', X39:out('Grid')),
      f(vconcat, X39:a:'Grid', X4:b:'Grid', X40:out('Grid')),
      f(vconcat, X40:a:'Grid', X33:b:'Grid', X41:out('Grid')),
      f(vconcat, X41:a:'Grid', X28:b:'Grid', X42:out('Grid')),
      f(vconcat, X23:a:'Grid', X32:b:'Grid', X43:out('Grid')),
      f(vconcat, X43:a:'Grid', X26:b:'Grid', X44:out('Grid')),
      f(vconcat, X44:a:'Grid', X32:b:'Grid', X45:out('Grid')),
      f(vconcat, X45:a:'Grid', X19:b:'Grid', X46:out('Grid')),
      f(hconcat, X38:a:'Grid', X34:b:'Grid', X47:out('Grid')),
      f(hconcat, X47:a:'Grid', X42:b:'Grid', X48:out('Grid')),
      f(hconcat, X48:a:'Grid', X34:b:'Grid', X49:out('Grid')),
      f(hconcat, X49:a:'Grid', X46:b:'Grid', OUT:out('Grid'))
    ].
solve(b775ac94, IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, rbind, equality:fixed:'Any', X2:out('Callable')),
      f(rbind, compose, first:fixed:'Any', X3:out('Callable')),
      f(chain,
        X3:h:'Callable',
        X2:g:'Callable',
        mostcolor:f:'Callable',
        X4:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        identity:a:'Callable',
        X4:b:'Callable',
        X5:out('Callable')),
      f(fork,
        difference:outer:'Callable',
        identity:a:'Callable',
        X5:b:'Callable',
        X6:out('Callable')),
      f(lbind, rbind, adjacent:fixed:'Any', X7:out('Callable')),
      f(rbind, compose, initset:fixed:'Any', X8:out('Callable')),
      f(chain,
        X8:h:'Callable',
        X7:g:'Callable',
        X6:f:'Callable',
        X9:out('Callable')),
      f(fork,
        extract:outer:'Callable',
        X5:a:'Callable',
        X9:b:'Callable',
        X10:out('Callable')),
      f(fork,
        insert:outer:'Callable',
        X10:a:'Callable',
        X6:b:'Callable',
        X11:out('Callable')),
      f(lbind, recolor, 'ZERO':fixed:'Any', X12:out('Callable')),
      f(chain,
        X12:h:'Callable',
        delta:g:'Callable',
        X11:f:'Callable',
        X13:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X11:a:'Callable',
        X13:b:'Callable',
        X14:out('Callable')),
      f(fork,
        position:outer:'Callable',
        X5:a:'Callable',
        X6:b:'Callable',
        X15:out('Callable')),
      f(chain,
        toivec:h:'Callable',
        first:g:'Callable',
        X15:f:'Callable',
        X16:out('Callable')),
      f(chain,
        tojvec:h:'Callable',
        last:g:'Callable',
        X15:f:'Callable',
        X17:out('Callable')),
      f(fork,
        multiply:outer:'Callable',
        shape:a:'Callable',
        X16:b:'Callable',
        X18:out('Callable')),
      f(fork,
        multiply:outer:'Callable',
        shape:a:'Callable',
        X17:b:'Callable',
        X19:out('Callable')),
      f(fork,
        multiply:outer:'Callable',
        shape:a:'Callable',
        X15:b:'Callable',
        X20:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        hmirror:a:'Callable',
        X18:b:'Callable',
        X21:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        vmirror:a:'Callable',
        X19:b:'Callable',
        X22:out('Callable')),
      f(compose,
        hmirror:outer:'Callable',
        vmirror:inner:'Callable',
        X23:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X23:a:'Callable',
        X20:b:'Callable',
        X24:out('Callable')),
      f(lbind, compose, X5:fixed:'Any', X25:out('Callable')),
      f(X25, X21, X26),
      f(X25, X22, X27),
      f(X25, X24, X28),
      f(compose,
        crement:outer:'Callable',
        invert:inner:'Callable',
        X29:out('Callable')),
      f(lbind, compose, X29:fixed:'Any', X30:out('Callable')),
      f(X30, X16, X31),
      f(X30, X17, X32),
      f(X30, X15, X33),
      f(fork,
        shift:outer:'Callable',
        X26:a:'Callable',
        X31:b:'Callable',
        X34:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X27:a:'Callable',
        X32:b:'Callable',
        X35:out('Callable')),
      f(fork,
        shift:outer:'Callable',
        X28:a:'Callable',
        X33:b:'Callable',
        X36:out('Callable')),
      f(lbind, index, IN:fixed:'Any', X37:out('Callable')),
      f(lbind, compose, toindices:fixed:'Any', X38:out('Callable')),
      f(X38, X14, X39),
      f(X38, X34, X40),
      f(X38, X35, X41),
      f(X38, X36, X42),
      f(fork,
        intersection:outer:'Callable',
        X39:a:'Callable',
        X40:b:'Callable',
        X43:out('Callable')),
      f(fork,
        intersection:outer:'Callable',
        X39:a:'Callable',
        X41:b:'Callable',
        X44:out('Callable')),
      f(fork,
        intersection:outer:'Callable',
        X39:a:'Callable',
        X42:b:'Callable',
        X45:out('Callable')),
      f(chain,
        X37:h:'Callable',
        first:g:'Callable',
        X43:f:'Callable',
        X46:out('Callable')),
      f(chain,
        X37:h:'Callable',
        first:g:'Callable',
        X44:f:'Callable',
        X47:out('Callable')),
      f(chain,
        X37:h:'Callable',
        first:g:'Callable',
        X45:f:'Callable',
        X48:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X46:a:'Callable',
        X34:b:'Callable',
        X49:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X47:a:'Callable',
        X35:b:'Callable',
        X50:out('Callable')),
      f(fork,
        recolor:outer:'Callable',
        X48:a:'Callable',
        X36:b:'Callable',
        X51:out('Callable')),
      f(mapply,
        X49,
        X1:container:'ContainerContainer',
        X52:out('FrozenSet')),
      f(mapply,
        X50,
        X1:container:'ContainerContainer',
        X53:out('FrozenSet')),
      f(mapply,
        X51,
        X1:container:'ContainerContainer',
        X54:out('FrozenSet')),
      f(paint, IN:'Grid', X52:obj:'Object', X55:out('Grid')),
      f(paint, X55:'Grid', X53:obj:'Object', X56:out('Grid')),
      f(paint, X56:'Grid', X54:obj:'Object', OUT:out('Grid'))
    ].
solve('97a05b5b', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(argmax, X1:'Container', size:compfunc:'Callable', X2:out('Any')),
      f(subgrid, X2:'Patch', IN:'Grid', X3:out('Grid')),
      f(rbind, greater, 'ONE':fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        numcolors:inner:'Callable',
        X5:out('Callable')),
      f(sfilter,
        X1:'Container',
        X5:condition:'Callable',
        X6:out('Container')),
      f(lbind, rbind, subtract:fixed:'Any', X7:out('Callable')),
      f(switch, X3:'Grid', 'TWO':a:'Integer', 'ZERO':b:'Integer', X8:out('Grid')),
      f(lbind, occurrences, X8:fixed:'Any', X9:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X10:out('Callable')),
      f(compose,
        X7:outer:'Callable',
        ulcorner:inner:'Callable',
        X11:out('Callable')),
      f(matcher, first, 'TWO':target:'Any', X12:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X12:inner:'Callable',
        X13:out('Callable')),
      f(rbind, sfilter, X12:fixed:'Any', X14:out('Callable')),
      f(rbind, sfilter, X13:fixed:'Any', X15:out('Callable')),
      f(lbind, recolor, 'ZERO':fixed:'Any', X16:out('Callable')),
      f(compose,
        X16:outer:'Callable',
        X15:inner:'Callable',
        X17:out('Callable')),
      f(fork,
        combine:outer:'Callable',
        X17:a:'Callable',
        X14:b:'Callable',
        X18:out('Callable')),
      f(chain,
        X11:h:'Callable',
        X18:g:'Callable',
        normalize:f:'Callable',
        X19:out('Callable')),
      f(objects,
        X8:'Grid',
        univalued=true,
        diagonal=true,
        without_bg=true,
        X20:out('Objects')),
      f(apply, toindices, X20:'Container', X21:out('Container')),
      f(chain,
        X9:h:'Callable',
        X18:g:'Callable',
        normalize:f:'Callable',
        X22:out('Callable')),
      f(rbind, colorcount, 'TWO':fixed:'Any', X23:out('Callable')),
      f(lbind, sfilter, X21:fixed:'Any', X24:out('Callable')),
      f(chain,
        size:h:'Callable',
        first:g:'Callable',
        X24:f:'Callable',
        X25:out('Callable')),
      f(compose,
        positive:outer:'Callable',
        size:inner:'Callable',
        X26:out('Callable')),
      f(lbind, lbind, contained:fixed:'Any', X27:out('Callable')),
      f(chain,
        X26:h:'Callable',
        X24:g:'Callable',
        X27:f:'Callable',
        X28:out('Callable')),
      f(compose,
        X25:outer:'Callable',
        X27:inner:'Callable',
        X29:out('Callable')),
      f(rbind, sfilter, X28:fixed:'Any', X30:out('Callable')),
      f(compose,
        X30:outer:'Callable',
        X22:inner:'Callable',
        X31:out('Callable')),
      f(lbind, rbind, equality:fixed:'Any', X32:out('Callable')),
      f(rbind, compose, X29:fixed:'Any', X33:out('Callable')),
      f(chain,
        X33:h:'Callable',
        X32:g:'Callable',
        X23:f:'Callable',
        X34:out('Callable')),
      f(fork,
        sfilter:outer:'Callable',
        X31:a:'Callable',
        X34:b:'Callable',
        X35:out('Callable')),
      f(fork,
        apply:outer:'Callable',
        X19:a:'Callable',
        X35:b:'Callable',
        X36:out('Callable')),
      f(compose,
        X10:outer:'Callable',
        normalize:inner:'Callable',
        X37:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X37:a:'Callable',
        X36:b:'Callable',
        X38:out('Callable')),
      f(astuple, cmirror:a:'Integer', dmirror:b:'Integer', X39:out('Point')),
      f(astuple, hmirror:a:'Integer', vmirror:b:'Integer', X40:out('Point')),
      f(combine,
        X39:a:'Container',
        X40:b:'Container',
        X41:out('Container')),
      f(product,
        X41:a:'Container',
        X41:b:'Container',
        X42:out('FrozenSet')),
      f(fork,
        compose:outer:'Callable',
        first:a:'Callable',
        last:b:'Callable',
        X43:out('Callable')),
      f(apply, X43, X42:'Container', X44:out('Container')),
      f(lbind, rapply, X44:fixed:'Any', X45:out('Callable')),
      f(mapply,
        X45,
        X6:container:'ContainerContainer',
        X46:out('FrozenSet')),
      f(mapply,
        X38,
        X46:container:'ContainerContainer',
        X47:out('FrozenSet')),
      f(paint, X3:'Grid', X47:obj:'Object', X48:out('Grid')),
      f(palette, X47:'Element', X49:out('IntegerSet')),
      f(lbind, remove, 'TWO':fixed:'Any', X50:out('Callable')),
      f(X50, X49, X51),
      f(chain,
        first:h:'Callable',
        X50:g:'Callable',
        palette:f:'Callable',
        X52:out('Callable')),
      f(rbind, contained, X51:fixed:'Any', X53:out('Callable')),
      f(chain,
        flip:h:'Callable',
        X53:g:'Callable',
        X52:f:'Callable',
        X54:out('Callable')),
      f(sfilter,
        X6:'Container',
        X54:condition:'Callable',
        X55:out('Container')),
      f(fork,
        apply:outer:'Callable',
        X19:a:'Callable',
        X22:b:'Callable',
        X56:out('Callable')),
      f(fork,
        mapply:outer:'Callable',
        X37:a:'Callable',
        X56:b:'Callable',
        X57:out('Callable')),
      f(mapply,
        X45,
        X55:container:'ContainerContainer',
        X58:out('FrozenSet')),
      f(mapply,
        X57,
        X58:container:'ContainerContainer',
        X59:out('FrozenSet')),
      f(paint, X48:'Grid', X59:obj:'Object', OUT:out('Grid'))
    ].
solve('3e980e27', IN, OUT) :-
    [ f(objects,
        IN:'Grid',
        univalued=false,
        diagonal=true,
        without_bg=true,
        X1:out('Objects')),
      f(lbind, contained, 'TWO':fixed:'Any', X2:out('Callable')),
      f(compose,
        X2:outer:'Callable',
        palette:inner:'Callable',
        X3:out('Callable')),
      f(lbind, contained, 'THREE':fixed:'Any', X4:out('Callable')),
      f(compose,
        X4:outer:'Callable',
        palette:inner:'Callable',
        X5:out('Callable')),
      f(sfilter,
        X1:'Container',
        X3:condition:'Callable',
        X6:out('Container')),
      f(sfilter,
        X1:'Container',
        X5:condition:'Callable',
        X7:out('Container')),
      f(compose,
        positive:outer:'Callable',
        size:inner:'Callable',
        X8:out('Callable')),
      f(X8, X7, X9),
      f(X8, X6, X10),
      f(both, a=X9, b=X10, returns=X11),
      f(repeat, 'ZERO':item:'Any', 'ZERO':num:'Integer', X12:out('Tuple')),
      f(rbind, subgrid, IN:fixed:'Any', X13:out('Callable')),
      f(chain,
        asobject:h:'Callable',
        vmirror:g:'Callable',
        X13:f:'Callable',
        X14:out('Callable')),
      f(matcher, first, 'ZERO':target:'Any', X15:out('Callable')),
      f(compose,
        flip:outer:'Callable',
        X15:inner:'Callable',
        X16:out('Callable')),
      f(lbind, matcher, first:fixed:'Any', X17:out('Callable')),
      f(lbind, rbind, add:fixed:'Any', X18:out('Callable')),
      f(rbind, argmax, size:fixed:'Any', X19:out('Callable')),
      f(chain,
        X18:h:'Callable',
        invert:g:'Callable',
        ulcorner:f:'Callable',
        X20:out('Callable')),
      f(lbind, lbind, shift:fixed:'Any', X21:out('Callable')),
      f(lbind, occurrences, IN:fixed:'Any', X22:out('Callable')),
      f(rbind, astuple, (0, 0):fixed:'Any', X23:out('Callable')),
      f(chain,
        X22:h:'Callable',
        initset:g:'Callable',
        X23:f:'Callable',
        X24:out('Callable')),
      f(branch,
        condition=X9,
        X7:a:'Any',
        X6:b:'Any',
        X25:out('Any')),
      f(X19, X25, X26),
      f(branch,
        condition=X9,
        identity:a:'Any',
        X14:b:'Any',
        X27:out('Any')),
      f(branch, condition=X9, 'THREE':a:'Any', 'TWO':b:'Any', X28:out('Any')),
      f(X27, X26, X29),
      f(sfilter,
        X29:'Container',
        X16:condition:'Callable',
        X30:out('Container')),
      f(X24, X28, X31),
      f(X17, X28, X32),
      f(sfilter,
        X26:'Container',
        X32:condition:'Callable',
        X33:out('Container')),
      f(center, X33:'Patch', X34:out('Point')),
      f(remove,
        X34:value:'Any',
        X31:'Container',
        X35:out('Container')),
      f(normalize, X30:'Patch', X36:out('Patch')),
      f(sfilter,
        X36:'Container',
        X32:condition:'Callable',
        X37:out('Container')),
      f(X20, X37, X38),
      f(apply, X38, X35:'Container', X39:out('Container')),
      f(X21, X36, X40),
      f(mapply,
        X40,
        X39:container:'ContainerContainer',
        X41:out('FrozenSet')),
      f(paint, IN:'Grid', X41:obj:'Object', X42:out('Grid')),
      f(branch,
        condition=X10,
        X6:a:'Any',
        X7:b:'Any',
        X43:out('Any')),
      f(X19, X43, X44),
      f(branch,
        condition=X9,
        X14:a:'Any',
        identity:b:'Any',
        X45:out('Any')),
      f(branch, condition=X10, 'TWO':a:'Any', 'THREE':b:'Any', X46:out('Any')),
      f(X45, X44, X47),
      f(sfilter,
        X47:'Container',
        X16:condition:'Callable',
        X48:out('Container')),
      f(X24, X46, X49),
      f(X17, X46, X50),
      f(sfilter,
        X44:'Container',
        X50:condition:'Callable',
        X51:out('Container')),
      f(center, X51:'Patch', X52:out('Point')),
      f(remove,
        X52:value:'Any',
        X49:'Container',
        X53:out('Container')),
      f(normalize, X48:'Patch', X54:out('Patch')),
      f(sfilter,
        X54:'Container',
        X50:condition:'Callable',
        X55:out('Container')),
      f(X20, X55, X56),
      f(apply, X56, X53:'Container', X57:out('Container')),
      f(branch,
        condition=X11,
        X57:a:'Any',
        X12:b:'Any',
        X58:out('Any')),
      f(X21, X54, X59),
      f(mapply,
        X59,
        X58:container:'ContainerContainer',
        X60:out('FrozenSet')),
      f(paint, X42:'Grid', X60:obj:'Object', OUT:out('Grid'))
    ].
true.
 
113 ?-